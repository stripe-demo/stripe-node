/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import * as Stripe from "./api/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import { Account } from "./api/resources/account/client/Client";
import { AccountLink } from "./api/resources/accountLink/client/Client";
import { AccountSession } from "./api/resources/accountSession/client/Client";
import { Capability } from "./api/resources/capability/client/Client";
import { ExternalAccount } from "./api/resources/externalAccount/client/Client";
import { LoginLink } from "./api/resources/loginLink/client/Client";
import { Person } from "./api/resources/person/client/Client";
import { ApplePayDomain } from "./api/resources/applePayDomain/client/Client";
import { ApplicationFee } from "./api/resources/applicationFee/client/Client";
import { FeeRefund } from "./api/resources/feeRefund/client/Client";
import { Balance } from "./api/resources/balance/client/Client";
import { BalanceTransaction } from "./api/resources/balanceTransaction/client/Client";
import { Charge } from "./api/resources/charge/client/Client";
import { ConfirmationToken } from "./api/resources/confirmationToken/client/Client";
import { CountrySpec } from "./api/resources/countrySpec/client/Client";
import { Coupon } from "./api/resources/coupon/client/Client";
import { CreditNote } from "./api/resources/creditNote/client/Client";
import { CreditNoteLineItem } from "./api/resources/creditNoteLineItem/client/Client";
import { CustomerSession } from "./api/resources/customerSession/client/Client";
import { Customer } from "./api/resources/customer/client/Client";
import { CustomerBalanceTransaction } from "./api/resources/customerBalanceTransaction/client/Client";
import { CashBalance } from "./api/resources/cashBalance/client/Client";
import { CustomerCashBalanceTransaction } from "./api/resources/customerCashBalanceTransaction/client/Client";
import { PaymentSource } from "./api/resources/paymentSource/client/Client";
import { Source } from "./api/resources/source/client/Client";
import { BankAccount } from "./api/resources/bankAccount/client/Client";
import { TaxId } from "./api/resources/taxId/client/Client";
import { Dispute } from "./api/resources/dispute/client/Client";
import { EphemeralKey } from "./api/resources/ephemeralKey/client/Client";
import { Event } from "./api/resources/event/client/Client";
import { ExchangeRate } from "./api/resources/exchangeRate/client/Client";
import { FileLink } from "./api/resources/fileLink/client/Client";
import { File_ } from "./api/resources/file/client/Client";
import { InvoiceRenderingTemplate } from "./api/resources/invoiceRenderingTemplate/client/Client";
import { Invoiceitem } from "./api/resources/invoiceitem/client/Client";
import { Invoice } from "./api/resources/invoice/client/Client";
import { LineItem } from "./api/resources/lineItem/client/Client";
import { Mandate } from "./api/resources/mandate/client/Client";
import { PaymentIntent } from "./api/resources/paymentIntent/client/Client";
import { PaymentLink } from "./api/resources/paymentLink/client/Client";
import { PaymentMethodConfiguration } from "./api/resources/paymentMethodConfiguration/client/Client";
import { PaymentMethodDomain } from "./api/resources/paymentMethodDomain/client/Client";
import { PaymentMethod } from "./api/resources/paymentMethod/client/Client";
import { Payout } from "./api/resources/payout/client/Client";
import { Plan } from "./api/resources/plan/client/Client";
import { Price } from "./api/resources/price/client/Client";
import { Product } from "./api/resources/product/client/Client";
import { ProductFeature } from "./api/resources/productFeature/client/Client";
import { PromotionCode } from "./api/resources/promotionCode/client/Client";
import { Quote } from "./api/resources/quote/client/Client";
import { Refund } from "./api/resources/refund/client/Client";
import { Review } from "./api/resources/review/client/Client";
import { SetupAttempt } from "./api/resources/setupAttempt/client/Client";
import { SetupIntent } from "./api/resources/setupIntent/client/Client";
import { ShippingRate } from "./api/resources/shippingRate/client/Client";
import { ScheduledQueryRun } from "./api/resources/scheduledQueryRun/client/Client";
import { SubscriptionItem } from "./api/resources/subscriptionItem/client/Client";
import { UsageRecordSummary } from "./api/resources/usageRecordSummary/client/Client";
import { UsageRecord } from "./api/resources/usageRecord/client/Client";
import { SubscriptionSchedule } from "./api/resources/subscriptionSchedule/client/Client";
import { Subscription } from "./api/resources/subscription/client/Client";
import { TaxCode } from "./api/resources/taxCode/client/Client";
import { TaxRate } from "./api/resources/taxRate/client/Client";
import { Token } from "./api/resources/token/client/Client";
import { Topup } from "./api/resources/topup/client/Client";
import { Transfer } from "./api/resources/transfer/client/Client";
import { TransferReversal } from "./api/resources/transferReversal/client/Client";
import { WebhookEndpoint } from "./api/resources/webhookEndpoint/client/Client";
import { Apps } from "./api/resources/apps/client/Client";
import { Billing } from "./api/resources/billing/client/Client";
import { BillingPortal } from "./api/resources/billingPortal/client/Client";
import { Checkout } from "./api/resources/checkout/client/Client";
import { Climate } from "./api/resources/climate/client/Client";
import { Entitlements } from "./api/resources/entitlements/client/Client";
import { FinancialConnections } from "./api/resources/financialConnections/client/Client";
import { Forwarding } from "./api/resources/forwarding/client/Client";
import { Identity } from "./api/resources/identity/client/Client";
import { Issuing } from "./api/resources/issuing/client/Client";
import { Radar } from "./api/resources/radar/client/Client";
import { Reporting } from "./api/resources/reporting/client/Client";
import { Tax } from "./api/resources/tax/client/Client";
import { Terminal } from "./api/resources/terminal/client/Client";
import { TestHelpers } from "./api/resources/testHelpers/client/Client";
import { Treasury } from "./api/resources/treasury/client/Client";

export declare namespace StripeClient {
    export interface Options {
        environment?: core.Supplier<environments.StripeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class StripeClient {
    protected _account: Account | undefined;
    protected _accountLink: AccountLink | undefined;
    protected _accountSession: AccountSession | undefined;
    protected _capability: Capability | undefined;
    protected _externalAccount: ExternalAccount | undefined;
    protected _loginLink: LoginLink | undefined;
    protected _person: Person | undefined;
    protected _applePayDomain: ApplePayDomain | undefined;
    protected _applicationFee: ApplicationFee | undefined;
    protected _feeRefund: FeeRefund | undefined;
    protected _balance: Balance | undefined;
    protected _balanceTransaction: BalanceTransaction | undefined;
    protected _charge: Charge | undefined;
    protected _confirmationToken: ConfirmationToken | undefined;
    protected _countrySpec: CountrySpec | undefined;
    protected _coupon: Coupon | undefined;
    protected _creditNote: CreditNote | undefined;
    protected _creditNoteLineItem: CreditNoteLineItem | undefined;
    protected _customerSession: CustomerSession | undefined;
    protected _customer: Customer | undefined;
    protected _customerBalanceTransaction: CustomerBalanceTransaction | undefined;
    protected _cashBalance: CashBalance | undefined;
    protected _customerCashBalanceTransaction: CustomerCashBalanceTransaction | undefined;
    protected _paymentSource: PaymentSource | undefined;
    protected _source: Source | undefined;
    protected _bankAccount: BankAccount | undefined;
    protected _taxId: TaxId | undefined;
    protected _dispute: Dispute | undefined;
    protected _ephemeralKey: EphemeralKey | undefined;
    protected _event: Event | undefined;
    protected _exchangeRate: ExchangeRate | undefined;
    protected _fileLink: FileLink | undefined;
    protected _file: File_ | undefined;
    protected _invoiceRenderingTemplate: InvoiceRenderingTemplate | undefined;
    protected _invoiceitem: Invoiceitem | undefined;
    protected _invoice: Invoice | undefined;
    protected _lineItem: LineItem | undefined;
    protected _mandate: Mandate | undefined;
    protected _paymentIntent: PaymentIntent | undefined;
    protected _paymentLink: PaymentLink | undefined;
    protected _paymentMethodConfiguration: PaymentMethodConfiguration | undefined;
    protected _paymentMethodDomain: PaymentMethodDomain | undefined;
    protected _paymentMethod: PaymentMethod | undefined;
    protected _payout: Payout | undefined;
    protected _plan: Plan | undefined;
    protected _price: Price | undefined;
    protected _product: Product | undefined;
    protected _productFeature: ProductFeature | undefined;
    protected _promotionCode: PromotionCode | undefined;
    protected _quote: Quote | undefined;
    protected _refund: Refund | undefined;
    protected _review: Review | undefined;
    protected _setupAttempt: SetupAttempt | undefined;
    protected _setupIntent: SetupIntent | undefined;
    protected _shippingRate: ShippingRate | undefined;
    protected _scheduledQueryRun: ScheduledQueryRun | undefined;
    protected _subscriptionItem: SubscriptionItem | undefined;
    protected _usageRecordSummary: UsageRecordSummary | undefined;
    protected _usageRecord: UsageRecord | undefined;
    protected _subscriptionSchedule: SubscriptionSchedule | undefined;
    protected _subscription: Subscription | undefined;
    protected _taxCode: TaxCode | undefined;
    protected _taxRate: TaxRate | undefined;
    protected _token: Token | undefined;
    protected _topup: Topup | undefined;
    protected _transfer: Transfer | undefined;
    protected _transferReversal: TransferReversal | undefined;
    protected _webhookEndpoint: WebhookEndpoint | undefined;
    protected _apps: Apps | undefined;
    protected _billing: Billing | undefined;
    protected _billingPortal: BillingPortal | undefined;
    protected _checkout: Checkout | undefined;
    protected _climate: Climate | undefined;
    protected _entitlements: Entitlements | undefined;
    protected _financialConnections: FinancialConnections | undefined;
    protected _forwarding: Forwarding | undefined;
    protected _identity: Identity | undefined;
    protected _issuing: Issuing | undefined;
    protected _radar: Radar | undefined;
    protected _reporting: Reporting | undefined;
    protected _tax: Tax | undefined;
    protected _terminal: Terminal | undefined;
    protected _testHelpers: TestHelpers | undefined;
    protected _treasury: Treasury | undefined;

    constructor(protected readonly _options: StripeClient.Options) {}

    public get account(): Account {
        return (this._account ??= new Account(this._options));
    }

    public get accountLink(): AccountLink {
        return (this._accountLink ??= new AccountLink(this._options));
    }

    public get accountSession(): AccountSession {
        return (this._accountSession ??= new AccountSession(this._options));
    }

    public get capability(): Capability {
        return (this._capability ??= new Capability(this._options));
    }

    public get externalAccount(): ExternalAccount {
        return (this._externalAccount ??= new ExternalAccount(this._options));
    }

    public get loginLink(): LoginLink {
        return (this._loginLink ??= new LoginLink(this._options));
    }

    public get person(): Person {
        return (this._person ??= new Person(this._options));
    }

    public get applePayDomain(): ApplePayDomain {
        return (this._applePayDomain ??= new ApplePayDomain(this._options));
    }

    public get applicationFee(): ApplicationFee {
        return (this._applicationFee ??= new ApplicationFee(this._options));
    }

    public get feeRefund(): FeeRefund {
        return (this._feeRefund ??= new FeeRefund(this._options));
    }

    public get balance(): Balance {
        return (this._balance ??= new Balance(this._options));
    }

    public get balanceTransaction(): BalanceTransaction {
        return (this._balanceTransaction ??= new BalanceTransaction(this._options));
    }

    public get charge(): Charge {
        return (this._charge ??= new Charge(this._options));
    }

    public get confirmationToken(): ConfirmationToken {
        return (this._confirmationToken ??= new ConfirmationToken(this._options));
    }

    public get countrySpec(): CountrySpec {
        return (this._countrySpec ??= new CountrySpec(this._options));
    }

    public get coupon(): Coupon {
        return (this._coupon ??= new Coupon(this._options));
    }

    public get creditNote(): CreditNote {
        return (this._creditNote ??= new CreditNote(this._options));
    }

    public get creditNoteLineItem(): CreditNoteLineItem {
        return (this._creditNoteLineItem ??= new CreditNoteLineItem(this._options));
    }

    public get customerSession(): CustomerSession {
        return (this._customerSession ??= new CustomerSession(this._options));
    }

    public get customer(): Customer {
        return (this._customer ??= new Customer(this._options));
    }

    public get customerBalanceTransaction(): CustomerBalanceTransaction {
        return (this._customerBalanceTransaction ??= new CustomerBalanceTransaction(this._options));
    }

    public get cashBalance(): CashBalance {
        return (this._cashBalance ??= new CashBalance(this._options));
    }

    public get customerCashBalanceTransaction(): CustomerCashBalanceTransaction {
        return (this._customerCashBalanceTransaction ??= new CustomerCashBalanceTransaction(this._options));
    }

    public get paymentSource(): PaymentSource {
        return (this._paymentSource ??= new PaymentSource(this._options));
    }

    public get source(): Source {
        return (this._source ??= new Source(this._options));
    }

    public get bankAccount(): BankAccount {
        return (this._bankAccount ??= new BankAccount(this._options));
    }

    public get taxId(): TaxId {
        return (this._taxId ??= new TaxId(this._options));
    }

    public get dispute(): Dispute {
        return (this._dispute ??= new Dispute(this._options));
    }

    public get ephemeralKey(): EphemeralKey {
        return (this._ephemeralKey ??= new EphemeralKey(this._options));
    }

    public get event(): Event {
        return (this._event ??= new Event(this._options));
    }

    public get exchangeRate(): ExchangeRate {
        return (this._exchangeRate ??= new ExchangeRate(this._options));
    }

    public get fileLink(): FileLink {
        return (this._fileLink ??= new FileLink(this._options));
    }

    public get file(): File_ {
        return (this._file ??= new File_(this._options));
    }

    public get invoiceRenderingTemplate(): InvoiceRenderingTemplate {
        return (this._invoiceRenderingTemplate ??= new InvoiceRenderingTemplate(this._options));
    }

    public get invoiceitem(): Invoiceitem {
        return (this._invoiceitem ??= new Invoiceitem(this._options));
    }

    public get invoice(): Invoice {
        return (this._invoice ??= new Invoice(this._options));
    }

    public get lineItem(): LineItem {
        return (this._lineItem ??= new LineItem(this._options));
    }

    public get mandate(): Mandate {
        return (this._mandate ??= new Mandate(this._options));
    }

    public get paymentIntent(): PaymentIntent {
        return (this._paymentIntent ??= new PaymentIntent(this._options));
    }

    public get paymentLink(): PaymentLink {
        return (this._paymentLink ??= new PaymentLink(this._options));
    }

    public get paymentMethodConfiguration(): PaymentMethodConfiguration {
        return (this._paymentMethodConfiguration ??= new PaymentMethodConfiguration(this._options));
    }

    public get paymentMethodDomain(): PaymentMethodDomain {
        return (this._paymentMethodDomain ??= new PaymentMethodDomain(this._options));
    }

    public get paymentMethod(): PaymentMethod {
        return (this._paymentMethod ??= new PaymentMethod(this._options));
    }

    public get payout(): Payout {
        return (this._payout ??= new Payout(this._options));
    }

    public get plan(): Plan {
        return (this._plan ??= new Plan(this._options));
    }

    public get price(): Price {
        return (this._price ??= new Price(this._options));
    }

    public get product(): Product {
        return (this._product ??= new Product(this._options));
    }

    public get productFeature(): ProductFeature {
        return (this._productFeature ??= new ProductFeature(this._options));
    }

    public get promotionCode(): PromotionCode {
        return (this._promotionCode ??= new PromotionCode(this._options));
    }

    public get quote(): Quote {
        return (this._quote ??= new Quote(this._options));
    }

    public get refund(): Refund {
        return (this._refund ??= new Refund(this._options));
    }

    public get review(): Review {
        return (this._review ??= new Review(this._options));
    }

    public get setupAttempt(): SetupAttempt {
        return (this._setupAttempt ??= new SetupAttempt(this._options));
    }

    public get setupIntent(): SetupIntent {
        return (this._setupIntent ??= new SetupIntent(this._options));
    }

    public get shippingRate(): ShippingRate {
        return (this._shippingRate ??= new ShippingRate(this._options));
    }

    public get scheduledQueryRun(): ScheduledQueryRun {
        return (this._scheduledQueryRun ??= new ScheduledQueryRun(this._options));
    }

    public get subscriptionItem(): SubscriptionItem {
        return (this._subscriptionItem ??= new SubscriptionItem(this._options));
    }

    public get usageRecordSummary(): UsageRecordSummary {
        return (this._usageRecordSummary ??= new UsageRecordSummary(this._options));
    }

    public get usageRecord(): UsageRecord {
        return (this._usageRecord ??= new UsageRecord(this._options));
    }

    public get subscriptionSchedule(): SubscriptionSchedule {
        return (this._subscriptionSchedule ??= new SubscriptionSchedule(this._options));
    }

    public get subscription(): Subscription {
        return (this._subscription ??= new Subscription(this._options));
    }

    public get taxCode(): TaxCode {
        return (this._taxCode ??= new TaxCode(this._options));
    }

    public get taxRate(): TaxRate {
        return (this._taxRate ??= new TaxRate(this._options));
    }

    public get token(): Token {
        return (this._token ??= new Token(this._options));
    }

    public get topup(): Topup {
        return (this._topup ??= new Topup(this._options));
    }

    public get transfer(): Transfer {
        return (this._transfer ??= new Transfer(this._options));
    }

    public get transferReversal(): TransferReversal {
        return (this._transferReversal ??= new TransferReversal(this._options));
    }

    public get webhookEndpoint(): WebhookEndpoint {
        return (this._webhookEndpoint ??= new WebhookEndpoint(this._options));
    }

    public get apps(): Apps {
        return (this._apps ??= new Apps(this._options));
    }

    public get billing(): Billing {
        return (this._billing ??= new Billing(this._options));
    }

    public get billingPortal(): BillingPortal {
        return (this._billingPortal ??= new BillingPortal(this._options));
    }

    public get checkout(): Checkout {
        return (this._checkout ??= new Checkout(this._options));
    }

    public get climate(): Climate {
        return (this._climate ??= new Climate(this._options));
    }

    public get entitlements(): Entitlements {
        return (this._entitlements ??= new Entitlements(this._options));
    }

    public get financialConnections(): FinancialConnections {
        return (this._financialConnections ??= new FinancialConnections(this._options));
    }

    public get forwarding(): Forwarding {
        return (this._forwarding ??= new Forwarding(this._options));
    }

    public get identity(): Identity {
        return (this._identity ??= new Identity(this._options));
    }

    public get issuing(): Issuing {
        return (this._issuing ??= new Issuing(this._options));
    }

    public get radar(): Radar {
        return (this._radar ??= new Radar(this._options));
    }

    public get reporting(): Reporting {
        return (this._reporting ??= new Reporting(this._options));
    }

    public get tax(): Tax {
        return (this._tax ??= new Tax(this._options));
    }

    public get terminal(): Terminal {
        return (this._terminal ??= new Terminal(this._options));
    }

    public get testHelpers(): TestHelpers {
        return (this._testHelpers ??= new TestHelpers(this._options));
    }

    public get treasury(): Treasury {
        return (this._treasury ??= new Treasury(this._options));
    }

    /**
     * <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
     *
     * @param {string} charge
     * @param {Stripe.GetChargesChargeRefundsRequest} request
     * @param {StripeClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getChargesChargeRefunds("charge")
     */
    public async getChargesChargeRefunds(
        charge: string,
        request: Stripe.GetChargesChargeRefundsRequest = {},
        requestOptions?: StripeClient.RequestOptions,
    ): Promise<Stripe.GetChargesChargeRefundsResponse> {
        const { ending_before: endingBefore, expand, limit, starting_after: startingAfter } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (endingBefore != null) {
            _queryParams["ending_before"] = endingBefore;
        }

        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (startingAfter != null) {
            _queryParams["starting_after"] = startingAfter;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/charges/${encodeURIComponent(charge)}/refunds`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.GetChargesChargeRefundsResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/charges/{charge}/refunds.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Retrieves the details of an existing refund.</p>
     *
     * @param {string} charge
     * @param {string} refund
     * @param {Stripe.GetChargesChargeRefundsRefundRequest} request
     * @param {StripeClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getChargesChargeRefundsRefund("charge", "refund")
     */
    public async getChargesChargeRefundsRefund(
        charge: string,
        refund: string,
        request: Stripe.GetChargesChargeRefundsRefundRequest = {},
        requestOptions?: StripeClient.RequestOptions,
    ): Promise<Stripe.Refund> {
        const { expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/charges/${encodeURIComponent(charge)}/refunds/${encodeURIComponent(refund)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Refund;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError(
                    "Timeout exceeded when calling GET /v1/charges/{charge}/refunds/{refund}.",
                );
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
