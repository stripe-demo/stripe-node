/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Stripe from "../index";

/**
 * A dispute occurs when a customer questions your charge with their card issuer.
 * When this happens, you have the opportunity to respond to the dispute with
 * evidence that shows that the charge is legitimate.
 *
 * Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
 */
export interface Dispute {
    /** Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed). */
    amount: number;
    /** List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
    balance_transactions: Stripe.BalanceTransaction[];
    /** ID of the charge that's disputed. */
    charge: Dispute.Charge;
    /** Time at which the object was created. Measured in seconds since the Unix epoch. */
    created: number;
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: string;
    /** List of eligibility types that are included in `enhanced_evidence`. */
    enhanced_eligibility_types: "visa_compelling_evidence_3"[];
    evidence: Stripe.DisputeEvidence;
    evidence_details: Stripe.DisputeEvidenceDetails;
    /** Unique identifier for the object. */
    id: string;
    /** If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute. */
    is_charge_refundable: boolean;
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: boolean;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    metadata: Record<string, string>;
    /** Network-dependent reason code for the dispute. */
    network_reason_code?: string;
    /** String representing the object's type. Objects of the same type share the same value. */
    object: "dispute";
    /** ID of the PaymentIntent that's disputed. */
    payment_intent?: Dispute.PaymentIntent;
    payment_method_details?: Stripe.DisputePaymentMethodDetails;
    /** Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
    reason: string;
    /** Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`. */
    status: Dispute.Status;
}

export namespace Dispute {
    /**
     * ID of the charge that's disputed.
     */
    export type Charge = string | Stripe.Charge;
    /**
     * ID of the PaymentIntent that's disputed.
     */
    export type PaymentIntent = string | Stripe.PaymentIntent;
    /**
     * Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.
     */
    export type Status =
        | "lost"
        | "needs_response"
        | "under_review"
        | "warning_closed"
        | "warning_needs_response"
        | "warning_under_review"
        | "won";
    export const Status = {
        Lost: "lost",
        NeedsResponse: "needs_response",
        UnderReview: "under_review",
        WarningClosed: "warning_closed",
        WarningNeedsResponse: "warning_needs_response",
        WarningUnderReview: "warning_under_review",
        Won: "won",
    } as const;
}
