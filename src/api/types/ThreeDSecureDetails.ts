/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 *
 */
export interface ThreeDSecureDetails {
    /**
     * For authenticated transactions: how the customer was authenticated by
     * the issuing bank.
     */
    authentication_flow?: ThreeDSecureDetails.AuthenticationFlow;
    /**
     * The Electronic Commerce Indicator (ECI). A protocol-level field
     * indicating what degree of authentication was performed.
     */
    electronic_commerce_indicator?: ThreeDSecureDetails.ElectronicCommerceIndicator;
    /** Indicates the outcome of 3D Secure authentication. */
    result?: ThreeDSecureDetails.Result;
    /**
     * Additional information about why 3D Secure succeeded or failed based
     * on the `result`.
     */
    result_reason?: ThreeDSecureDetails.ResultReason;
    /**
     * The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
     * (dsTransId) for this payment.
     */
    transaction_id?: string;
    /** The version of 3D Secure that was used. */
    version?: ThreeDSecureDetails.Version;
}

export namespace ThreeDSecureDetails {
    /**
     * For authenticated transactions: how the customer was authenticated by
     * the issuing bank.
     */
    export type AuthenticationFlow = "challenge" | "frictionless";
    export const AuthenticationFlow = {
        Challenge: "challenge",
        Frictionless: "frictionless",
    } as const;
    /**
     * The Electronic Commerce Indicator (ECI). A protocol-level field
     * indicating what degree of authentication was performed.
     */
    export type ElectronicCommerceIndicator = "01" | "02" | "05" | "06" | "07";
    export const ElectronicCommerceIndicator = {
        One: "01",
        Two: "02",
        Five: "05",
        Six: "06",
        Seven: "07",
    } as const;
    /**
     * Indicates the outcome of 3D Secure authentication.
     */
    export type Result =
        | "attempt_acknowledged"
        | "authenticated"
        | "exempted"
        | "failed"
        | "not_supported"
        | "processing_error";
    export const Result = {
        AttemptAcknowledged: "attempt_acknowledged",
        Authenticated: "authenticated",
        Exempted: "exempted",
        Failed: "failed",
        NotSupported: "not_supported",
        ProcessingError: "processing_error",
    } as const;
    /**
     * Additional information about why 3D Secure succeeded or failed based
     * on the `result`.
     */
    export type ResultReason =
        | "abandoned"
        | "bypassed"
        | "canceled"
        | "card_not_enrolled"
        | "network_not_supported"
        | "protocol_error"
        | "rejected";
    export const ResultReason = {
        Abandoned: "abandoned",
        Bypassed: "bypassed",
        Canceled: "canceled",
        CardNotEnrolled: "card_not_enrolled",
        NetworkNotSupported: "network_not_supported",
        ProtocolError: "protocol_error",
        Rejected: "rejected",
    } as const;
    /**
     * The version of 3D Secure that was used.
     */
    export type Version = "1.0.2" | "2.1.0" | "2.2.0";
    export const Version = {
        One02: "1.0.2",
        Two10: "2.1.0",
        Two20: "2.2.0",
    } as const;
}
