/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Stripe from "../index";

/**
 * A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
 *
 * Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
 */
export interface SubscriptionSchedule {
    /** ID of the Connect Application that created the schedule. */
    application?: SubscriptionSchedule.Application;
    /** Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. */
    canceled_at?: number;
    /** Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. */
    completed_at?: number;
    /** Time at which the object was created. Measured in seconds since the Unix epoch. */
    created: number;
    /** Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
    current_phase?: Stripe.SubscriptionScheduleCurrentPhase;
    /** ID of the customer who owns the subscription schedule. */
    customer: SubscriptionSchedule.Customer;
    default_settings: Stripe.SubscriptionSchedulesResourceDefaultSettings;
    /** Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription. */
    end_behavior: SubscriptionSchedule.EndBehavior;
    /** Unique identifier for the object. */
    id: string;
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: boolean;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    metadata?: Record<string, string | undefined>;
    /** String representing the object's type. Objects of the same type share the same value. */
    object: "subscription_schedule";
    /** Configuration for the subscription schedule's phases. */
    phases: Stripe.SubscriptionSchedulePhaseConfiguration[];
    /** Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. */
    released_at?: number;
    /** ID of the subscription once managed by the subscription schedule (if it is released). */
    released_subscription?: string;
    /** The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). */
    status: SubscriptionSchedule.Status;
    /** ID of the subscription managed by the subscription schedule. */
    subscription?: SubscriptionSchedule.Subscription;
    /** ID of the test clock this subscription schedule belongs to. */
    test_clock?: SubscriptionSchedule.TestClock;
}

export namespace SubscriptionSchedule {
    /**
     * ID of the Connect Application that created the schedule.
     */
    export type Application = string | Stripe.Application | Stripe.DeletedApplication;
    /**
     * ID of the customer who owns the subscription schedule.
     */
    export type Customer = string | Stripe.Customer | Stripe.DeletedCustomer;
    /**
     * Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
     */
    export type EndBehavior = "cancel" | "none" | "release" | "renew";
    export const EndBehavior = {
        Cancel: "cancel",
        None: "none",
        Release: "release",
        Renew: "renew",
    } as const;
    /**
     * The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
     */
    export type Status = "active" | "canceled" | "completed" | "not_started" | "released";
    export const Status = {
        Active: "active",
        Canceled: "canceled",
        Completed: "completed",
        NotStarted: "not_started",
        Released: "released",
    } as const;
    /**
     * ID of the subscription managed by the subscription schedule.
     */
    export type Subscription = string | Stripe.Subscription;
    /**
     * ID of the test clock this subscription schedule belongs to.
     */
    export type TestClock = string | Stripe.TestHelpersTestClock;
}
