/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Stripe from "../index";

/**
 *
 */
export interface TaxTransactionLineItem {
    /** The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount. */
    amount: number;
    /** The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    amount_tax: number;
    /** Unique identifier for the object. */
    id: string;
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: boolean;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    metadata?: Record<string, string | undefined>;
    /** String representing the object's type. Objects of the same type share the same value. */
    object: "tax.transaction_line_item";
    /** The ID of an existing [Product](https://stripe.com/docs/api/products/object). */
    product?: string;
    /** The number of units of the item being purchased. For reversals, this is the quantity reversed. */
    quantity: number;
    /** A custom identifier for this line item in the transaction. */
    reference: string;
    /** If `type=reversal`, contains information about what was reversed. */
    reversal?: Stripe.TaxProductResourceTaxTransactionLineItemResourceReversal;
    /** Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes. */
    tax_behavior: TaxTransactionLineItem.TaxBehavior;
    /** The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource. */
    tax_code: string;
    /** If `reversal`, this line item reverses an earlier transaction. */
    type: TaxTransactionLineItem.Type;
}

export namespace TaxTransactionLineItem {
    /**
     * Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
     */
    export type TaxBehavior = "exclusive" | "inclusive";
    export const TaxBehavior = {
        Exclusive: "exclusive",
        Inclusive: "inclusive",
    } as const;
    /**
     * If `reversal`, this line item reverses an earlier transaction.
     */
    export type Type = "reversal" | "transaction";
    export const Type = {
        Reversal: "reversal",
        Transaction: "transaction",
    } as const;
}
