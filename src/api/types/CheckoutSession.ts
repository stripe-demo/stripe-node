/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Stripe from "../index";

/**
 * A Checkout Session represents your customer's session as they pay for
 * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
 * or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
 * new Session each time your customer attempts to pay.
 *
 * Once payment is successful, the Checkout Session will contain a reference
 * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
 * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
 * [Subscription](https://stripe.com/docs/api/subscriptions).
 *
 * You can create a Checkout Session on your server and redirect to its URL
 * to begin Checkout.
 *
 * Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
 */
export interface CheckoutSession {
    /** Settings for price localization with [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing). */
    adaptive_pricing?: Stripe.PaymentPagesCheckoutSessionAdaptivePricing;
    /** When set, provides configuration for actions to take if this Checkout Session expires. */
    after_expiration?: Stripe.PaymentPagesCheckoutSessionAfterExpiration;
    /** Enables user redeemable promotion codes. */
    allow_promotion_codes?: boolean;
    /** Total of all items before discounts or taxes are applied. */
    amount_subtotal?: number;
    /** Total of all items after discounts and taxes are applied. */
    amount_total?: number;
    automatic_tax: Stripe.PaymentPagesCheckoutSessionAutomaticTax;
    /** Describes whether Checkout should collect the customer's billing address. Defaults to `auto`. */
    billing_address_collection?: CheckoutSession.BillingAddressCollection;
    /** If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website. */
    cancel_url?: string;
    /**
     * A unique string to reference the Checkout Session. This can be a
     * customer ID, a cart ID, or similar, and can be used to reconcile the
     * Session with your internal systems.
     */
    client_reference_id?: string;
    /** Client secret to be used when initializing Stripe.js embedded checkout. */
    client_secret?: string;
    /** Results of `consent_collection` for this session. */
    consent?: Stripe.PaymentPagesCheckoutSessionConsent;
    /** When set, provides configuration for the Checkout Session to gather active consent from customers. */
    consent_collection?: Stripe.PaymentPagesCheckoutSessionConsentCollection;
    /** Time at which the object was created. Measured in seconds since the Unix epoch. */
    created: number;
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency?: string;
    /** Currency conversion details for [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) sessions */
    currency_conversion?: Stripe.PaymentPagesCheckoutSessionCurrencyConversion;
    /** Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
    custom_fields: Stripe.PaymentPagesCheckoutSessionCustomFields[];
    custom_text: Stripe.PaymentPagesCheckoutSessionCustomText;
    /**
     * The ID of the customer for this Session.
     * For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout
     * will create a new customer object based on information provided
     * during the payment flow unless an existing customer was provided when
     * the Session was created.
     */
    customer?: CheckoutSession.Customer;
    /** Configure whether a Checkout Session creates a Customer when the Checkout Session completes. */
    customer_creation?: CheckoutSession.CustomerCreation;
    /** The customer details including the customer's tax exempt status and the customer's tax IDs. Customer's address details are not present on Sessions in `setup` mode. */
    customer_details?: Stripe.PaymentPagesCheckoutSessionCustomerDetails;
    /**
     * If provided, this value will be used when the Customer object is created.
     * If not provided, customers will be asked to enter their email address.
     * Use this parameter to prefill customer data if you already have an email
     * on file. To access information about the customer once the payment flow is
     * complete, use the `customer` attribute.
     */
    customer_email?: string;
    /** List of coupons and promotion codes attached to the Checkout Session. */
    discounts?: Stripe.PaymentPagesCheckoutSessionDiscount[];
    /** The timestamp at which the Checkout Session will expire. */
    expires_at: number;
    /** Unique identifier for the object. */
    id: string;
    /** ID of the invoice created by the Checkout Session, if it exists. */
    invoice?: CheckoutSession.Invoice;
    /** Details on the state of invoice creation for the Checkout Session. */
    invoice_creation?: Stripe.PaymentPagesCheckoutSessionInvoiceCreation;
    /** The line items purchased by the customer. */
    line_items?: CheckoutSession.LineItems;
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: boolean;
    /** The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. */
    locale?: CheckoutSession.Locale;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    metadata?: Record<string, string | undefined>;
    /** The mode of the Checkout Session. */
    mode: CheckoutSession.Mode;
    /** String representing the object's type. Objects of the same type share the same value. */
    object: "checkout.session";
    /** The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can't confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead. */
    payment_intent?: CheckoutSession.PaymentIntent;
    /** The ID of the Payment Link that created this Session. */
    payment_link?: CheckoutSession.PaymentLink;
    /** Configure whether a Checkout Session should collect a payment method. Defaults to `always`. */
    payment_method_collection?: CheckoutSession.PaymentMethodCollection;
    /** Information about the payment method configuration used for this Checkout session if using dynamic payment methods. */
    payment_method_configuration_details?: Stripe.PaymentMethodConfigBizPaymentMethodConfigurationDetails;
    /** Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession. */
    payment_method_options?: Stripe.CheckoutSessionPaymentMethodOptions;
    /**
     * A list of the types of payment methods (e.g. card) this Checkout
     * Session is allowed to accept.
     */
    payment_method_types: string[];
    /**
     * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
     * You can use this value to decide when to fulfill your customer's order.
     */
    payment_status: CheckoutSession.PaymentStatus;
    phone_number_collection?: Stripe.PaymentPagesCheckoutSessionPhoneNumberCollection;
    /** The ID of the original expired Checkout Session that triggered the recovery flow. */
    recovered_from?: string;
    /** This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`. */
    redirect_on_completion?: CheckoutSession.RedirectOnCompletion;
    /** Applies to Checkout Sessions with `ui_mode: embedded`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. */
    return_url?: string;
    /** Controls saved payment method settings for the session. Only available in `payment` and `subscription` mode. */
    saved_payment_method_options?: Stripe.PaymentPagesCheckoutSessionSavedPaymentMethodOptions;
    /** The ID of the SetupIntent for Checkout Sessions in `setup` mode. You can't confirm or cancel the SetupIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead. */
    setup_intent?: CheckoutSession.SetupIntent;
    /** When set, provides configuration for Checkout to collect a shipping address from a customer. */
    shipping_address_collection?: Stripe.PaymentPagesCheckoutSessionShippingAddressCollection;
    /** The details of the customer cost of shipping, including the customer chosen ShippingRate. */
    shipping_cost?: Stripe.PaymentPagesCheckoutSessionShippingCost;
    /** Shipping information for this Checkout Session. */
    shipping_details?: Stripe.Shipping;
    /** The shipping rate options applied to this Session. */
    shipping_options: Stripe.PaymentPagesCheckoutSessionShippingOption[];
    /** The status of the Checkout Session, one of `open`, `complete`, or `expired`. */
    status?: CheckoutSession.Status;
    /**
     * Describes the type of transaction being performed by Checkout in order to customize
     * relevant text on the page, such as the submit button. `submit_type` can only be
     * specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
     */
    submit_type?: CheckoutSession.SubmitType;
    /** The ID of the subscription for Checkout Sessions in `subscription` mode. */
    subscription?: CheckoutSession.Subscription;
    /**
     * The URL the customer will be directed to after the payment or
     * subscription creation is successful.
     */
    success_url?: string;
    tax_id_collection?: Stripe.PaymentPagesCheckoutSessionTaxIdCollection;
    /** Tax and discount details for the computed total amount. */
    total_details?: Stripe.PaymentPagesCheckoutSessionTotalDetails;
    /** The UI mode of the Session. Defaults to `hosted`. */
    ui_mode?: CheckoutSession.UiMode;
    /**
     * The URL to the Checkout Session. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`
     * This value is only present when the session is active.
     */
    url?: string;
}

export namespace CheckoutSession {
    /**
     * Describes whether Checkout should collect the customer's billing address. Defaults to `auto`.
     */
    export type BillingAddressCollection = "auto" | "required";
    export const BillingAddressCollection = {
        Auto: "auto",
        Required: "required",
    } as const;
    /**
     * The ID of the customer for this Session.
     * For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout
     * will create a new customer object based on information provided
     * during the payment flow unless an existing customer was provided when
     * the Session was created.
     */
    export type Customer = string | Stripe.Customer | Stripe.DeletedCustomer;
    /**
     * Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
     */
    export type CustomerCreation = "always" | "if_required";
    export const CustomerCreation = {
        Always: "always",
        IfRequired: "if_required",
    } as const;
    /**
     * ID of the invoice created by the Checkout Session, if it exists.
     */
    export type Invoice = string | Stripe.Invoice;

    /**
     * The line items purchased by the customer.
     */
    export interface LineItems {
        /** Details about each object. */
        data: Stripe.Item[];
        /** True if this list has another page of items after this one that can be fetched. */
        has_more: boolean;
        /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
        object: "list";
        /** The URL where this list can be accessed. */
        url: string;
    }

    /**
     * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
     */
    export type Locale =
        | "auto"
        | "bg"
        | "cs"
        | "da"
        | "de"
        | "el"
        | "en"
        | "en-GB"
        | "es"
        | "es-419"
        | "et"
        | "fi"
        | "fil"
        | "fr"
        | "fr-CA"
        | "hr"
        | "hu"
        | "id"
        | "it"
        | "ja"
        | "ko"
        | "lt"
        | "lv"
        | "ms"
        | "mt"
        | "nb"
        | "nl"
        | "pl"
        | "pt"
        | "pt-BR"
        | "ro"
        | "ru"
        | "sk"
        | "sl"
        | "sv"
        | "th"
        | "tr"
        | "vi"
        | "zh"
        | "zh-HK"
        | "zh-TW";
    export const Locale = {
        Auto: "auto",
        Bg: "bg",
        Cs: "cs",
        Da: "da",
        De: "de",
        El: "el",
        En: "en",
        EnGb: "en-GB",
        Es: "es",
        Es419: "es-419",
        Et: "et",
        Fi: "fi",
        Fil: "fil",
        Fr: "fr",
        FrCa: "fr-CA",
        Hr: "hr",
        Hu: "hu",
        Id: "id",
        It: "it",
        Ja: "ja",
        Ko: "ko",
        Lt: "lt",
        Lv: "lv",
        Ms: "ms",
        Mt: "mt",
        Nb: "nb",
        Nl: "nl",
        Pl: "pl",
        Pt: "pt",
        PtBr: "pt-BR",
        Ro: "ro",
        Ru: "ru",
        Sk: "sk",
        Sl: "sl",
        Sv: "sv",
        Th: "th",
        Tr: "tr",
        Vi: "vi",
        Zh: "zh",
        ZhHk: "zh-HK",
        ZhTw: "zh-TW",
    } as const;
    /**
     * The mode of the Checkout Session.
     */
    export type Mode = "payment" | "setup" | "subscription";
    export const Mode = {
        Payment: "payment",
        Setup: "setup",
        Subscription: "subscription",
    } as const;
    /**
     * The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can't confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
     */
    export type PaymentIntent = string | Stripe.PaymentIntent;
    /**
     * The ID of the Payment Link that created this Session.
     */
    export type PaymentLink = string | Stripe.PaymentLink;
    /**
     * Configure whether a Checkout Session should collect a payment method. Defaults to `always`.
     */
    export type PaymentMethodCollection = "always" | "if_required";
    export const PaymentMethodCollection = {
        Always: "always",
        IfRequired: "if_required",
    } as const;
    /**
     * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
     * You can use this value to decide when to fulfill your customer's order.
     */
    export type PaymentStatus = "no_payment_required" | "paid" | "unpaid";
    export const PaymentStatus = {
        NoPaymentRequired: "no_payment_required",
        Paid: "paid",
        Unpaid: "unpaid",
    } as const;
    /**
     * This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.
     */
    export type RedirectOnCompletion = "always" | "if_required" | "never";
    export const RedirectOnCompletion = {
        Always: "always",
        IfRequired: "if_required",
        Never: "never",
    } as const;
    /**
     * The ID of the SetupIntent for Checkout Sessions in `setup` mode. You can't confirm or cancel the SetupIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
     */
    export type SetupIntent = string | Stripe.SetupIntent;
    /**
     * The status of the Checkout Session, one of `open`, `complete`, or `expired`.
     */
    export type Status = "complete" | "expired" | "open";
    export const Status = {
        Complete: "complete",
        Expired: "expired",
        Open: "open",
    } as const;
    /**
     * Describes the type of transaction being performed by Checkout in order to customize
     * relevant text on the page, such as the submit button. `submit_type` can only be
     * specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
     */
    export type SubmitType = "auto" | "book" | "donate" | "pay" | "subscribe";
    export const SubmitType = {
        Auto: "auto",
        Book: "book",
        Donate: "donate",
        Pay: "pay",
        Subscribe: "subscribe",
    } as const;
    /**
     * The ID of the subscription for Checkout Sessions in `subscription` mode.
     */
    export type Subscription = string | Stripe.Subscription;
    /**
     * The UI mode of the Session. Defaults to `hosted`.
     */
    export type UiMode = "embedded" | "hosted";
    export const UiMode = {
        Embedded: "embedded",
        Hosted: "hosted",
    } as const;
}
