/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Stripe from "../index";

/**
 * A Mandate is a record of the permission that your customer gives you to debit their payment method.
 */
export interface Mandate {
    customer_acceptance: Stripe.CustomerAcceptance;
    /** Unique identifier for the object. */
    id: string;
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: boolean;
    multi_use?: Stripe.MandateMultiUse;
    /** String representing the object's type. Objects of the same type share the same value. */
    object: "mandate";
    /** The account (if any) that the mandate is intended for. */
    on_behalf_of?: string;
    /** ID of the payment method associated with this mandate. */
    payment_method: Mandate.PaymentMethod;
    payment_method_details: Stripe.MandatePaymentMethodDetails;
    single_use?: Stripe.MandateSingleUse;
    /** The mandate status indicates whether or not you can use it to initiate a payment. */
    status: Mandate.Status;
    /** The type of the mandate. */
    type: Mandate.Type;
}

export namespace Mandate {
    /**
     * ID of the payment method associated with this mandate.
     */
    export type PaymentMethod = string | Stripe.PaymentMethod;
    /**
     * The mandate status indicates whether or not you can use it to initiate a payment.
     */
    export type Status = "active" | "inactive" | "pending";
    export const Status = {
        Active: "active",
        Inactive: "inactive",
        Pending: "pending",
    } as const;
    /**
     * The type of the mandate.
     */
    export type Type = "multi_use" | "single_use";
    export const Type = {
        MultiUse: "multi_use",
        SingleUse: "single_use",
    } as const;
}
