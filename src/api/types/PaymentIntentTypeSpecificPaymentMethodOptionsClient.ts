/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Stripe from "../index";

/**
 *
 */
export interface PaymentIntentTypeSpecificPaymentMethodOptionsClient {
    /** Controls when the funds will be captured from the customer's account. */
    capture_method?: PaymentIntentTypeSpecificPaymentMethodOptionsClient.CaptureMethod;
    installments?: Stripe.PaymentFlowsInstallmentOptions;
    /** Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support. */
    request_incremental_authorization_support?: boolean;
    /** When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter). */
    require_cvc_recollection?: boolean;
    routing?: Stripe.PaymentMethodOptionsCardPresentRouting;
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage?: PaymentIntentTypeSpecificPaymentMethodOptionsClient.SetupFutureUsage;
    /** Bank account verification method. */
    verification_method?: PaymentIntentTypeSpecificPaymentMethodOptionsClient.VerificationMethod;
}

export namespace PaymentIntentTypeSpecificPaymentMethodOptionsClient {
    /**
     * Controls when the funds will be captured from the customer's account.
     */
    export type CaptureMethod = "manual" | "manual_preferred";
    export const CaptureMethod = {
        Manual: "manual",
        ManualPreferred: "manual_preferred",
    } as const;
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    export type SetupFutureUsage = "none" | "off_session" | "on_session";
    export const SetupFutureUsage = {
        None: "none",
        OffSession: "off_session",
        OnSession: "on_session",
    } as const;
    /**
     * Bank account verification method.
     */
    export type VerificationMethod = "automatic" | "instant" | "microdeposits";
    export const VerificationMethod = {
        Automatic: "automatic",
        Instant: "instant",
        Microdeposits: "microdeposits",
    } as const;
}
