/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Stripe from "../index";

/**
 *
 */
export interface PaymentIntentPaymentMethodOptionsCard {
    /** Controls when the funds will be captured from the customer's account. */
    capture_method?: "manual";
    /**
     * Installment details for this payment (Mexico only).
     *
     * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
     */
    installments?: Stripe.PaymentMethodOptionsCardInstallments;
    /** Configuration options for setting up an eMandate for cards issued in India. */
    mandate_options?: Stripe.PaymentMethodOptionsCardMandateOptions;
    /** Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time. */
    network?: PaymentIntentPaymentMethodOptionsCard.Network;
    /** Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent. */
    request_extended_authorization?: PaymentIntentPaymentMethodOptionsCard.RequestExtendedAuthorization;
    /** Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent. */
    request_incremental_authorization?: PaymentIntentPaymentMethodOptionsCard.RequestIncrementalAuthorization;
    /** Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent. */
    request_multicapture?: PaymentIntentPaymentMethodOptionsCard.RequestMulticapture;
    /** Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent. */
    request_overcapture?: PaymentIntentPaymentMethodOptionsCard.RequestOvercapture;
    /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
    request_three_d_secure?: PaymentIntentPaymentMethodOptionsCard.RequestThreeDSecure;
    /** When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter). */
    require_cvc_recollection?: boolean;
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage?: PaymentIntentPaymentMethodOptionsCard.SetupFutureUsage;
    /** Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters. */
    statement_descriptor_suffix_kana?: string;
    /** Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters. */
    statement_descriptor_suffix_kanji?: string;
}

export namespace PaymentIntentPaymentMethodOptionsCard {
    /**
     * Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
     */
    export type Network =
        | "amex"
        | "cartes_bancaires"
        | "diners"
        | "discover"
        | "eftpos_au"
        | "girocard"
        | "interac"
        | "jcb"
        | "link"
        | "mastercard"
        | "unionpay"
        | "unknown"
        | "visa";
    export const Network = {
        Amex: "amex",
        CartesBancaires: "cartes_bancaires",
        Diners: "diners",
        Discover: "discover",
        EftposAu: "eftpos_au",
        Girocard: "girocard",
        Interac: "interac",
        Jcb: "jcb",
        Link: "link",
        Mastercard: "mastercard",
        Unionpay: "unionpay",
        Unknown: "unknown",
        Visa: "visa",
    } as const;
    /**
     * Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent.
     */
    export type RequestExtendedAuthorization = "if_available" | "never";
    export const RequestExtendedAuthorization = {
        IfAvailable: "if_available",
        Never: "never",
    } as const;
    /**
     * Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent.
     */
    export type RequestIncrementalAuthorization = "if_available" | "never";
    export const RequestIncrementalAuthorization = {
        IfAvailable: "if_available",
        Never: "never",
    } as const;
    /**
     * Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent.
     */
    export type RequestMulticapture = "if_available" | "never";
    export const RequestMulticapture = {
        IfAvailable: "if_available",
        Never: "never",
    } as const;
    /**
     * Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent.
     */
    export type RequestOvercapture = "if_available" | "never";
    export const RequestOvercapture = {
        IfAvailable: "if_available",
        Never: "never",
    } as const;
    /**
     * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
     */
    export type RequestThreeDSecure = "any" | "automatic" | "challenge";
    export const RequestThreeDSecure = {
        Any: "any",
        Automatic: "automatic",
        Challenge: "challenge",
    } as const;
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    export type SetupFutureUsage = "none" | "off_session" | "on_session";
    export const SetupFutureUsage = {
        None: "none",
        OffSession: "off_session",
        OnSession: "on_session",
    } as const;
}
