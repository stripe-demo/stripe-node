/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Stripe from "../index";

/**
 * Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
 * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
 * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
 * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
 *
 * Related guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)
 */
export interface CustomerBalanceTransaction {
    /** The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. */
    amount: number;
    /** Time at which the object was created. Measured in seconds since the Unix epoch. */
    created: number;
    /** The ID of the credit note (if any) related to the transaction. */
    credit_note?: CustomerBalanceTransaction.CreditNote;
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: string;
    /** The ID of the customer the transaction belongs to. */
    customer: CustomerBalanceTransaction.Customer;
    /** An arbitrary string attached to the object. Often useful for displaying to users. */
    description?: string;
    /** The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. */
    ending_balance: number;
    /** Unique identifier for the object. */
    id: string;
    /** The ID of the invoice (if any) related to the transaction. */
    invoice?: CustomerBalanceTransaction.Invoice;
    /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    livemode: boolean;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    metadata?: Record<string, string | undefined>;
    /** String representing the object's type. Objects of the same type share the same value. */
    object: "customer_balance_transaction";
    /** Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types. */
    type: CustomerBalanceTransaction.Type;
}

export namespace CustomerBalanceTransaction {
    /**
     * The ID of the credit note (if any) related to the transaction.
     */
    export type CreditNote = string | Stripe.CreditNote;
    /**
     * The ID of the customer the transaction belongs to.
     */
    export type Customer = string | Stripe.Customer;
    /**
     * The ID of the invoice (if any) related to the transaction.
     */
    export type Invoice = string | Stripe.Invoice;
    /**
     * Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
     */
    export type Type =
        | "adjustment"
        | "applied_to_invoice"
        | "credit_note"
        | "initial"
        | "invoice_overpaid"
        | "invoice_too_large"
        | "invoice_too_small"
        | "migration"
        | "unapplied_from_invoice"
        | "unspent_receiver_credit";
    export const Type = {
        Adjustment: "adjustment",
        AppliedToInvoice: "applied_to_invoice",
        CreditNote: "credit_note",
        Initial: "initial",
        InvoiceOverpaid: "invoice_overpaid",
        InvoiceTooLarge: "invoice_too_large",
        InvoiceTooSmall: "invoice_too_small",
        Migration: "migration",
        UnappliedFromInvoice: "unapplied_from_invoice",
        UnspentReceiverCredit: "unspent_receiver_credit",
    } as const;
}
