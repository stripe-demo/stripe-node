/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Stripe from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import { toJson } from "../../../../core/json";

export declare namespace CreditNote {
    export interface Options {
        environment?: core.Supplier<environments.StripeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        username: core.Supplier<string>;
        password: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class CreditNote {
    constructor(protected readonly _options: CreditNote.Options) {}

    /**
     * <p>Returns a list of credit notes.</p>
     *
     * @param {Stripe.CreditNoteListRequest} request
     * @param {CreditNote.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.creditNote.list()
     */
    public async list(
        request: Stripe.CreditNoteListRequest = {},
        requestOptions?: CreditNote.RequestOptions,
    ): Promise<Stripe.CreditNoteListResponse> {
        const {
            customer,
            ending_before: endingBefore,
            expand,
            invoice,
            limit,
            starting_after: startingAfter,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (customer != null) {
            _queryParams["customer"] = customer;
        }

        if (endingBefore != null) {
            _queryParams["ending_before"] = endingBefore;
        }

        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        if (invoice != null) {
            _queryParams["invoice"] = invoice;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (startingAfter != null) {
            _queryParams["starting_after"] = startingAfter;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/credit_notes",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "stripe",
                "X-Fern-SDK-Version": "0.0.1-alpha0",
                "User-Agent": "stripe/0.0.1-alpha0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.CreditNoteListResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/credit_notes.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
     * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
     * in any combination of the following:</p>
     *
     * <ul>
     * <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
     * <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
     * <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
     * </ul>
     *
     * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
     *
     * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
     * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
     *
     * @param {Stripe.CreditNoteCreateRequest} request
     * @param {CreditNote.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.creditNote.create({
     *         invoice: "invoice"
     *     })
     */
    public async create(
        request: Stripe.CreditNoteCreateRequest,
        requestOptions?: CreditNote.RequestOptions,
    ): Promise<Stripe.CreditNote> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/credit_notes",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "stripe",
                "X-Fern-SDK-Version": "0.0.1-alpha0",
                "User-Agent": "stripe/0.0.1-alpha0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.CreditNote;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/credit_notes.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Get a preview of a credit note without creating it.</p>
     *
     * @param {Stripe.CreditNotePreviewRequest} request
     * @param {CreditNote.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.creditNote.preview({
     *         invoice: "invoice"
     *     })
     */
    public async preview(
        request: Stripe.CreditNotePreviewRequest,
        requestOptions?: CreditNote.RequestOptions,
    ): Promise<Stripe.CreditNote> {
        const {
            amount,
            credit_amount: creditAmount,
            effective_at: effectiveAt,
            email_type: emailType,
            expand,
            invoice,
            lines,
            memo,
            metadata,
            out_of_band_amount: outOfBandAmount,
            reason,
            refund,
            refund_amount: refundAmount,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (amount != null) {
            _queryParams["amount"] = amount.toString();
        }

        if (creditAmount != null) {
            _queryParams["credit_amount"] = creditAmount.toString();
        }

        if (effectiveAt != null) {
            _queryParams["effective_at"] = effectiveAt.toString();
        }

        if (emailType != null) {
            _queryParams["email_type"] = emailType;
        }

        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        _queryParams["invoice"] = invoice;
        if (lines != null) {
            if (Array.isArray(lines)) {
                _queryParams["lines"] = lines.map((item) => item);
            } else {
                _queryParams["lines"] = lines;
            }
        }

        if (memo != null) {
            _queryParams["memo"] = memo;
        }

        if (metadata != null) {
            _queryParams["metadata"] = toJson(metadata);
        }

        if (outOfBandAmount != null) {
            _queryParams["out_of_band_amount"] = outOfBandAmount.toString();
        }

        if (reason != null) {
            _queryParams["reason"] = reason;
        }

        if (refund != null) {
            _queryParams["refund"] = refund;
        }

        if (refundAmount != null) {
            _queryParams["refund_amount"] = refundAmount.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/credit_notes/preview",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "stripe",
                "X-Fern-SDK-Version": "0.0.1-alpha0",
                "User-Agent": "stripe/0.0.1-alpha0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.CreditNote;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/credit_notes/preview.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
     *
     * @param {Stripe.CreditNotePreviewLinesRequest} request
     * @param {CreditNote.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.creditNote.previewLines({
     *         invoice: "invoice"
     *     })
     */
    public async previewLines(
        request: Stripe.CreditNotePreviewLinesRequest,
        requestOptions?: CreditNote.RequestOptions,
    ): Promise<Stripe.CreditNotePreviewLinesResponse> {
        const {
            amount,
            credit_amount: creditAmount,
            effective_at: effectiveAt,
            email_type: emailType,
            ending_before: endingBefore,
            expand,
            invoice,
            limit,
            lines,
            memo,
            metadata,
            out_of_band_amount: outOfBandAmount,
            reason,
            refund,
            refund_amount: refundAmount,
            starting_after: startingAfter,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (amount != null) {
            _queryParams["amount"] = amount.toString();
        }

        if (creditAmount != null) {
            _queryParams["credit_amount"] = creditAmount.toString();
        }

        if (effectiveAt != null) {
            _queryParams["effective_at"] = effectiveAt.toString();
        }

        if (emailType != null) {
            _queryParams["email_type"] = emailType;
        }

        if (endingBefore != null) {
            _queryParams["ending_before"] = endingBefore;
        }

        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        _queryParams["invoice"] = invoice;
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (lines != null) {
            if (Array.isArray(lines)) {
                _queryParams["lines"] = lines.map((item) => item);
            } else {
                _queryParams["lines"] = lines;
            }
        }

        if (memo != null) {
            _queryParams["memo"] = memo;
        }

        if (metadata != null) {
            _queryParams["metadata"] = toJson(metadata);
        }

        if (outOfBandAmount != null) {
            _queryParams["out_of_band_amount"] = outOfBandAmount.toString();
        }

        if (reason != null) {
            _queryParams["reason"] = reason;
        }

        if (refund != null) {
            _queryParams["refund"] = refund;
        }

        if (refundAmount != null) {
            _queryParams["refund_amount"] = refundAmount.toString();
        }

        if (startingAfter != null) {
            _queryParams["starting_after"] = startingAfter;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/credit_notes/preview/lines",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "stripe",
                "X-Fern-SDK-Version": "0.0.1-alpha0",
                "User-Agent": "stripe/0.0.1-alpha0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.CreditNotePreviewLinesResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError(
                    "Timeout exceeded when calling GET /v1/credit_notes/preview/lines.",
                );
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Retrieves the credit note object with the given identifier.</p>
     *
     * @param {string} id
     * @param {Stripe.CreditNoteRetrieveRequest} request
     * @param {CreditNote.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.creditNote.retrieve("id")
     */
    public async retrieve(
        id: string,
        request: Stripe.CreditNoteRetrieveRequest = {},
        requestOptions?: CreditNote.RequestOptions,
    ): Promise<Stripe.CreditNote> {
        const { expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/credit_notes/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "stripe",
                "X-Fern-SDK-Version": "0.0.1-alpha0",
                "User-Agent": "stripe/0.0.1-alpha0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.CreditNote;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/credit_notes/{id}.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Updates an existing credit note.</p>
     *
     * @param {string} id
     * @param {Stripe.CreditNoteUpdateRequest} request
     * @param {CreditNote.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.creditNote.update("id")
     */
    public async update(
        id: string,
        request: Stripe.CreditNoteUpdateRequest = {},
        requestOptions?: CreditNote.RequestOptions,
    ): Promise<Stripe.CreditNote> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/credit_notes/${encodeURIComponent(id)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "stripe",
                "X-Fern-SDK-Version": "0.0.1-alpha0",
                "User-Agent": "stripe/0.0.1-alpha0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.CreditNote;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/credit_notes/{id}.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
     *
     * @param {string} id
     * @param {Stripe.CreditNoteVoidCreditNoteRequest} request
     * @param {CreditNote.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.creditNote.voidCreditNote("id")
     */
    public async voidCreditNote(
        id: string,
        request: Stripe.CreditNoteVoidCreditNoteRequest = {},
        requestOptions?: CreditNote.RequestOptions,
    ): Promise<Stripe.CreditNote> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/credit_notes/${encodeURIComponent(id)}/void`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "stripe",
                "X-Fern-SDK-Version": "0.0.1-alpha0",
                "User-Agent": "stripe/0.0.1-alpha0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.CreditNote;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/credit_notes/{id}/void.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        return core.BasicAuth.toAuthorizationHeader({
            username: await core.Supplier.get(this._options.username),
            password: await core.Supplier.get(this._options.password),
        });
    }
}
