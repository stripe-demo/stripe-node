/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         active_from: "now",
 *         country: "country",
 *         country_options: {}
 *     }
 */
export interface RegistrationCreateRequest {
    /** Time at which the Tax Registration becomes active. It can be either `now` to indicate the current time, or a future timestamp measured in seconds since the Unix epoch. */
    active_from: RegistrationCreateRequest.ActiveFrom;
    /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    country: string;
    /** Specific options for a registration in the specified `country`. */
    country_options: RegistrationCreateRequest.CountryOptions;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch. */
    expires_at?: number;
}

export namespace RegistrationCreateRequest {
    /**
     * Time at which the Tax Registration becomes active. It can be either `now` to indicate the current time, or a future timestamp measured in seconds since the Unix epoch.
     */
    export type ActiveFrom = "now" | number;

    /**
     * Specific options for a registration in the specified `country`.
     */
    export interface CountryOptions {
        /** Options for the registration in AE. */
        ae?: CountryOptions.Ae;
        /** Options for the registration in AL. */
        al?: CountryOptions.Al;
        /** Options for the registration in AM. */
        am?: CountryOptions.Am;
        /** Options for the registration in AO. */
        ao?: CountryOptions.Ao;
        /** Options for the registration in AT. */
        at?: CountryOptions.At;
        /** Options for the registration in AU. */
        au?: CountryOptions.Au;
        /** Options for the registration in BA. */
        ba?: CountryOptions.Ba;
        /** Options for the registration in BB. */
        bb?: CountryOptions.Bb;
        /** Options for the registration in BE. */
        be?: CountryOptions.Be;
        /** Options for the registration in BG. */
        bg?: CountryOptions.Bg;
        /** Options for the registration in BH. */
        bh?: CountryOptions.Bh;
        /** Options for the registration in BS. */
        bs?: CountryOptions.Bs;
        /** Options for the registration in BY. */
        by?: CountryOptions.By;
        /** Options for the registration in CA. */
        ca?: CountryOptions.Ca;
        /** Options for the registration in CD. */
        cd?: CountryOptions.Cd;
        /** Options for the registration in CH. */
        ch?: CountryOptions.Ch;
        /** Options for the registration in CL. */
        cl?: CountryOptions.Cl;
        /** Options for the registration in CO. */
        co?: CountryOptions.Co;
        /** Options for the registration in CR. */
        cr?: CountryOptions.Cr;
        /** Options for the registration in CY. */
        cy?: CountryOptions.Cy;
        /** Options for the registration in CZ. */
        cz?: CountryOptions.Cz;
        /** Options for the registration in DE. */
        de?: CountryOptions.De;
        /** Options for the registration in DK. */
        dk?: CountryOptions.Dk;
        /** Options for the registration in EC. */
        ec?: CountryOptions.Ec;
        /** Options for the registration in EE. */
        ee?: CountryOptions.Ee;
        /** Options for the registration in EG. */
        eg?: CountryOptions.Eg;
        /** Options for the registration in ES. */
        es?: CountryOptions.Es;
        /** Options for the registration in FI. */
        fi?: CountryOptions.Fi;
        /** Options for the registration in FR. */
        fr?: CountryOptions.Fr;
        /** Options for the registration in GB. */
        gb?: CountryOptions.Gb;
        /** Options for the registration in GE. */
        ge?: CountryOptions.Ge;
        /** Options for the registration in GN. */
        gn?: CountryOptions.Gn;
        /** Options for the registration in GR. */
        gr?: CountryOptions.Gr;
        /** Options for the registration in HR. */
        hr?: CountryOptions.Hr;
        /** Options for the registration in HU. */
        hu?: CountryOptions.Hu;
        /** Options for the registration in ID. */
        id?: CountryOptions.Id;
        /** Options for the registration in IE. */
        ie?: CountryOptions.Ie;
        /** Options for the registration in IS. */
        is?: CountryOptions.Is;
        /** Options for the registration in IT. */
        it?: CountryOptions.It;
        /** Options for the registration in JP. */
        jp?: CountryOptions.Jp;
        /** Options for the registration in KE. */
        ke?: CountryOptions.Ke;
        /** Options for the registration in KH. */
        kh?: CountryOptions.Kh;
        /** Options for the registration in KR. */
        kr?: CountryOptions.Kr;
        /** Options for the registration in KZ. */
        kz?: CountryOptions.Kz;
        /** Options for the registration in LT. */
        lt?: CountryOptions.Lt;
        /** Options for the registration in LU. */
        lu?: CountryOptions.Lu;
        /** Options for the registration in LV. */
        lv?: CountryOptions.Lv;
        /** Options for the registration in MA. */
        ma?: CountryOptions.Ma;
        /** Options for the registration in MD. */
        md?: CountryOptions.Md;
        /** Options for the registration in ME. */
        me?: CountryOptions.Me;
        /** Options for the registration in MK. */
        mk?: CountryOptions.Mk;
        /** Options for the registration in MR. */
        mr?: CountryOptions.Mr;
        /** Options for the registration in MT. */
        mt?: CountryOptions.Mt;
        /** Options for the registration in MX. */
        mx?: CountryOptions.Mx;
        /** Options for the registration in MY. */
        my?: CountryOptions.My;
        /** Options for the registration in NG. */
        ng?: CountryOptions.Ng;
        /** Options for the registration in NL. */
        nl?: CountryOptions.Nl;
        /** Options for the registration in NO. */
        no?: CountryOptions.No;
        /** Options for the registration in NP. */
        np?: CountryOptions.Np;
        /** Options for the registration in NZ. */
        nz?: CountryOptions.Nz;
        /** Options for the registration in OM. */
        om?: CountryOptions.Om;
        /** Options for the registration in PE. */
        pe?: CountryOptions.Pe;
        /** Options for the registration in PL. */
        pl?: CountryOptions.Pl;
        /** Options for the registration in PT. */
        pt?: CountryOptions.Pt;
        /** Options for the registration in RO. */
        ro?: CountryOptions.Ro;
        /** Options for the registration in RS. */
        rs?: CountryOptions.Rs;
        /** Options for the registration in RU. */
        ru?: CountryOptions.Ru;
        /** Options for the registration in SA. */
        sa?: CountryOptions.Sa;
        /** Options for the registration in SE. */
        se?: CountryOptions.Se;
        /** Options for the registration in SG. */
        sg?: CountryOptions.Sg;
        /** Options for the registration in SI. */
        si?: CountryOptions.Si;
        /** Options for the registration in SK. */
        sk?: CountryOptions.Sk;
        /** Options for the registration in SN. */
        sn?: CountryOptions.Sn;
        /** Options for the registration in SR. */
        sr?: CountryOptions.Sr;
        /** Options for the registration in TH. */
        th?: CountryOptions.Th;
        /** Options for the registration in TJ. */
        tj?: CountryOptions.Tj;
        /** Options for the registration in TR. */
        tr?: CountryOptions.Tr;
        /** Options for the registration in TZ. */
        tz?: CountryOptions.Tz;
        /** Options for the registration in UG. */
        ug?: CountryOptions.Ug;
        /** Options for the registration in US. */
        us?: CountryOptions.Us;
        /** Options for the registration in UY. */
        uy?: CountryOptions.Uy;
        /** Options for the registration in UZ. */
        uz?: CountryOptions.Uz;
        /** Options for the registration in VN. */
        vn?: CountryOptions.Vn;
        /** Options for the registration in ZA. */
        za?: CountryOptions.Za;
        /** Options for the registration in ZM. */
        zm?: CountryOptions.Zm;
        /** Options for the registration in ZW. */
        zw?: CountryOptions.Zw;
    }

    export namespace CountryOptions {
        /**
         * Options for the registration in AE.
         */
        export interface Ae {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in AL.
         */
        export interface Al {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in AM.
         */
        export interface Am {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in AO.
         */
        export interface Ao {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in AT.
         */
        export interface At {
            /** Options for the standard registration. */
            standard?: At.Standard;
            /** Type of registration to be created in an EU country. */
            type: At.Type;
        }

        export namespace At {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in AU.
         */
        export interface Au {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in BA.
         */
        export interface Ba {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in BB.
         */
        export interface Bb {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in BE.
         */
        export interface Be {
            /** Options for the standard registration. */
            standard?: Be.Standard;
            /** Type of registration to be created in an EU country. */
            type: Be.Type;
        }

        export namespace Be {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in BG.
         */
        export interface Bg {
            /** Options for the standard registration. */
            standard?: Bg.Standard;
            /** Type of registration to be created in an EU country. */
            type: Bg.Type;
        }

        export namespace Bg {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in BH.
         */
        export interface Bh {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in BS.
         */
        export interface Bs {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in BY.
         */
        export interface By {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in CA.
         */
        export interface Ca {
            /** Options for the provincial tax registration. */
            province_standard?: Ca.ProvinceStandard;
            /** Type of registration to be created in Canada. */
            type: Ca.Type;
        }

        export namespace Ca {
            /**
             * Options for the provincial tax registration.
             */
            export interface ProvinceStandard {
                /** Two-letter CA province code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)). */
                province: string;
            }

            /**
             * Type of registration to be created in Canada.
             */
            export type Type = "province_standard" | "simplified" | "standard";
            export const Type = {
                ProvinceStandard: "province_standard",
                Simplified: "simplified",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in CD.
         */
        export interface Cd {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in CH.
         */
        export interface Ch {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in CL.
         */
        export interface Cl {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in CO.
         */
        export interface Co {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in CR.
         */
        export interface Cr {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in CY.
         */
        export interface Cy {
            /** Options for the standard registration. */
            standard?: Cy.Standard;
            /** Type of registration to be created in an EU country. */
            type: Cy.Type;
        }

        export namespace Cy {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in CZ.
         */
        export interface Cz {
            /** Options for the standard registration. */
            standard?: Cz.Standard;
            /** Type of registration to be created in an EU country. */
            type: Cz.Type;
        }

        export namespace Cz {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in DE.
         */
        export interface De {
            /** Options for the standard registration. */
            standard?: De.Standard;
            /** Type of registration to be created in an EU country. */
            type: De.Type;
        }

        export namespace De {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in DK.
         */
        export interface Dk {
            /** Options for the standard registration. */
            standard?: Dk.Standard;
            /** Type of registration to be created in an EU country. */
            type: Dk.Type;
        }

        export namespace Dk {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in EC.
         */
        export interface Ec {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in EE.
         */
        export interface Ee {
            /** Options for the standard registration. */
            standard?: Ee.Standard;
            /** Type of registration to be created in an EU country. */
            type: Ee.Type;
        }

        export namespace Ee {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in EG.
         */
        export interface Eg {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in ES.
         */
        export interface Es {
            /** Options for the standard registration. */
            standard?: Es.Standard;
            /** Type of registration to be created in an EU country. */
            type: Es.Type;
        }

        export namespace Es {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in FI.
         */
        export interface Fi {
            /** Options for the standard registration. */
            standard?: Fi.Standard;
            /** Type of registration to be created in an EU country. */
            type: Fi.Type;
        }

        export namespace Fi {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in FR.
         */
        export interface Fr {
            /** Options for the standard registration. */
            standard?: Fr.Standard;
            /** Type of registration to be created in an EU country. */
            type: Fr.Type;
        }

        export namespace Fr {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in GB.
         */
        export interface Gb {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in GE.
         */
        export interface Ge {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in GN.
         */
        export interface Gn {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in GR.
         */
        export interface Gr {
            /** Options for the standard registration. */
            standard?: Gr.Standard;
            /** Type of registration to be created in an EU country. */
            type: Gr.Type;
        }

        export namespace Gr {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in HR.
         */
        export interface Hr {
            /** Options for the standard registration. */
            standard?: Hr.Standard;
            /** Type of registration to be created in an EU country. */
            type: Hr.Type;
        }

        export namespace Hr {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in HU.
         */
        export interface Hu {
            /** Options for the standard registration. */
            standard?: Hu.Standard;
            /** Type of registration to be created in an EU country. */
            type: Hu.Type;
        }

        export namespace Hu {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in ID.
         */
        export interface Id {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in IE.
         */
        export interface Ie {
            /** Options for the standard registration. */
            standard?: Ie.Standard;
            /** Type of registration to be created in an EU country. */
            type: Ie.Type;
        }

        export namespace Ie {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in IS.
         */
        export interface Is {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in IT.
         */
        export interface It {
            /** Options for the standard registration. */
            standard?: It.Standard;
            /** Type of registration to be created in an EU country. */
            type: It.Type;
        }

        export namespace It {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in JP.
         */
        export interface Jp {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in KE.
         */
        export interface Ke {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in KH.
         */
        export interface Kh {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in KR.
         */
        export interface Kr {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in KZ.
         */
        export interface Kz {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in LT.
         */
        export interface Lt {
            /** Options for the standard registration. */
            standard?: Lt.Standard;
            /** Type of registration to be created in an EU country. */
            type: Lt.Type;
        }

        export namespace Lt {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in LU.
         */
        export interface Lu {
            /** Options for the standard registration. */
            standard?: Lu.Standard;
            /** Type of registration to be created in an EU country. */
            type: Lu.Type;
        }

        export namespace Lu {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in LV.
         */
        export interface Lv {
            /** Options for the standard registration. */
            standard?: Lv.Standard;
            /** Type of registration to be created in an EU country. */
            type: Lv.Type;
        }

        export namespace Lv {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in MA.
         */
        export interface Ma {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in MD.
         */
        export interface Md {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in ME.
         */
        export interface Me {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in MK.
         */
        export interface Mk {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in MR.
         */
        export interface Mr {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in MT.
         */
        export interface Mt {
            /** Options for the standard registration. */
            standard?: Mt.Standard;
            /** Type of registration to be created in an EU country. */
            type: Mt.Type;
        }

        export namespace Mt {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in MX.
         */
        export interface Mx {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in MY.
         */
        export interface My {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in NG.
         */
        export interface Ng {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in NL.
         */
        export interface Nl {
            /** Options for the standard registration. */
            standard?: Nl.Standard;
            /** Type of registration to be created in an EU country. */
            type: Nl.Type;
        }

        export namespace Nl {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in NO.
         */
        export interface No {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in NP.
         */
        export interface Np {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in NZ.
         */
        export interface Nz {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in OM.
         */
        export interface Om {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in PE.
         */
        export interface Pe {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in PL.
         */
        export interface Pl {
            /** Options for the standard registration. */
            standard?: Pl.Standard;
            /** Type of registration to be created in an EU country. */
            type: Pl.Type;
        }

        export namespace Pl {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in PT.
         */
        export interface Pt {
            /** Options for the standard registration. */
            standard?: Pt.Standard;
            /** Type of registration to be created in an EU country. */
            type: Pt.Type;
        }

        export namespace Pt {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in RO.
         */
        export interface Ro {
            /** Options for the standard registration. */
            standard?: Ro.Standard;
            /** Type of registration to be created in an EU country. */
            type: Ro.Type;
        }

        export namespace Ro {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in RS.
         */
        export interface Rs {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in RU.
         */
        export interface Ru {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in SA.
         */
        export interface Sa {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in SE.
         */
        export interface Se {
            /** Options for the standard registration. */
            standard?: Se.Standard;
            /** Type of registration to be created in an EU country. */
            type: Se.Type;
        }

        export namespace Se {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in SG.
         */
        export interface Sg {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in SI.
         */
        export interface Si {
            /** Options for the standard registration. */
            standard?: Si.Standard;
            /** Type of registration to be created in an EU country. */
            type: Si.Type;
        }

        export namespace Si {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in SK.
         */
        export interface Sk {
            /** Options for the standard registration. */
            standard?: Sk.Standard;
            /** Type of registration to be created in an EU country. */
            type: Sk.Type;
        }

        export namespace Sk {
            /**
             * Options for the standard registration.
             */
            export interface Standard {
                /** Place of supply scheme used in an EU standard registration. */
                place_of_supply_scheme: Standard.PlaceOfSupplyScheme;
            }

            export namespace Standard {
                /**
                 * Place of supply scheme used in an EU standard registration.
                 */
                export type PlaceOfSupplyScheme = "small_seller" | "standard";
                export const PlaceOfSupplyScheme = {
                    SmallSeller: "small_seller",
                    Standard: "standard",
                } as const;
            }

            /**
             * Type of registration to be created in an EU country.
             */
            export type Type = "ioss" | "oss_non_union" | "oss_union" | "standard";
            export const Type = {
                Ioss: "ioss",
                OssNonUnion: "oss_non_union",
                OssUnion: "oss_union",
                Standard: "standard",
            } as const;
        }

        /**
         * Options for the registration in SN.
         */
        export interface Sn {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in SR.
         */
        export interface Sr {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in TH.
         */
        export interface Th {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in TJ.
         */
        export interface Tj {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in TR.
         */
        export interface Tr {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in TZ.
         */
        export interface Tz {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in UG.
         */
        export interface Ug {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in US.
         */
        export interface Us {
            /** Options for the local amusement tax registration. */
            local_amusement_tax?: Us.LocalAmusementTax;
            /** Options for the local lease tax registration. */
            local_lease_tax?: Us.LocalLeaseTax;
            /** Two-letter US state code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)). */
            state: string;
            /** Options for the state sales tax registration. */
            state_sales_tax?: Us.StateSalesTax;
            /** Type of registration to be created in the US. */
            type: Us.Type;
        }

        export namespace Us {
            /**
             * Options for the local amusement tax registration.
             */
            export interface LocalAmusementTax {
                /** A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. Supported FIPS codes are: `14000` (Chicago), `06613` (Bloomington), `21696` (East Dundee), `24582` (Evanston), and `68081` (Schiller Park). */
                jurisdiction: string;
            }

            /**
             * Options for the local lease tax registration.
             */
            export interface LocalLeaseTax {
                /** A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. Supported FIPS codes are: `14000` (Chicago). */
                jurisdiction: string;
            }

            /**
             * Options for the state sales tax registration.
             */
            export interface StateSalesTax {
                /** Elections for the state sales tax registration. */
                elections: StateSalesTax.Elections.Item[];
            }

            export namespace StateSalesTax {
                export type Elections = Elections.Item[];

                export namespace Elections {
                    export interface Item {
                        /** A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction. Supported FIPS codes are: `003` (Allegheny County) and `60000` (Philadelphia City). */
                        jurisdiction?: string;
                        /** The type of the election for the state sales tax registration. */
                        type: Item.Type;
                    }

                    export namespace Item {
                        /**
                         * The type of the election for the state sales tax registration.
                         */
                        export type Type = "local_use_tax" | "simplified_sellers_use_tax" | "single_local_use_tax";
                        export const Type = {
                            LocalUseTax: "local_use_tax",
                            SimplifiedSellersUseTax: "simplified_sellers_use_tax",
                            SingleLocalUseTax: "single_local_use_tax",
                        } as const;
                    }
                }
            }

            /**
             * Type of registration to be created in the US.
             */
            export type Type =
                | "local_amusement_tax"
                | "local_lease_tax"
                | "state_communications_tax"
                | "state_retail_delivery_fee"
                | "state_sales_tax";
            export const Type = {
                LocalAmusementTax: "local_amusement_tax",
                LocalLeaseTax: "local_lease_tax",
                StateCommunicationsTax: "state_communications_tax",
                StateRetailDeliveryFee: "state_retail_delivery_fee",
                StateSalesTax: "state_sales_tax",
            } as const;
        }

        /**
         * Options for the registration in UY.
         */
        export interface Uy {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in UZ.
         */
        export interface Uz {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in VN.
         */
        export interface Vn {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in ZA.
         */
        export interface Za {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }

        /**
         * Options for the registration in ZM.
         */
        export interface Zm {
            /** Type of registration to be created in `country`. */
            type: "simplified";
        }

        /**
         * Options for the registration in ZW.
         */
        export interface Zw {
            /** Type of registration to be created in `country`. */
            type: "standard";
        }
    }
}
