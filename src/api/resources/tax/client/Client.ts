/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Calculation } from "../resources/calculation/client/Client";
import { Registration } from "../resources/registration/client/Client";
import { Settings } from "../resources/settings/client/Client";
import { Transaction } from "../resources/transaction/client/Client";

export declare namespace Tax {
    export interface Options {
        environment?: core.Supplier<environments.StripeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Tax {
    protected _calculation: Calculation | undefined;
    protected _registration: Registration | undefined;
    protected _settings: Settings | undefined;
    protected _transaction: Transaction | undefined;

    constructor(protected readonly _options: Tax.Options) {}

    public get calculation(): Calculation {
        return (this._calculation ??= new Calculation(this._options));
    }

    public get registration(): Registration {
        return (this._registration ??= new Registration(this._options));
    }

    public get settings(): Settings {
        return (this._settings ??= new Settings(this._options));
    }

    public get transaction(): Transaction {
        return (this._transaction ??= new Transaction(this._options));
    }
}
