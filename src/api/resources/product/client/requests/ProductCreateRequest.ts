/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         name: "name"
 *     }
 */
export interface ProductCreateRequest {
    /** Whether the product is currently available for purchase. Defaults to `true`. */
    active?: boolean;
    /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object. This Price will be set as the default price for this product. */
    default_price_data?: ProductCreateRequest.DefaultPriceData;
    /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
    description?: string;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account. */
    id?: string;
    /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
    images?: string[];
    /** A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table). */
    marketing_features?: ProductCreateRequest.MarketingFeatures.Item[];
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: Record<string, string>;
    /** The product's name, meant to be displayable to the customer. */
    name: string;
    /** The dimensions of this product for shipping purposes. */
    package_dimensions?: ProductCreateRequest.PackageDimensions;
    /** Whether this product is shipped (i.e., physical goods). */
    shippable?: boolean;
    /**
     * An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
     *
     * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
     *  It must contain at least one letter. Only used for subscription payments.
     */
    statement_descriptor?: string;
    /** A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
    tax_code?: string;
    /** The type of the product. Defaults to `service` if not explicitly specified, enabling use of this product with Subscriptions and Plans. Set this parameter to `good` to use this product with Orders and SKUs. On API versions before `2018-02-05`, this field defaults to `good` for compatibility reasons. */
    type?: ProductCreateRequest.Type;
    /** A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal. */
    unit_label?: string;
    /** A URL of a publicly-accessible webpage for this product. */
    url?: string;
}

export namespace ProductCreateRequest {
    /**
     * Data used to generate a new [Price](https://stripe.com/docs/api/prices) object. This Price will be set as the default price for this product.
     */
    export interface DefaultPriceData {
        /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
        currency: string;
        /** Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
        currency_options?: Record<string, DefaultPriceData.CurrencyOptions.Value>;
        /** When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
        custom_unit_amount?: DefaultPriceData.CustomUnitAmount;
        /** The recurring components of a price such as `interval` and `interval_count`. */
        recurring?: DefaultPriceData.Recurring;
        /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
        tax_behavior?: DefaultPriceData.TaxBehavior;
        /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required. */
        unit_amount?: number;
        /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
        unit_amount_decimal?: string;
    }

    export namespace DefaultPriceData {
        export namespace CurrencyOptions {
            export interface Value {
                /** When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
                custom_unit_amount?: Value.CustomUnitAmount;
                /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
                tax_behavior?: Value.TaxBehavior;
                /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
                tiers?: Value.Tiers.Item[];
                /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. */
                unit_amount?: number;
                /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
                unit_amount_decimal?: string;
            }

            export namespace Value {
                /**
                 * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
                 */
                export interface CustomUnitAmount {
                    /** Pass in `true` to enable `custom_unit_amount`, otherwise omit `custom_unit_amount`. */
                    enabled: boolean;
                    /** The maximum unit amount the customer can specify for this item. */
                    maximum?: number;
                    /** The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount. */
                    minimum?: number;
                    /** The starting unit amount which can be updated by the customer. */
                    preset?: number;
                }

                /**
                 * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                 */
                export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
                export const TaxBehavior = {
                    Exclusive: "exclusive",
                    Inclusive: "inclusive",
                    Unspecified: "unspecified",
                } as const;
                export type Tiers = Tiers.Item[];

                export namespace Tiers {
                    export interface Item {
                        /** The flat billing amount for an entire tier, regardless of the number of units in the tier. */
                        flat_amount?: number;
                        /** Same as `flat_amount`, but accepts a decimal value representing an integer in the minor units of the currency. Only one of `flat_amount` and `flat_amount_decimal` can be set. */
                        flat_amount_decimal?: string;
                        /** The per unit billing amount for each individual unit for which this tier applies. */
                        unit_amount?: number;
                        /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
                        unit_amount_decimal?: string;
                        /** Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use `inf` to define a fallback tier. */
                        up_to: Item.UpTo;
                    }

                    export namespace Item {
                        /**
                         * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use `inf` to define a fallback tier.
                         */
                        export type UpTo = "inf" | number;
                    }
                }
            }
        }

        /**
         * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
         */
        export interface CustomUnitAmount {
            /** Pass in `true` to enable `custom_unit_amount`, otherwise omit `custom_unit_amount`. */
            enabled: boolean;
            /** The maximum unit amount the customer can specify for this item. */
            maximum?: number;
            /** The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount. */
            minimum?: number;
            /** The starting unit amount which can be updated by the customer. */
            preset?: number;
        }

        /**
         * The recurring components of a price such as `interval` and `interval_count`.
         */
        export interface Recurring {
            /** Specifies billing frequency. Either `day`, `week`, `month` or `year`. */
            interval: Recurring.Interval;
            /** The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks). */
            interval_count?: number;
        }

        export namespace Recurring {
            /**
             * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
             */
            export type Interval = "day" | "month" | "week" | "year";
            export const Interval = {
                Day: "day",
                Month: "month",
                Week: "week",
                Year: "year",
            } as const;
        }

        /**
         * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
         */
        export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
        export const TaxBehavior = {
            Exclusive: "exclusive",
            Inclusive: "inclusive",
            Unspecified: "unspecified",
        } as const;
    }

    export type MarketingFeatures = MarketingFeatures.Item[];

    export namespace MarketingFeatures {
        export interface Item {
            /** The marketing feature name. Up to 80 characters long. */
            name: string;
        }
    }

    /**
     * The dimensions of this product for shipping purposes.
     */
    export interface PackageDimensions {
        /** Height, in inches. Maximum precision is 2 decimal places. */
        height: number;
        /** Length, in inches. Maximum precision is 2 decimal places. */
        length: number;
        /** Weight, in ounces. Maximum precision is 2 decimal places. */
        weight: number;
        /** Width, in inches. Maximum precision is 2 decimal places. */
        width: number;
    }

    /**
     * The type of the product. Defaults to `service` if not explicitly specified, enabling use of this product with Subscriptions and Plans. Set this parameter to `good` to use this product with Orders and SKUs. On API versions before `2018-02-05`, this field defaults to `good` for compatibility reasons.
     */
    export type Type = "good" | "service";
    export const Type = {
        Good: "good",
        Service: "service",
    } as const;
}
