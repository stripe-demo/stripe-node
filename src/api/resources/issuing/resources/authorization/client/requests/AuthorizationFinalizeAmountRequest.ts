/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         final_amount: 1
 *     }
 */
export interface AuthorizationFinalizeAmountRequest {
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    final_amount: number;
    /** Fleet-specific information for authorizations using Fleet cards. */
    fleet?: AuthorizationFinalizeAmountRequest.Fleet;
    /** Information about fuel that was purchased with this transaction. */
    fuel?: AuthorizationFinalizeAmountRequest.Fuel;
}

export namespace AuthorizationFinalizeAmountRequest {
    /**
     * Fleet-specific information for authorizations using Fleet cards.
     */
    export interface Fleet {
        /** Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry. */
        cardholder_prompt_data?: Fleet.CardholderPromptData;
        /** The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`. */
        purchase_type?: Fleet.PurchaseType;
        /** More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data. */
        reported_breakdown?: Fleet.ReportedBreakdown;
        /** The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`. */
        service_type?: Fleet.ServiceType;
    }

    export namespace Fleet {
        /**
         * Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry.
         */
        export interface CardholderPromptData {
            /** Driver ID. */
            driver_id?: string;
            /** Odometer reading. */
            odometer?: number;
            /** An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type. */
            unspecified_id?: string;
            /** User ID. */
            user_id?: string;
            /** Vehicle number. */
            vehicle_number?: string;
        }

        /**
         * The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`.
         */
        export type PurchaseType = "fuel_and_non_fuel_purchase" | "fuel_purchase" | "non_fuel_purchase";
        export const PurchaseType = {
            FuelAndNonFuelPurchase: "fuel_and_non_fuel_purchase",
            FuelPurchase: "fuel_purchase",
            NonFuelPurchase: "non_fuel_purchase",
        } as const;

        /**
         * More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data.
         */
        export interface ReportedBreakdown {
            /** Breakdown of fuel portion of the purchase. */
            fuel?: ReportedBreakdown.Fuel;
            /** Breakdown of non-fuel portion of the purchase. */
            non_fuel?: ReportedBreakdown.NonFuel;
            /** Information about tax included in this transaction. */
            tax?: ReportedBreakdown.Tax;
        }

        export namespace ReportedBreakdown {
            /**
             * Breakdown of fuel portion of the purchase.
             */
            export interface Fuel {
                /** Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes. */
                gross_amount_decimal?: string;
            }

            /**
             * Breakdown of non-fuel portion of the purchase.
             */
            export interface NonFuel {
                /** Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes. */
                gross_amount_decimal?: string;
            }

            /**
             * Information about tax included in this transaction.
             */
            export interface Tax {
                /** Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax. */
                local_amount_decimal?: string;
                /** Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax. */
                national_amount_decimal?: string;
            }
        }

        /**
         * The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`.
         */
        export type ServiceType = "full_service" | "non_fuel_transaction" | "self_service";
        export const ServiceType = {
            FullService: "full_service",
            NonFuelTransaction: "non_fuel_transaction",
            SelfService: "self_service",
        } as const;
    }

    /**
     * Information about fuel that was purchased with this transaction.
     */
    export interface Fuel {
        /** [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased. */
        industry_product_code?: string;
        /** The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places. */
        quantity_decimal?: string;
        /** The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
        type?: Fuel.Type;
        /** The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`. */
        unit?: Fuel.Unit;
        /** The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places. */
        unit_cost_decimal?: string;
    }

    export namespace Fuel {
        /**
         * The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
         */
        export type Type = "diesel" | "other" | "unleaded_plus" | "unleaded_regular" | "unleaded_super";
        export const Type = {
            Diesel: "diesel",
            Other: "other",
            UnleadedPlus: "unleaded_plus",
            UnleadedRegular: "unleaded_regular",
            UnleadedSuper: "unleaded_super",
        } as const;
        /**
         * The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`.
         */
        export type Unit =
            | "charging_minute"
            | "imperial_gallon"
            | "kilogram"
            | "kilowatt_hour"
            | "liter"
            | "other"
            | "pound"
            | "us_gallon";
        export const Unit = {
            ChargingMinute: "charging_minute",
            ImperialGallon: "imperial_gallon",
            Kilogram: "kilogram",
            KilowattHour: "kilowatt_hour",
            Liter: "liter",
            Other: "other",
            Pound: "pound",
            UsGallon: "us_gallon",
        } as const;
    }
}
