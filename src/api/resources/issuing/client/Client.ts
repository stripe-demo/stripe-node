/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Authorization } from "../resources/authorization/client/Client";
import { Cardholder } from "../resources/cardholder/client/Client";
import { Card } from "../resources/card/client/Client";
import { Dispute } from "../resources/dispute/client/Client";
import { PersonalizationDesign } from "../resources/personalizationDesign/client/Client";
import { PhysicalBundle } from "../resources/physicalBundle/client/Client";
import { Token } from "../resources/token/client/Client";
import { Transaction } from "../resources/transaction/client/Client";

export declare namespace Issuing {
    export interface Options {
        environment?: core.Supplier<environments.StripeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Issuing {
    protected _authorization: Authorization | undefined;
    protected _cardholder: Cardholder | undefined;
    protected _card: Card | undefined;
    protected _dispute: Dispute | undefined;
    protected _personalizationDesign: PersonalizationDesign | undefined;
    protected _physicalBundle: PhysicalBundle | undefined;
    protected _token: Token | undefined;
    protected _transaction: Transaction | undefined;

    constructor(protected readonly _options: Issuing.Options) {}

    public get authorization(): Authorization {
        return (this._authorization ??= new Authorization(this._options));
    }

    public get cardholder(): Cardholder {
        return (this._cardholder ??= new Cardholder(this._options));
    }

    public get card(): Card {
        return (this._card ??= new Card(this._options));
    }

    public get dispute(): Dispute {
        return (this._dispute ??= new Dispute(this._options));
    }

    public get personalizationDesign(): PersonalizationDesign {
        return (this._personalizationDesign ??= new PersonalizationDesign(this._options));
    }

    public get physicalBundle(): PhysicalBundle {
        return (this._physicalBundle ??= new PhysicalBundle(this._options));
    }

    public get token(): Token {
        return (this._token ??= new Token(this._options));
    }

    public get transaction(): Transaction {
        return (this._transaction ??= new Transaction(this._options));
    }
}
