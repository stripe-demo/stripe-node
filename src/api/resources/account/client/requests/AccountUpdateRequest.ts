/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface AccountUpdateRequest {
    /** An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
    account_token?: string;
    /** Business information about the account. */
    business_profile?: AccountUpdateRequest.BusinessProfile;
    /** The business type. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
    business_type?: AccountUpdateRequest.BusinessType;
    /**
     * Each key of the dictionary represents a capability, and each capability
     * maps to its settings (for example, whether it has been requested or not). Each
     * capability is inactive until you have provided its specific
     * requirements and Stripe has verified them. An account might have some
     * of its requested capabilities be active and some be inactive.
     *
     * Required when [account.controller.stripe_dashboard.type](/api/accounts/create#create_account-controller-dashboard-type)
     * is `none`, which includes Custom accounts.
     */
    capabilities?: AccountUpdateRequest.Capabilities;
    /** Information about the company or business. This field is available for any `business_type`. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
    company?: AccountUpdateRequest.Company;
    /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://docs.stripe.com/payouts). */
    default_currency?: string;
    /** Documents that may be submitted to satisfy various informational requests. */
    documents?: AccountUpdateRequest.Documents;
    /** The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn't email the account without your consent. */
    email?: string;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** A card or bank account to attach to the account for receiving [payouts](/connect/bank-debit-card-payouts) (you wonâ€™t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](/js), or a dictionary, as documented in the `external_account` parameter for [bank account](/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the [bank account](/api#account_create_bank_account) or [card creation](/api#account_create_card) APIs. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
    external_account?: string;
    /** A hash of account group type to tokens. These are account groups this account should be added to. */
    groups?: AccountUpdateRequest.Groups;
    /** Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. */
    individual?: AccountUpdateRequest.Individual;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: AccountUpdateRequest.Metadata;
    /** Options for customizing how the account functions within Stripe. */
    settings?: AccountUpdateRequest.Settings;
    /** Details on the account's acceptance of the [Stripe Services Agreement](/connect/updating-accounts#tos-acceptance). This property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. This property defaults to a `full` service agreement when empty. */
    tos_acceptance?: AccountUpdateRequest.TosAcceptance;
}

export namespace AccountUpdateRequest {
    /**
     * Business information about the account.
     */
    export interface BusinessProfile {
        /** The applicant's gross annual revenue for its preceding fiscal year. */
        annual_revenue?: BusinessProfile.AnnualRevenue;
        /** An estimated upper bound of employees, contractors, vendors, etc. currently working for the business. */
        estimated_worker_count?: number;
        /** [The merchant category code for the account](/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
        mcc?: string;
        /** An estimate of the monthly revenue of the business. Only accepted for accounts in Brazil and India. */
        monthly_estimated_revenue?: BusinessProfile.MonthlyEstimatedRevenue;
        /** The customer-facing business name. */
        name?: string;
        /** Internal-only description of the product sold by, or service provided by, the business. Used by Stripe for risk and underwriting purposes. */
        product_description?: string;
        /** A publicly available mailing address for sending support issues to. */
        support_address?: BusinessProfile.SupportAddress;
        /** A publicly available email address for sending support issues to. */
        support_email?: string;
        /** A publicly available phone number to call with support issues. */
        support_phone?: string;
        /** A publicly available website for handling support issues. */
        support_url?: BusinessProfile.SupportUrl;
        /** The business's publicly available website. */
        url?: string;
    }

    export namespace BusinessProfile {
        /**
         * The applicant's gross annual revenue for its preceding fiscal year.
         */
        export interface AnnualRevenue {
            /** A non-negative integer representing the amount in the [smallest currency unit](/currencies#zero-decimal). */
            amount: number;
            /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
            /** The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023. */
            fiscal_year_end: string;
        }

        /**
         * An estimate of the monthly revenue of the business. Only accepted for accounts in Brazil and India.
         */
        export interface MonthlyEstimatedRevenue {
            /** A non-negative integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal). */
            amount: number;
            /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
            currency: string;
        }

        /**
         * A publicly available mailing address for sending support issues to.
         */
        export interface SupportAddress {
            /** City, district, suburb, town, or village. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string;
            /** Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string;
            /** ZIP or postal code. */
            postal_code?: string;
            /** State, county, province, or region. */
            state?: string;
        }

        /**
         * A publicly available website for handling support issues.
         */
        export type SupportUrl = string | "";
    }

    /**
     * The business type. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
     */
    export type BusinessType = "company" | "government_entity" | "individual" | "non_profit";
    export const BusinessType = {
        Company: "company",
        GovernmentEntity: "government_entity",
        Individual: "individual",
        NonProfit: "non_profit",
    } as const;

    /**
     * Each key of the dictionary represents a capability, and each capability
     * maps to its settings (for example, whether it has been requested or not). Each
     * capability is inactive until you have provided its specific
     * requirements and Stripe has verified them. An account might have some
     * of its requested capabilities be active and some be inactive.
     *
     * Required when [account.controller.stripe_dashboard.type](/api/accounts/create#create_account-controller-dashboard-type)
     * is `none`, which includes Custom accounts.
     */
    export interface Capabilities {
        /** The acss_debit_payments capability. */
        acss_debit_payments?: Capabilities.AcssDebitPayments;
        /** The affirm_payments capability. */
        affirm_payments?: Capabilities.AffirmPayments;
        /** The afterpay_clearpay_payments capability. */
        afterpay_clearpay_payments?: Capabilities.AfterpayClearpayPayments;
        /** The alma_payments capability. */
        alma_payments?: Capabilities.AlmaPayments;
        /** The amazon_pay_payments capability. */
        amazon_pay_payments?: Capabilities.AmazonPayPayments;
        /** The au_becs_debit_payments capability. */
        au_becs_debit_payments?: Capabilities.AuBecsDebitPayments;
        /** The bacs_debit_payments capability. */
        bacs_debit_payments?: Capabilities.BacsDebitPayments;
        /** The bancontact_payments capability. */
        bancontact_payments?: Capabilities.BancontactPayments;
        /** The bank_transfer_payments capability. */
        bank_transfer_payments?: Capabilities.BankTransferPayments;
        /** The blik_payments capability. */
        blik_payments?: Capabilities.BlikPayments;
        /** The boleto_payments capability. */
        boleto_payments?: Capabilities.BoletoPayments;
        /** The card_issuing capability. */
        card_issuing?: Capabilities.CardIssuing;
        /** The card_payments capability. */
        card_payments?: Capabilities.CardPayments;
        /** The cartes_bancaires_payments capability. */
        cartes_bancaires_payments?: Capabilities.CartesBancairesPayments;
        /** The cashapp_payments capability. */
        cashapp_payments?: Capabilities.CashappPayments;
        /** The eps_payments capability. */
        eps_payments?: Capabilities.EpsPayments;
        /** The fpx_payments capability. */
        fpx_payments?: Capabilities.FpxPayments;
        /** The gb_bank_transfer_payments capability. */
        gb_bank_transfer_payments?: Capabilities.GbBankTransferPayments;
        /** The giropay_payments capability. */
        giropay_payments?: Capabilities.GiropayPayments;
        /** The grabpay_payments capability. */
        grabpay_payments?: Capabilities.GrabpayPayments;
        /** The ideal_payments capability. */
        ideal_payments?: Capabilities.IdealPayments;
        /** The india_international_payments capability. */
        india_international_payments?: Capabilities.IndiaInternationalPayments;
        /** The jcb_payments capability. */
        jcb_payments?: Capabilities.JcbPayments;
        /** The jp_bank_transfer_payments capability. */
        jp_bank_transfer_payments?: Capabilities.JpBankTransferPayments;
        /** The kakao_pay_payments capability. */
        kakao_pay_payments?: Capabilities.KakaoPayPayments;
        /** The klarna_payments capability. */
        klarna_payments?: Capabilities.KlarnaPayments;
        /** The konbini_payments capability. */
        konbini_payments?: Capabilities.KonbiniPayments;
        /** The kr_card_payments capability. */
        kr_card_payments?: Capabilities.KrCardPayments;
        /** The legacy_payments capability. */
        legacy_payments?: Capabilities.LegacyPayments;
        /** The link_payments capability. */
        link_payments?: Capabilities.LinkPayments;
        /** The mobilepay_payments capability. */
        mobilepay_payments?: Capabilities.MobilepayPayments;
        /** The multibanco_payments capability. */
        multibanco_payments?: Capabilities.MultibancoPayments;
        /** The mx_bank_transfer_payments capability. */
        mx_bank_transfer_payments?: Capabilities.MxBankTransferPayments;
        /** The naver_pay_payments capability. */
        naver_pay_payments?: Capabilities.NaverPayPayments;
        /** The oxxo_payments capability. */
        oxxo_payments?: Capabilities.OxxoPayments;
        /** The p24_payments capability. */
        p24_payments?: Capabilities.P24Payments;
        /** The pay_by_bank_payments capability. */
        pay_by_bank_payments?: Capabilities.PayByBankPayments;
        /** The payco_payments capability. */
        payco_payments?: Capabilities.PaycoPayments;
        /** The paynow_payments capability. */
        paynow_payments?: Capabilities.PaynowPayments;
        /** The promptpay_payments capability. */
        promptpay_payments?: Capabilities.PromptpayPayments;
        /** The revolut_pay_payments capability. */
        revolut_pay_payments?: Capabilities.RevolutPayPayments;
        /** The samsung_pay_payments capability. */
        samsung_pay_payments?: Capabilities.SamsungPayPayments;
        /** The sepa_bank_transfer_payments capability. */
        sepa_bank_transfer_payments?: Capabilities.SepaBankTransferPayments;
        /** The sepa_debit_payments capability. */
        sepa_debit_payments?: Capabilities.SepaDebitPayments;
        /** The sofort_payments capability. */
        sofort_payments?: Capabilities.SofortPayments;
        /** The swish_payments capability. */
        swish_payments?: Capabilities.SwishPayments;
        /** The tax_reporting_us_1099_k capability. */
        tax_reporting_us_1099_k?: Capabilities.TaxReportingUs1099K;
        /** The tax_reporting_us_1099_misc capability. */
        tax_reporting_us_1099_misc?: Capabilities.TaxReportingUs1099Misc;
        /** The transfers capability. */
        transfers?: Capabilities.Transfers;
        /** The treasury capability. */
        treasury?: Capabilities.Treasury;
        /** The twint_payments capability. */
        twint_payments?: Capabilities.TwintPayments;
        /** The us_bank_account_ach_payments capability. */
        us_bank_account_ach_payments?: Capabilities.UsBankAccountAchPayments;
        /** The us_bank_transfer_payments capability. */
        us_bank_transfer_payments?: Capabilities.UsBankTransferPayments;
        /** The zip_payments capability. */
        zip_payments?: Capabilities.ZipPayments;
    }

    export namespace Capabilities {
        /**
         * The acss_debit_payments capability.
         */
        export interface AcssDebitPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The affirm_payments capability.
         */
        export interface AffirmPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The afterpay_clearpay_payments capability.
         */
        export interface AfterpayClearpayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The alma_payments capability.
         */
        export interface AlmaPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The amazon_pay_payments capability.
         */
        export interface AmazonPayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The au_becs_debit_payments capability.
         */
        export interface AuBecsDebitPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The bacs_debit_payments capability.
         */
        export interface BacsDebitPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The bancontact_payments capability.
         */
        export interface BancontactPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The bank_transfer_payments capability.
         */
        export interface BankTransferPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The blik_payments capability.
         */
        export interface BlikPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The boleto_payments capability.
         */
        export interface BoletoPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The card_issuing capability.
         */
        export interface CardIssuing {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The card_payments capability.
         */
        export interface CardPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The cartes_bancaires_payments capability.
         */
        export interface CartesBancairesPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The cashapp_payments capability.
         */
        export interface CashappPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The eps_payments capability.
         */
        export interface EpsPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The fpx_payments capability.
         */
        export interface FpxPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The gb_bank_transfer_payments capability.
         */
        export interface GbBankTransferPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The giropay_payments capability.
         */
        export interface GiropayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The grabpay_payments capability.
         */
        export interface GrabpayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The ideal_payments capability.
         */
        export interface IdealPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The india_international_payments capability.
         */
        export interface IndiaInternationalPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The jcb_payments capability.
         */
        export interface JcbPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The jp_bank_transfer_payments capability.
         */
        export interface JpBankTransferPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The kakao_pay_payments capability.
         */
        export interface KakaoPayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The klarna_payments capability.
         */
        export interface KlarnaPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The konbini_payments capability.
         */
        export interface KonbiniPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The kr_card_payments capability.
         */
        export interface KrCardPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The legacy_payments capability.
         */
        export interface LegacyPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The link_payments capability.
         */
        export interface LinkPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The mobilepay_payments capability.
         */
        export interface MobilepayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The multibanco_payments capability.
         */
        export interface MultibancoPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The mx_bank_transfer_payments capability.
         */
        export interface MxBankTransferPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The naver_pay_payments capability.
         */
        export interface NaverPayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The oxxo_payments capability.
         */
        export interface OxxoPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The p24_payments capability.
         */
        export interface P24Payments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The pay_by_bank_payments capability.
         */
        export interface PayByBankPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The payco_payments capability.
         */
        export interface PaycoPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The paynow_payments capability.
         */
        export interface PaynowPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The promptpay_payments capability.
         */
        export interface PromptpayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The revolut_pay_payments capability.
         */
        export interface RevolutPayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The samsung_pay_payments capability.
         */
        export interface SamsungPayPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The sepa_bank_transfer_payments capability.
         */
        export interface SepaBankTransferPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The sepa_debit_payments capability.
         */
        export interface SepaDebitPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The sofort_payments capability.
         */
        export interface SofortPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The swish_payments capability.
         */
        export interface SwishPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The tax_reporting_us_1099_k capability.
         */
        export interface TaxReportingUs1099K {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The tax_reporting_us_1099_misc capability.
         */
        export interface TaxReportingUs1099Misc {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The transfers capability.
         */
        export interface Transfers {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The treasury capability.
         */
        export interface Treasury {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The twint_payments capability.
         */
        export interface TwintPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The us_bank_account_ach_payments capability.
         */
        export interface UsBankAccountAchPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The us_bank_transfer_payments capability.
         */
        export interface UsBankTransferPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }

        /**
         * The zip_payments capability.
         */
        export interface ZipPayments {
            /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
            requested?: boolean;
        }
    }

    /**
     * Information about the company or business. This field is available for any `business_type`. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
     */
    export interface Company {
        /** The company's primary address. */
        address?: Company.Address;
        /** The Kana variation of the company's primary address (Japan only). */
        address_kana?: Company.AddressKana;
        /** The Kanji variation of the company's primary address (Japan only). */
        address_kanji?: Company.AddressKanji;
        /** Whether the company's directors have been provided. Set this Boolean to `true` after creating all the company's directors with [the Persons API](/api/persons) for accounts with a `relationship.director` requirement. This value is not automatically set to `true` after creating directors, so it needs to be updated to indicate all directors have been provided. */
        directors_provided?: boolean;
        /** This hash is used to attest that the directors information provided to Stripe is both current and correct. */
        directorship_declaration?: Company.DirectorshipDeclaration;
        /** Whether the company's executives have been provided. Set this Boolean to `true` after creating all the company's executives with [the Persons API](/api/persons) for accounts with a `relationship.executive` requirement. */
        executives_provided?: boolean;
        /** The export license ID number of the company, also referred as Import Export Code (India only). */
        export_license_id?: string;
        /** The purpose code to use for export transactions (India only). */
        export_purpose_code?: string;
        /** The company's legal name. */
        name?: string;
        /** The Kana variation of the company's legal name (Japan only). */
        name_kana?: string;
        /** The Kanji variation of the company's legal name (Japan only). */
        name_kanji?: string;
        /** Whether the company's owners have been provided. Set this Boolean to `true` after creating all the company's owners with [the Persons API](/api/persons) for accounts with a `relationship.owner` requirement. */
        owners_provided?: boolean;
        /** This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct. */
        ownership_declaration?: Company.OwnershipDeclaration;
        ownership_exemption_reason?: Company.OwnershipExemptionReason;
        /** The company's phone number (used for verification). */
        phone?: string;
        /** The identification number given to a company when it is registered or incorporated, if distinct from the identification number used for filing taxes. (Examples are the CIN for companies and LLP IN for partnerships in India, and the Company Registration Number in Hong Kong). */
        registration_number?: string;
        /** The category identifying the legal structure of the company or legal entity. See [Business structure](/connect/identity-verification#business-structure) for more details. Pass an empty string to unset this value. */
        structure?: Company.Structure;
        /** The business ID number of the company, as appropriate for the companyâ€™s country. (Examples are an Employer ID Number in the U.S., a Business Number in Canada, or a Company Number in the UK.) */
        tax_id?: string;
        /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
        tax_id_registrar?: string;
        /** The VAT number of the company. */
        vat_id?: string;
        /** Information on the verification state of the company. */
        verification?: Company.Verification;
    }

    export namespace Company {
        /**
         * The company's primary address.
         */
        export interface Address {
            /** City, district, suburb, town, or village. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string;
            /** Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string;
            /** ZIP or postal code. */
            postal_code?: string;
            /** State, county, province, or region. */
            state?: string;
        }

        /**
         * The Kana variation of the company's primary address (Japan only).
         */
        export interface AddressKana {
            /** City or ward. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Block or building number. */
            line1?: string;
            /** Building details. */
            line2?: string;
            /** Postal code. */
            postal_code?: string;
            /** Prefecture. */
            state?: string;
            /** Town or cho-me. */
            town?: string;
        }

        /**
         * The Kanji variation of the company's primary address (Japan only).
         */
        export interface AddressKanji {
            /** City or ward. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Block or building number. */
            line1?: string;
            /** Building details. */
            line2?: string;
            /** Postal code. */
            postal_code?: string;
            /** Prefecture. */
            state?: string;
            /** Town or cho-me. */
            town?: string;
        }

        /**
         * This hash is used to attest that the directors information provided to Stripe is both current and correct.
         */
        export interface DirectorshipDeclaration {
            /** The Unix timestamp marking when the directorship declaration attestation was made. */
            date?: number;
            /** The IP address from which the directorship declaration attestation was made. */
            ip?: string;
            /** The user agent of the browser from which the directorship declaration attestation was made. */
            user_agent?: string;
        }

        /**
         * This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
         */
        export interface OwnershipDeclaration {
            /** The Unix timestamp marking when the beneficial owner attestation was made. */
            date?: number;
            /** The IP address from which the beneficial owner attestation was made. */
            ip?: string;
            /** The user agent of the browser from which the beneficial owner attestation was made. */
            user_agent?: string;
        }

        export type OwnershipExemptionReason =
            | ""
            | "qualified_entity_exceeds_ownership_threshold"
            | "qualifies_as_financial_institution";
        export const OwnershipExemptionReason = {
            Empty: "",
            QualifiedEntityExceedsOwnershipThreshold: "qualified_entity_exceeds_ownership_threshold",
            QualifiesAsFinancialInstitution: "qualifies_as_financial_institution",
        } as const;
        /**
         * The category identifying the legal structure of the company or legal entity. See [Business structure](/connect/identity-verification#business-structure) for more details. Pass an empty string to unset this value.
         */
        export type Structure =
            | ""
            | "free_zone_establishment"
            | "free_zone_llc"
            | "government_instrumentality"
            | "governmental_unit"
            | "incorporated_non_profit"
            | "incorporated_partnership"
            | "limited_liability_partnership"
            | "llc"
            | "multi_member_llc"
            | "private_company"
            | "private_corporation"
            | "private_partnership"
            | "public_company"
            | "public_corporation"
            | "public_partnership"
            | "registered_charity"
            | "single_member_llc"
            | "sole_establishment"
            | "sole_proprietorship"
            | "tax_exempt_government_instrumentality"
            | "unincorporated_association"
            | "unincorporated_non_profit"
            | "unincorporated_partnership";
        export const Structure = {
            Empty: "",
            FreeZoneEstablishment: "free_zone_establishment",
            FreeZoneLlc: "free_zone_llc",
            GovernmentInstrumentality: "government_instrumentality",
            GovernmentalUnit: "governmental_unit",
            IncorporatedNonProfit: "incorporated_non_profit",
            IncorporatedPartnership: "incorporated_partnership",
            LimitedLiabilityPartnership: "limited_liability_partnership",
            Llc: "llc",
            MultiMemberLlc: "multi_member_llc",
            PrivateCompany: "private_company",
            PrivateCorporation: "private_corporation",
            PrivatePartnership: "private_partnership",
            PublicCompany: "public_company",
            PublicCorporation: "public_corporation",
            PublicPartnership: "public_partnership",
            RegisteredCharity: "registered_charity",
            SingleMemberLlc: "single_member_llc",
            SoleEstablishment: "sole_establishment",
            SoleProprietorship: "sole_proprietorship",
            TaxExemptGovernmentInstrumentality: "tax_exempt_government_instrumentality",
            UnincorporatedAssociation: "unincorporated_association",
            UnincorporatedNonProfit: "unincorporated_non_profit",
            UnincorporatedPartnership: "unincorporated_partnership",
        } as const;

        /**
         * Information on the verification state of the company.
         */
        export interface Verification {
            /** A document verifying the business. */
            document?: Verification.Document;
        }

        export namespace Verification {
            /**
             * A document verifying the business.
             */
            export interface Document {
                /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size. */
                back?: string;
                /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size. */
                front?: string;
            }
        }
    }

    /**
     * Documents that may be submitted to satisfy various informational requests.
     */
    export interface Documents {
        /** One or more documents that support the [Bank account ownership verification](https://support.stripe.com/questions/bank-account-ownership-verification) requirement. Must be a document associated with the accountâ€™s primary active bank account that displays the last 4 digits of the account number, either a statement or a check. */
        bank_account_ownership_verification?: Documents.BankAccountOwnershipVerification;
        /** One or more documents that demonstrate proof of a company's license to operate. */
        company_license?: Documents.CompanyLicense;
        /** One or more documents showing the company's Memorandum of Association. */
        company_memorandum_of_association?: Documents.CompanyMemorandumOfAssociation;
        /** (Certain countries only) One or more documents showing the ministerial decree legalizing the company's establishment. */
        company_ministerial_decree?: Documents.CompanyMinisterialDecree;
        /** One or more documents that demonstrate proof of a company's registration with the appropriate local authorities. */
        company_registration_verification?: Documents.CompanyRegistrationVerification;
        /** One or more documents that demonstrate proof of a company's tax ID. */
        company_tax_id_verification?: Documents.CompanyTaxIdVerification;
        /** One or more documents showing the companyâ€™s proof of registration with the national business registry. */
        proof_of_registration?: Documents.ProofOfRegistration;
        /** One or more documents that demonstrate proof of ultimate beneficial ownership. */
        proof_of_ultimate_beneficial_ownership?: Documents.ProofOfUltimateBeneficialOwnership;
    }

    export namespace Documents {
        /**
         * One or more documents that support the [Bank account ownership verification](https://support.stripe.com/questions/bank-account-ownership-verification) requirement. Must be a document associated with the accountâ€™s primary active bank account that displays the last 4 digits of the account number, either a statement or a check.
         */
        export interface BankAccountOwnershipVerification {
            /** One or more document ids returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `account_requirement`. */
            files?: string[];
        }

        /**
         * One or more documents that demonstrate proof of a company's license to operate.
         */
        export interface CompanyLicense {
            /** One or more document ids returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `account_requirement`. */
            files?: string[];
        }

        /**
         * One or more documents showing the company's Memorandum of Association.
         */
        export interface CompanyMemorandumOfAssociation {
            /** One or more document ids returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `account_requirement`. */
            files?: string[];
        }

        /**
         * (Certain countries only) One or more documents showing the ministerial decree legalizing the company's establishment.
         */
        export interface CompanyMinisterialDecree {
            /** One or more document ids returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `account_requirement`. */
            files?: string[];
        }

        /**
         * One or more documents that demonstrate proof of a company's registration with the appropriate local authorities.
         */
        export interface CompanyRegistrationVerification {
            /** One or more document ids returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `account_requirement`. */
            files?: string[];
        }

        /**
         * One or more documents that demonstrate proof of a company's tax ID.
         */
        export interface CompanyTaxIdVerification {
            /** One or more document ids returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `account_requirement`. */
            files?: string[];
        }

        /**
         * One or more documents showing the companyâ€™s proof of registration with the national business registry.
         */
        export interface ProofOfRegistration {
            /** One or more document ids returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `account_requirement`. */
            files?: string[];
        }

        /**
         * One or more documents that demonstrate proof of ultimate beneficial ownership.
         */
        export interface ProofOfUltimateBeneficialOwnership {
            /** One or more document ids returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `account_requirement`. */
            files?: string[];
        }
    }

    /**
     * A hash of account group type to tokens. These are account groups this account should be added to.
     */
    export interface Groups {
        /** The group the account is in to determine their payments pricing, and null if the account is on customized pricing. [See the Platform pricing tool documentation](https://stripe.com/docs/connect/platform-pricing-tools) for details. */
        payments_pricing?: Groups.PaymentsPricing;
    }

    export namespace Groups {
        /**
         * The group the account is in to determine their payments pricing, and null if the account is on customized pricing. [See the Platform pricing tool documentation](https://stripe.com/docs/connect/platform-pricing-tools) for details.
         */
        export type PaymentsPricing = string | "";
    }

    /**
     * Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
     */
    export interface Individual {
        /** The individual's primary address. */
        address?: Individual.Address;
        /** The Kana variation of the individual's primary address (Japan only). */
        address_kana?: Individual.AddressKana;
        /** The Kanji variation of the individual's primary address (Japan only). */
        address_kanji?: Individual.AddressKanji;
        /** The individual's date of birth. */
        dob?: Individual.Dob;
        /** The individual's email address. */
        email?: string;
        /** The individual's first name. */
        first_name?: string;
        /** The Kana variation of the individual's first name (Japan only). */
        first_name_kana?: string;
        /** The Kanji variation of the individual's first name (Japan only). */
        first_name_kanji?: string;
        /** A list of alternate names or aliases that the individual is known by. */
        full_name_aliases?: Individual.FullNameAliases;
        /** The individual's gender */
        gender?: string;
        /** The government-issued ID number of the individual, as appropriate for the representative's country. (Examples are a Social Security Number in the U.S., or a Social Insurance Number in Canada). Instead of the number itself, you can also provide a [PII token created with Stripe.js](/js/tokens/create_token?type=pii). */
        id_number?: string;
        /** The government-issued secondary ID number of the individual, as appropriate for the representative's country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token created with Stripe.js](/js/tokens/create_token?type=pii). */
        id_number_secondary?: string;
        /** The individual's last name. */
        last_name?: string;
        /** The Kana variation of the individual's last name (Japan only). */
        last_name_kana?: string;
        /** The Kanji variation of the individual's last name (Japan only). */
        last_name_kanji?: string;
        /** The individual's maiden name. */
        maiden_name?: string;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        metadata?: Individual.Metadata;
        /** The individual's phone number. */
        phone?: string;
        /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
        political_exposure?: Individual.PoliticalExposure;
        /** The individual's registered address. */
        registered_address?: Individual.RegisteredAddress;
        /** Describes the personâ€™s relationship to the account. */
        relationship?: Individual.Relationship;
        /** The last four digits of the individual's Social Security Number (U.S. only). */
        ssn_last_4?: string;
        /** The individual's verification document information. */
        verification?: Individual.Verification;
    }

    export namespace Individual {
        /**
         * The individual's primary address.
         */
        export interface Address {
            /** City, district, suburb, town, or village. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string;
            /** Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string;
            /** ZIP or postal code. */
            postal_code?: string;
            /** State, county, province, or region. */
            state?: string;
        }

        /**
         * The Kana variation of the individual's primary address (Japan only).
         */
        export interface AddressKana {
            /** City or ward. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Block or building number. */
            line1?: string;
            /** Building details. */
            line2?: string;
            /** Postal code. */
            postal_code?: string;
            /** Prefecture. */
            state?: string;
            /** Town or cho-me. */
            town?: string;
        }

        /**
         * The Kanji variation of the individual's primary address (Japan only).
         */
        export interface AddressKanji {
            /** City or ward. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Block or building number. */
            line1?: string;
            /** Building details. */
            line2?: string;
            /** Postal code. */
            postal_code?: string;
            /** Prefecture. */
            state?: string;
            /** Town or cho-me. */
            town?: string;
        }

        /**
         * The individual's date of birth.
         */
        export type Dob =
            | {
                  day: number;
                  month: number;
                  year: number;
              }
            | "";
        /**
         * A list of alternate names or aliases that the individual is known by.
         */
        export type FullNameAliases = string[] | "";
        /**
         * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
         */
        export type Metadata = Record<string, string> | "";
        /**
         * Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
         */
        export type PoliticalExposure = "existing" | "none";
        export const PoliticalExposure = {
            Existing: "existing",
            None: "none",
        } as const;

        /**
         * The individual's registered address.
         */
        export interface RegisteredAddress {
            /** City, district, suburb, town, or village. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string;
            /** Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string;
            /** ZIP or postal code. */
            postal_code?: string;
            /** State, county, province, or region. */
            state?: string;
        }

        /**
         * Describes the personâ€™s relationship to the account.
         */
        export interface Relationship {
            /** Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
            director?: boolean;
            /** Whether the person has significant responsibility to control, manage, or direct the organization. */
            executive?: boolean;
            /** Whether the person is an owner of the accountâ€™s legal entity. */
            owner?: boolean;
            /** The percent owned by the person of the account's legal entity. */
            percent_ownership?: Relationship.PercentOwnership;
            /** The person's title (e.g., CEO, Support Engineer). */
            title?: string;
        }

        export namespace Relationship {
            /**
             * The percent owned by the person of the account's legal entity.
             */
            export type PercentOwnership = number | "";
        }

        /**
         * The individual's verification document information.
         */
        export interface Verification {
            /** A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
            additional_document?: Verification.AdditionalDocument;
            /** An identifying document, either a passport or local ID card. */
            document?: Verification.Document;
        }

        export namespace Verification {
            /**
             * A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
             */
            export interface AdditionalDocument {
                /** The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size. */
                back?: string;
                /** The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size. */
                front?: string;
            }

            /**
             * An identifying document, either a passport or local ID card.
             */
            export interface Document {
                /** The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size. */
                back?: string;
                /** The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. The uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size. */
                front?: string;
            }
        }
    }

    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type Metadata = Record<string, string> | "";

    /**
     * Options for customizing how the account functions within Stripe.
     */
    export interface Settings {
        /** Settings specific to Bacs Direct Debit payments. */
        bacs_debit_payments?: Settings.BacsDebitPayments;
        /** Settings used to apply the account's branding to email receipts, invoices, Checkout, and other products. */
        branding?: Settings.Branding;
        /** Settings specific to the account's use of the Card Issuing product. */
        card_issuing?: Settings.CardIssuing;
        /** Settings specific to card charging on the account. */
        card_payments?: Settings.CardPayments;
        /** Settings specific to the account's use of Invoices. */
        invoices?: Settings.Invoices;
        /** Settings that apply across payment methods for charging on the account. */
        payments?: Settings.Payments;
        /** Settings specific to the account's payouts. */
        payouts?: Settings.Payouts;
        /** Settings specific to the account's Treasury FinancialAccounts. */
        treasury?: Settings.Treasury;
    }

    export namespace Settings {
        /**
         * Settings specific to Bacs Direct Debit payments.
         */
        export interface BacsDebitPayments {
            /** The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. If you don't set the display name before requesting Bacs capability, it's automatically set as "Stripe" and the account is onboarded to Stripe branding, which is free. */
            display_name?: string;
        }

        /**
         * Settings used to apply the account's branding to email receipts, invoices, Checkout, and other products.
         */
        export interface Branding {
            /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
            icon?: string;
            /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
            logo?: string;
            /** A CSS hex color value representing the primary branding color for this account. */
            primary_color?: string;
            /** A CSS hex color value representing the secondary branding color for this account. */
            secondary_color?: string;
        }

        /**
         * Settings specific to the account's use of the Card Issuing product.
         */
        export interface CardIssuing {
            /** Details on the account's acceptance of the [Stripe Issuing Terms and Disclosures](/issuing/connect/tos_acceptance). */
            tos_acceptance?: CardIssuing.TosAcceptance;
        }

        export namespace CardIssuing {
            /**
             * Details on the account's acceptance of the [Stripe Issuing Terms and Disclosures](/issuing/connect/tos_acceptance).
             */
            export interface TosAcceptance {
                /** The Unix timestamp marking when the account representative accepted the service agreement. */
                date?: number;
                /** The IP address from which the account representative accepted the service agreement. */
                ip?: string;
                /** The user agent of the browser from which the account representative accepted the service agreement. */
                user_agent?: TosAcceptance.UserAgent;
            }

            export namespace TosAcceptance {
                /**
                 * The user agent of the browser from which the account representative accepted the service agreement.
                 */
                export type UserAgent = string | "";
            }
        }

        /**
         * Settings specific to card charging on the account.
         */
        export interface CardPayments {
            /** Automatically declines certain charge types regardless of whether the card issuer accepted or declined the charge. */
            decline_on?: CardPayments.DeclineOn;
            /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
            statement_descriptor_prefix?: string;
            /** The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion. */
            statement_descriptor_prefix_kana?: CardPayments.StatementDescriptorPrefixKana;
            /** The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion. */
            statement_descriptor_prefix_kanji?: CardPayments.StatementDescriptorPrefixKanji;
        }

        export namespace CardPayments {
            /**
             * Automatically declines certain charge types regardless of whether the card issuer accepted or declined the charge.
             */
            export interface DeclineOn {
                /** Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
                avs_failure?: boolean;
                /** Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
                cvc_failure?: boolean;
            }

            /**
             * The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion.
             */
            export type StatementDescriptorPrefixKana = string | "";
            /**
             * The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion.
             */
            export type StatementDescriptorPrefixKanji = string | "";
        }

        /**
         * Settings specific to the account's use of Invoices.
         */
        export interface Invoices {
            /** The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized. */
            default_account_tax_ids?: Invoices.DefaultAccountTaxIds;
        }

        export namespace Invoices {
            /**
             * The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized.
             */
            export type DefaultAccountTaxIds = string[] | "";
        }

        /**
         * Settings that apply across payment methods for charging on the account.
         */
        export interface Payments {
            /** The default text that appears on statements for non-card charges outside of Japan. For card charges, if you don't set a `statement_descriptor_prefix`, this text is also used as the statement descriptor prefix. In that case, if concatenating the statement descriptor suffix causes the combined statement descriptor to exceed 22 characters, we truncate the `statement_descriptor` text to limit the full descriptor to 22 characters. For more information about statement descriptors and their requirements, see the [account settings documentation](https://docs.stripe.com/get-started/account/statement-descriptors). */
            statement_descriptor?: string;
            /** The Kana variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
            statement_descriptor_kana?: string;
            /** The Kanji variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors). */
            statement_descriptor_kanji?: string;
        }

        /**
         * Settings specific to the account's payouts.
         */
        export interface Payouts {
            /** A Boolean indicating whether Stripe should try to reclaim negative balances from an attached bank account. For details, see [Understanding Connect Account Balances](/connect/account-balances). */
            debit_negative_balances?: boolean;
            /** Details on when funds from charges are available, and when they are paid out to an external account. For details, see our [Setting Bank and Debit Card Payouts](/connect/bank-transfers#payout-information) documentation. */
            schedule?: Payouts.Schedule;
            /** The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
            statement_descriptor?: string;
        }

        export namespace Payouts {
            /**
             * Details on when funds from charges are available, and when they are paid out to an external account. For details, see our [Setting Bank and Debit Card Payouts](/connect/bank-transfers#payout-information) documentation.
             */
            export interface Schedule {
                /** The number of days charge funds are held before being paid out. May also be set to `minimum`, representing the lowest available value for the account country. Default is `minimum`. The `delay_days` parameter remains at the last configured value if `interval` is `manual`. [Learn more about controlling payout delay days](/connect/manage-payout-schedule). */
                delay_days?: Schedule.DelayDays;
                /** How frequently available funds are paid out. One of: `daily`, `manual`, `weekly`, or `monthly`. Default is `daily`. */
                interval?: Schedule.Interval;
                /** The day of the month when available funds are paid out, specified as a number between 1--31. Payouts nominally scheduled between the 29th and 31st of the month are instead sent on the last day of a shorter month. Required and applicable only if `interval` is `monthly`. */
                monthly_anchor?: number;
                /** The day of the week when available funds are paid out, specified as `monday`, `tuesday`, etc. (required and applicable only if `interval` is `weekly`.) */
                weekly_anchor?: Schedule.WeeklyAnchor;
            }

            export namespace Schedule {
                /**
                 * The number of days charge funds are held before being paid out. May also be set to `minimum`, representing the lowest available value for the account country. Default is `minimum`. The `delay_days` parameter remains at the last configured value if `interval` is `manual`. [Learn more about controlling payout delay days](/connect/manage-payout-schedule).
                 */
                export type DelayDays = "minimum" | number;
                /**
                 * How frequently available funds are paid out. One of: `daily`, `manual`, `weekly`, or `monthly`. Default is `daily`.
                 */
                export type Interval = "daily" | "manual" | "monthly" | "weekly";
                export const Interval = {
                    Daily: "daily",
                    Manual: "manual",
                    Monthly: "monthly",
                    Weekly: "weekly",
                } as const;
                /**
                 * The day of the week when available funds are paid out, specified as `monday`, `tuesday`, etc. (required and applicable only if `interval` is `weekly`.)
                 */
                export type WeeklyAnchor =
                    | "friday"
                    | "monday"
                    | "saturday"
                    | "sunday"
                    | "thursday"
                    | "tuesday"
                    | "wednesday";
                export const WeeklyAnchor = {
                    Friday: "friday",
                    Monday: "monday",
                    Saturday: "saturday",
                    Sunday: "sunday",
                    Thursday: "thursday",
                    Tuesday: "tuesday",
                    Wednesday: "wednesday",
                } as const;
            }
        }

        /**
         * Settings specific to the account's Treasury FinancialAccounts.
         */
        export interface Treasury {
            /** Details on the account's acceptance of the Stripe Treasury Services Agreement. */
            tos_acceptance?: Treasury.TosAcceptance;
        }

        export namespace Treasury {
            /**
             * Details on the account's acceptance of the Stripe Treasury Services Agreement.
             */
            export interface TosAcceptance {
                /** The Unix timestamp marking when the account representative accepted the service agreement. */
                date?: number;
                /** The IP address from which the account representative accepted the service agreement. */
                ip?: string;
                /** The user agent of the browser from which the account representative accepted the service agreement. */
                user_agent?: TosAcceptance.UserAgent;
            }

            export namespace TosAcceptance {
                /**
                 * The user agent of the browser from which the account representative accepted the service agreement.
                 */
                export type UserAgent = string | "";
            }
        }
    }

    /**
     * Details on the account's acceptance of the [Stripe Services Agreement](/connect/updating-accounts#tos-acceptance). This property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. This property defaults to a `full` service agreement when empty.
     */
    export interface TosAcceptance {
        /** The Unix timestamp marking when the account representative accepted their service agreement. */
        date?: number;
        /** The IP address from which the account representative accepted their service agreement. */
        ip?: string;
        /** The user's service agreement type. */
        service_agreement?: string;
        /** The user agent of the browser from which the account representative accepted their service agreement. */
        user_agent?: string;
    }
}
