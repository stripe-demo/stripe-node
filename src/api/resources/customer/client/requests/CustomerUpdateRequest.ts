/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface CustomerUpdateRequest {
    /** The customer's address. */
    address?: CustomerUpdateRequest.Address;
    /** An integer amount in cents (or local equivalent) that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
    balance?: number;
    /** Balance information and default balance settings for this customer. */
    cash_balance?: CustomerUpdateRequest.CashBalance;
    coupon?: string;
    /**
     * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.
     *
     * Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.
     *
     * If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
     */
    default_source?: string;
    /** An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
    description?: string;
    /** Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
    email?: string;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** The prefix for the customer used to generate unique invoice numbers. Must be 3â€“12 uppercase letters or numbers. */
    invoice_prefix?: string;
    /** Default invoice settings for this customer. */
    invoice_settings?: CustomerUpdateRequest.InvoiceSettings;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: CustomerUpdateRequest.Metadata;
    /** The customer's full name or business name. */
    name?: string;
    /** The sequence to be used on the customer's next invoice. Defaults to 1. */
    next_invoice_sequence?: number;
    /** The customer's phone number. */
    phone?: string;
    /** Customer's preferred languages, ordered by preference. */
    preferred_locales?: string[];
    /** The ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount. */
    promotion_code?: string;
    /** The customer's shipping information. Appears on invoices emailed to this customer. */
    shipping?: CustomerUpdateRequest.Shipping;
    source?: string;
    /** Tax details about the customer. */
    tax?: CustomerUpdateRequest.Tax;
    /** The customer's tax exemption. One of `none`, `exempt`, or `reverse`. */
    tax_exempt?: CustomerUpdateRequest.TaxExempt;
    validate?: boolean;
}

export namespace CustomerUpdateRequest {
    /**
     * The customer's address.
     */
    export type Address =
        | {
              city?: string | undefined;
              country?: string | undefined;
              line1?: string | undefined;
              line2?: string | undefined;
              postal_code?: string | undefined;
              state?: string | undefined;
          }
        | "";

    /**
     * Balance information and default balance settings for this customer.
     */
    export interface CashBalance {
        /**
         * Settings controlling the behavior of the customer's cash balance,
         * such as reconciliation of funds received.
         */
        settings?: CashBalance.Settings;
    }

    export namespace CashBalance {
        /**
         * Settings controlling the behavior of the customer's cash balance,
         * such as reconciliation of funds received.
         */
        export interface Settings {
            /** Controls how funds transferred by the customer are applied to payment intents and invoices. Valid options are `automatic`, `manual`, or `merchant_default`. For more information about these reconciliation modes, see [Reconciliation](https://stripe.com/docs/payments/customer-balance/reconciliation). */
            reconciliation_mode?: Settings.ReconciliationMode;
        }

        export namespace Settings {
            /**
             * Controls how funds transferred by the customer are applied to payment intents and invoices. Valid options are `automatic`, `manual`, or `merchant_default`. For more information about these reconciliation modes, see [Reconciliation](https://stripe.com/docs/payments/customer-balance/reconciliation).
             */
            export type ReconciliationMode = "automatic" | "manual" | "merchant_default";
            export const ReconciliationMode = {
                Automatic: "automatic",
                Manual: "manual",
                MerchantDefault: "merchant_default",
            } as const;
        }
    }

    /**
     * Default invoice settings for this customer.
     */
    export interface InvoiceSettings {
        /** The list of up to 4 default custom fields to be displayed on invoices for this customer. When updating, pass an empty string to remove previously-defined fields. */
        custom_fields?: InvoiceSettings.CustomFields;
        /** ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
        default_payment_method?: string;
        /** Default footer to be displayed on invoices for this customer. */
        footer?: string;
        /** Default options for invoice PDF rendering for this customer. */
        rendering_options?: InvoiceSettings.RenderingOptions;
    }

    export namespace InvoiceSettings {
        /**
         * The list of up to 4 default custom fields to be displayed on invoices for this customer. When updating, pass an empty string to remove previously-defined fields.
         */
        export type CustomFields =
            | {
                  name: string;
                  value: string;
              }[]
            | "";
        /**
         * Default options for invoice PDF rendering for this customer.
         */
        export type RenderingOptions =
            | {
                  amount_tax_display?: ("" | "exclude_tax" | "include_inclusive_tax") | undefined;
                  template?: string | undefined;
              }
            | "";
    }

    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type Metadata = Record<string, string> | "";
    /**
     * The customer's shipping information. Appears on invoices emailed to this customer.
     */
    export type Shipping =
        | {
              address: {
                  city?: string | undefined;
                  country?: string | undefined;
                  line1?: string | undefined;
                  line2?: string | undefined;
                  postal_code?: string | undefined;
                  state?: string | undefined;
              };
              name: string;
              phone?: string | undefined;
          }
        | "";

    /**
     * Tax details about the customer.
     */
    export interface Tax {
        /** A recent IP address of the customer used for tax reporting and tax location inference. Stripe recommends updating the IP address when a new PaymentMethod is attached or the address field on the customer is updated. We recommend against updating this field more frequently since it could result in unexpected tax location/reporting outcomes. */
        ip_address?: Tax.IpAddress;
        /** A flag that indicates when Stripe should validate the customer tax location. Defaults to `auto`. */
        validate_location?: Tax.ValidateLocation;
    }

    export namespace Tax {
        /**
         * A recent IP address of the customer used for tax reporting and tax location inference. Stripe recommends updating the IP address when a new PaymentMethod is attached or the address field on the customer is updated. We recommend against updating this field more frequently since it could result in unexpected tax location/reporting outcomes.
         */
        export type IpAddress = string | "";
        /**
         * A flag that indicates when Stripe should validate the customer tax location. Defaults to `auto`.
         */
        export type ValidateLocation = "auto" | "deferred" | "immediately";
        export const ValidateLocation = {
            Auto: "auto",
            Deferred: "deferred",
            Immediately: "immediately",
        } as const;
    }

    /**
     * The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
     */
    export type TaxExempt = "" | "exempt" | "none" | "reverse";
    export const TaxExempt = {
        Empty: "",
        Exempt: "exempt",
        None: "none",
        Reverse: "reverse",
    } as const;
}
