/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface QuoteCreateRequest {
    /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field. */
    application_fee_amount?: QuoteCreateRequest.ApplicationFeeAmount;
    /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
    application_fee_percent?: QuoteCreateRequest.ApplicationFeePercent;
    /** Settings for automatic tax lookup for this quote and resulting invoices and subscriptions. */
    automatic_tax?: QuoteCreateRequest.AutomaticTax;
    /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`. */
    collection_method?: QuoteCreateRequest.CollectionMethod;
    /** The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
    customer?: string;
    /** The tax rates that will apply to any line item that does not have `tax_rates` set. */
    default_tax_rates?: QuoteCreateRequest.DefaultTaxRates;
    /** A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
    description?: QuoteCreateRequest.Description;
    /** The discounts applied to the quote. */
    discounts?: QuoteCreateRequest.Discounts;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
    expires_at?: number;
    /** A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
    footer?: QuoteCreateRequest.Footer;
    /** Clone an existing quote. The new quote will be created in `status=draft`. When using this parameter, you cannot specify any other parameters except for `expires_at`. */
    from_quote?: QuoteCreateRequest.FromQuote;
    /** A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
    header?: QuoteCreateRequest.Header;
    /** All invoices will be billed using the specified settings. */
    invoice_settings?: QuoteCreateRequest.InvoiceSettings;
    /** A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost. */
    line_items?: QuoteCreateRequest.LineItems.Item[];
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: Record<string, string>;
    /** The account on behalf of which to charge. */
    on_behalf_of?: QuoteCreateRequest.OnBehalfOf;
    /** When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created. */
    subscription_data?: QuoteCreateRequest.SubscriptionData;
    /** ID of the test clock to attach to the quote. */
    test_clock?: string;
    /** The data with which to automatically create a Transfer for each of the invoices. */
    transfer_data?: QuoteCreateRequest.TransferData;
}

export namespace QuoteCreateRequest {
    /**
     * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field.
     */
    export type ApplicationFeeAmount = number | "";
    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.
     */
    export type ApplicationFeePercent = number | "";

    /**
     * Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
     */
    export interface AutomaticTax {
        /** Controls whether Stripe will automatically compute tax on the resulting invoices or subscriptions as well as the quote itself. */
        enabled: boolean;
        /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
        liability?: AutomaticTax.Liability;
    }

    export namespace AutomaticTax {
        /**
         * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
         */
        export interface Liability {
            /** The connected account being referenced when `type` is `account`. */
            account?: string;
            /** Type of the account referenced in the request. */
            type: Liability.Type;
        }

        export namespace Liability {
            /**
             * Type of the account referenced in the request.
             */
            export type Type = "account" | "self";
            export const Type = {
                Account: "account",
                Self: "self",
            } as const;
        }
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
     */
    export type CollectionMethod = "charge_automatically" | "send_invoice";
    export const CollectionMethod = {
        ChargeAutomatically: "charge_automatically",
        SendInvoice: "send_invoice",
    } as const;
    /**
     * The tax rates that will apply to any line item that does not have `tax_rates` set.
     */
    export type DefaultTaxRates = string[] | "";
    /**
     * A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
     */
    export type Description = string | "";
    /**
     * The discounts applied to the quote.
     */
    export type Discounts =
        | {
              coupon?: string | undefined;
              discount?: string | undefined;
              promotion_code?: string | undefined;
          }[]
        | "";
    /**
     * A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
     */
    export type Footer = string | "";

    /**
     * Clone an existing quote. The new quote will be created in `status=draft`. When using this parameter, you cannot specify any other parameters except for `expires_at`.
     */
    export interface FromQuote {
        /** Whether this quote is a revision of the previous quote. */
        is_revision?: boolean;
        /** The `id` of the quote that will be cloned. */
        quote: string;
    }

    /**
     * A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
     */
    export type Header = string | "";

    /**
     * All invoices will be billed using the specified settings.
     */
    export interface InvoiceSettings {
        /** Number of days within which a customer must pay the invoice generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`. */
        days_until_due?: number;
        /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
        issuer?: InvoiceSettings.Issuer;
    }

    export namespace InvoiceSettings {
        /**
         * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
         */
        export interface Issuer {
            /** The connected account being referenced when `type` is `account`. */
            account?: string;
            /** Type of the account referenced in the request. */
            type: Issuer.Type;
        }

        export namespace Issuer {
            /**
             * Type of the account referenced in the request.
             */
            export type Type = "account" | "self";
            export const Type = {
                Account: "account",
                Self: "self",
            } as const;
        }
    }

    export type LineItems = LineItems.Item[];

    export namespace LineItems {
        export interface Item {
            /** The discounts applied to this line item. */
            discounts?: Item.Discounts;
            /** The ID of the price object. One of `price` or `price_data` is required. */
            price?: string;
            /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required. */
            price_data?: Item.PriceData;
            /** The quantity of the line item. */
            quantity?: number;
            /** The tax rates which apply to the line item. When set, the `default_tax_rates` on the quote do not apply to this line item. */
            tax_rates?: Item.TaxRates;
        }

        export namespace Item {
            /**
             * The discounts applied to this line item.
             */
            export type Discounts =
                | {
                      coupon?: string | undefined;
                      discount?: string | undefined;
                      promotion_code?: string | undefined;
                  }[]
                | "";

            /**
             * Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
             */
            export interface PriceData {
                /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                currency: string;
                /** The ID of the product that this price will belong to. */
                product: string;
                /** The recurring components of a price such as `interval` and `interval_count`. */
                recurring?: PriceData.Recurring;
                /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
                tax_behavior?: PriceData.TaxBehavior;
                /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. */
                unit_amount?: number;
                /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
                unit_amount_decimal?: string;
            }

            export namespace PriceData {
                /**
                 * The recurring components of a price such as `interval` and `interval_count`.
                 */
                export interface Recurring {
                    /** Specifies billing frequency. Either `day`, `week`, `month` or `year`. */
                    interval: Recurring.Interval;
                    /** The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks). */
                    interval_count?: number;
                }

                export namespace Recurring {
                    /**
                     * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
                     */
                    export type Interval = "day" | "month" | "week" | "year";
                    export const Interval = {
                        Day: "day",
                        Month: "month",
                        Week: "week",
                        Year: "year",
                    } as const;
                }

                /**
                 * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                 */
                export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
                export const TaxBehavior = {
                    Exclusive: "exclusive",
                    Inclusive: "inclusive",
                    Unspecified: "unspecified",
                } as const;
            }

            /**
             * The tax rates which apply to the line item. When set, the `default_tax_rates` on the quote do not apply to this line item.
             */
            export type TaxRates = string[] | "";
        }
    }

    /**
     * The account on behalf of which to charge.
     */
    export type OnBehalfOf = string | "";

    /**
     * When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.
     */
    export interface SubscriptionData {
        /** The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
        description?: string;
        /** When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. When updating a subscription, the date of which the subscription will be updated using a subscription schedule. The special value `current_period_end` can be provided to update a subscription at the end of its current period. The `effective_date` is ignored if it is in the past when the quote is accepted. */
        effective_date?: SubscriptionData.EffectiveDate;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values. */
        metadata?: Record<string, string>;
        /** Integer representing the number of trial period days before the customer is charged for the first time. */
        trial_period_days?: SubscriptionData.TrialPeriodDays;
    }

    export namespace SubscriptionData {
        /**
         * When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. When updating a subscription, the date of which the subscription will be updated using a subscription schedule. The special value `current_period_end` can be provided to update a subscription at the end of its current period. The `effective_date` is ignored if it is in the past when the quote is accepted.
         */
        export type EffectiveDate = "current_period_end" | number | "";
        /**
         * Integer representing the number of trial period days before the customer is charged for the first time.
         */
        export type TrialPeriodDays = number | "";
    }

    /**
     * The data with which to automatically create a Transfer for each of the invoices.
     */
    export type TransferData =
        | {
              amount?: number | undefined;
              amount_percent?: number | undefined;
              destination: string;
          }
        | "";
}
