/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface SubscriptionUpdateRequest {
    /** A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items. */
    add_invoice_items?: SubscriptionUpdateRequest.AddInvoiceItems.Item[];
    /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
    application_fee_percent?: SubscriptionUpdateRequest.ApplicationFeePercent;
    /** Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed. */
    automatic_tax?: SubscriptionUpdateRequest.AutomaticTax;
    /** Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
    billing_cycle_anchor?: SubscriptionUpdateRequest.BillingCycleAnchor;
    /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
    billing_thresholds?: SubscriptionUpdateRequest.BillingThresholds;
    /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
    cancel_at?: SubscriptionUpdateRequest.CancelAt;
    /** Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. */
    cancel_at_period_end?: boolean;
    /** Details about why this subscription was cancelled */
    cancellation_details?: SubscriptionUpdateRequest.CancellationDetails;
    /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`. */
    collection_method?: SubscriptionUpdateRequest.CollectionMethod;
    /** The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
    coupon?: string;
    /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
    days_until_due?: number;
    /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
    default_payment_method?: string;
    /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
    default_source?: SubscriptionUpdateRequest.DefaultSource;
    /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
    default_tax_rates?: SubscriptionUpdateRequest.DefaultTaxRates;
    /** The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
    description?: SubscriptionUpdateRequest.Description;
    /** The coupons to redeem into discounts for the subscription. If not specified or empty, inherits the discount from the subscription's customer. */
    discounts?: SubscriptionUpdateRequest.Discounts;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** All invoices will be billed using the specified settings. */
    invoice_settings?: SubscriptionUpdateRequest.InvoiceSettings;
    /** A list of up to 20 subscription items, each with an attached price. */
    items?: SubscriptionUpdateRequest.Items.Item[];
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: SubscriptionUpdateRequest.Metadata;
    /** Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session). */
    off_session?: boolean;
    /** The account on behalf of which to charge, for each of the subscription's invoices. */
    on_behalf_of?: SubscriptionUpdateRequest.OnBehalfOf;
    /** If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment). */
    pause_collection?: SubscriptionUpdateRequest.PauseCollection;
    /**
     * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
     *
     * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscriptionâ€™s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
     *
     * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
     *
     * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
     */
    payment_behavior?: SubscriptionUpdateRequest.PaymentBehavior;
    /** Payment settings to pass to invoices created by the subscription. */
    payment_settings?: SubscriptionUpdateRequest.PaymentSettings;
    /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
    pending_invoice_item_interval?: SubscriptionUpdateRequest.PendingInvoiceItemInterval;
    /** The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
    promotion_code?: string;
    /** Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. */
    proration_behavior?: SubscriptionUpdateRequest.ProrationBehavior;
    /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#upcoming_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations. */
    proration_date?: number;
    /** If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value. */
    transfer_data?: SubscriptionUpdateRequest.TransferData;
    /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
    trial_end?: SubscriptionUpdateRequest.TrialEnd;
    /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
    trial_from_plan?: boolean;
    /** Settings related to subscription trials. */
    trial_settings?: SubscriptionUpdateRequest.TrialSettings;
}

export namespace SubscriptionUpdateRequest {
    export type AddInvoiceItems = AddInvoiceItems.Item[];

    export namespace AddInvoiceItems {
        export interface Item {
            /** The coupons to redeem into discounts for the item. */
            discounts?: Item.Discounts.Item[];
            /** The ID of the price object. One of `price` or `price_data` is required. */
            price?: string;
            /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required. */
            price_data?: Item.PriceData;
            /** Quantity for this item. Defaults to 1. */
            quantity?: number;
            /** The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
            tax_rates?: Item.TaxRates;
        }

        export namespace Item {
            export type Discounts = Discounts.Item[];

            export namespace Discounts {
                export interface Item {
                    /** ID of the coupon to create a new discount for. */
                    coupon?: string;
                    /** ID of an existing discount on the object (or one of its ancestors) to reuse. */
                    discount?: string;
                    /** ID of the promotion code to create a new discount for. */
                    promotion_code?: string;
                }
            }

            /**
             * Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
             */
            export interface PriceData {
                /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                currency: string;
                /** The ID of the product that this price will belong to. */
                product: string;
                /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
                tax_behavior?: PriceData.TaxBehavior;
                /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge or a negative integer representing the amount to credit to the customer. */
                unit_amount?: number;
                /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
                unit_amount_decimal?: string;
            }

            export namespace PriceData {
                /**
                 * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                 */
                export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
                export const TaxBehavior = {
                    Exclusive: "exclusive",
                    Inclusive: "inclusive",
                    Unspecified: "unspecified",
                } as const;
            }

            /**
             * The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
             */
            export type TaxRates = string[] | "";
        }
    }

    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
     */
    export type ApplicationFeePercent = number | "";

    /**
     * Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed.
     */
    export interface AutomaticTax {
        /** Enabled automatic tax calculation which will automatically compute tax rates on all invoices generated by the subscription. */
        enabled: boolean;
        /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
        liability?: AutomaticTax.Liability;
    }

    export namespace AutomaticTax {
        /**
         * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
         */
        export interface Liability {
            /** The connected account being referenced when `type` is `account`. */
            account?: string;
            /** Type of the account referenced in the request. */
            type: Liability.Type;
        }

        export namespace Liability {
            /**
             * Type of the account referenced in the request.
             */
            export type Type = "account" | "self";
            export const Type = {
                Account: "account",
                Self: "self",
            } as const;
        }
    }

    /**
     * Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
     */
    export type BillingCycleAnchor = "now" | "unchanged";
    export const BillingCycleAnchor = {
        Now: "now",
        Unchanged: "unchanged",
    } as const;
    /**
     * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
     */
    export type BillingThresholds =
        | {
              amount_gte?: number | undefined;
              reset_billing_cycle_anchor?: boolean | undefined;
          }
        | "";
    /**
     * A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
     */
    export type CancelAt = number | "";

    /**
     * Details about why this subscription was cancelled
     */
    export interface CancellationDetails {
        /** Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user. */
        comment?: CancellationDetails.Comment;
        /** The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user. */
        feedback?: CancellationDetails.Feedback;
    }

    export namespace CancellationDetails {
        /**
         * Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user.
         */
        export type Comment = string | "";
        /**
         * The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user.
         */
        export type Feedback =
            | ""
            | "customer_service"
            | "low_quality"
            | "missing_features"
            | "other"
            | "switched_service"
            | "too_complex"
            | "too_expensive"
            | "unused";
        export const Feedback = {
            Empty: "",
            CustomerService: "customer_service",
            LowQuality: "low_quality",
            MissingFeatures: "missing_features",
            Other: "other",
            SwitchedService: "switched_service",
            TooComplex: "too_complex",
            TooExpensive: "too_expensive",
            Unused: "unused",
        } as const;
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
     */
    export type CollectionMethod = "charge_automatically" | "send_invoice";
    export const CollectionMethod = {
        ChargeAutomatically: "charge_automatically",
        SendInvoice: "send_invoice",
    } as const;
    /**
     * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
     */
    export type DefaultSource = string | "";
    /**
     * The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates.
     */
    export type DefaultTaxRates = string[] | "";
    /**
     * The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
     */
    export type Description = string | "";
    /**
     * The coupons to redeem into discounts for the subscription. If not specified or empty, inherits the discount from the subscription's customer.
     */
    export type Discounts =
        | {
              coupon?: string | undefined;
              discount?: string | undefined;
              promotion_code?: string | undefined;
          }[]
        | "";

    /**
     * All invoices will be billed using the specified settings.
     */
    export interface InvoiceSettings {
        /** The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription. */
        account_tax_ids?: InvoiceSettings.AccountTaxIds;
        /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
        issuer?: InvoiceSettings.Issuer;
    }

    export namespace InvoiceSettings {
        /**
         * The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription.
         */
        export type AccountTaxIds = string[] | "";

        /**
         * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
         */
        export interface Issuer {
            /** The connected account being referenced when `type` is `account`. */
            account?: string;
            /** Type of the account referenced in the request. */
            type: Issuer.Type;
        }

        export namespace Issuer {
            /**
             * Type of the account referenced in the request.
             */
            export type Type = "account" | "self";
            export const Type = {
                Account: "account",
                Self: "self",
            } as const;
        }
    }

    export type Items = Items.Item[];

    export namespace Items {
        export interface Item {
            /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
            billing_thresholds?: Item.BillingThresholds;
            /** Delete all usage for a given subscription item. You must pass this when deleting a usage records subscription item. `clear_usage` has no effect if the plan has a billing meter attached. */
            clear_usage?: boolean;
            /** A flag that, if set to `true`, will delete the specified item. */
            deleted?: boolean;
            /** The coupons to redeem into discounts for the subscription item. */
            discounts?: Item.Discounts;
            /** Subscription item to update. */
            id?: string;
            /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
            metadata?: Item.Metadata;
            /** Plan ID for this item, as a string. */
            plan?: string;
            /** The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item's price, `quantity` is set to 1 unless a `quantity` parameter is provided. */
            price?: string;
            /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required. */
            price_data?: Item.PriceData;
            /** Quantity for this item. */
            quantity?: number;
            /** A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
            tax_rates?: Item.TaxRates;
        }

        export namespace Item {
            /**
             * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds.
             */
            export type BillingThresholds =
                | {
                      usage_gte: number;
                  }
                | "";
            /**
             * The coupons to redeem into discounts for the subscription item.
             */
            export type Discounts =
                | {
                      coupon?: string | undefined;
                      discount?: string | undefined;
                      promotion_code?: string | undefined;
                  }[]
                | "";
            /**
             * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
             */
            export type Metadata = Record<string, string> | "";

            /**
             * Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
             */
            export interface PriceData {
                /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                currency: string;
                /** The ID of the product that this price will belong to. */
                product: string;
                /** The recurring components of a price such as `interval` and `interval_count`. */
                recurring: PriceData.Recurring;
                /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
                tax_behavior?: PriceData.TaxBehavior;
                /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. */
                unit_amount?: number;
                /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
                unit_amount_decimal?: string;
            }

            export namespace PriceData {
                /**
                 * The recurring components of a price such as `interval` and `interval_count`.
                 */
                export interface Recurring {
                    /** Specifies billing frequency. Either `day`, `week`, `month` or `year`. */
                    interval: Recurring.Interval;
                    /** The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks). */
                    interval_count?: number;
                }

                export namespace Recurring {
                    /**
                     * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
                     */
                    export type Interval = "day" | "month" | "week" | "year";
                    export const Interval = {
                        Day: "day",
                        Month: "month",
                        Week: "week",
                        Year: "year",
                    } as const;
                }

                /**
                 * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                 */
                export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
                export const TaxBehavior = {
                    Exclusive: "exclusive",
                    Inclusive: "inclusive",
                    Unspecified: "unspecified",
                } as const;
            }

            /**
             * A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates.
             */
            export type TaxRates = string[] | "";
        }
    }

    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type Metadata = Record<string, string> | "";
    /**
     * The account on behalf of which to charge, for each of the subscription's invoices.
     */
    export type OnBehalfOf = string | "";
    /**
     * If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment).
     */
    export type PauseCollection =
        | {
              behavior: "keep_as_draft" | "mark_uncollectible" | "void";
              resumes_at?: number | undefined;
          }
        | "";
    /**
     * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
     *
     * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscriptionâ€™s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
     *
     * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
     *
     * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
     */
    export type PaymentBehavior =
        | "allow_incomplete"
        | "default_incomplete"
        | "error_if_incomplete"
        | "pending_if_incomplete";
    export const PaymentBehavior = {
        AllowIncomplete: "allow_incomplete",
        DefaultIncomplete: "default_incomplete",
        ErrorIfIncomplete: "error_if_incomplete",
        PendingIfIncomplete: "pending_if_incomplete",
    } as const;

    /**
     * Payment settings to pass to invoices created by the subscription.
     */
    export interface PaymentSettings {
        /** Payment-method-specific configuration to provide to invoices created by the subscription. */
        payment_method_options?: PaymentSettings.PaymentMethodOptions;
        /** The list of payment method types (e.g. card) to provide to the invoiceâ€™s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). Should not be specified with payment_method_configuration */
        payment_method_types?: PaymentSettings.PaymentMethodTypes;
        /** Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off` if unspecified. */
        save_default_payment_method?: PaymentSettings.SaveDefaultPaymentMethod;
    }

    export namespace PaymentSettings {
        /**
         * Payment-method-specific configuration to provide to invoices created by the subscription.
         */
        export interface PaymentMethodOptions {
            /** This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoiceâ€™s PaymentIntent. */
            acss_debit?: PaymentMethodOptions.AcssDebit;
            /** This sub-hash contains details about the Bancontact payment method options to pass to the invoiceâ€™s PaymentIntent. */
            bancontact?: PaymentMethodOptions.Bancontact;
            /** This sub-hash contains details about the Card payment method options to pass to the invoiceâ€™s PaymentIntent. */
            card?: PaymentMethodOptions.Card;
            /** This sub-hash contains details about the Bank transfer payment method options to pass to the invoiceâ€™s PaymentIntent. */
            customer_balance?: PaymentMethodOptions.CustomerBalance;
            /** This sub-hash contains details about the Konbini payment method options to pass to the invoiceâ€™s PaymentIntent. */
            konbini?: PaymentMethodOptions.Konbini;
            /** This sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoiceâ€™s PaymentIntent. */
            sepa_debit?: PaymentMethodOptions.SepaDebit;
            /** This sub-hash contains details about the ACH direct debit payment method options to pass to the invoiceâ€™s PaymentIntent. */
            us_bank_account?: PaymentMethodOptions.UsBankAccount;
        }

        export namespace PaymentMethodOptions {
            /**
             * This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type AcssDebit =
                | {
                      mandate_options?:
                          | {
                                transaction_type?: ("business" | "personal") | undefined;
                            }
                          | undefined;
                      verification_method?: ("automatic" | "instant" | "microdeposits") | undefined;
                  }
                | "";
            /**
             * This sub-hash contains details about the Bancontact payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type Bancontact =
                | {
                      preferred_language?: ("de" | "en" | "fr" | "nl") | undefined;
                  }
                | "";
            /**
             * This sub-hash contains details about the Card payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type Card =
                | {
                      mandate_options?:
                          | {
                                amount?: number | undefined;
                                amount_type?: ("fixed" | "maximum") | undefined;
                                description?: string | undefined;
                            }
                          | undefined;
                      network?:
                          | (
                                | "amex"
                                | "cartes_bancaires"
                                | "diners"
                                | "discover"
                                | "eftpos_au"
                                | "girocard"
                                | "interac"
                                | "jcb"
                                | "link"
                                | "mastercard"
                                | "unionpay"
                                | "unknown"
                                | "visa"
                            )
                          | undefined;
                      request_three_d_secure?: ("any" | "automatic" | "challenge") | undefined;
                  }
                | "";
            /**
             * This sub-hash contains details about the Bank transfer payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type CustomerBalance =
                | {
                      bank_transfer?:
                          | {
                                eu_bank_transfer?:
                                    | {
                                          country: string;
                                      }
                                    | undefined;
                                type?: string | undefined;
                            }
                          | undefined;
                      funding_type?: string | undefined;
                  }
                | "";
            /**
             * This sub-hash contains details about the Konbini payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type Konbini = {} | "";
            /**
             * This sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type SepaDebit = {} | "";
            /**
             * This sub-hash contains details about the ACH direct debit payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type UsBankAccount =
                | {
                      financial_connections?:
                          | {
                                filters?:
                                    | {
                                          account_subcategories?: ("checking" | "savings")[] | undefined;
                                      }
                                    | undefined;
                                permissions?:
                                    | ("balances" | "ownership" | "payment_method" | "transactions")[]
                                    | undefined;
                                prefetch?: ("balances" | "ownership" | "transactions")[] | undefined;
                            }
                          | undefined;
                      verification_method?: ("automatic" | "instant" | "microdeposits") | undefined;
                  }
                | "";
        }

        /**
         * The list of payment method types (e.g. card) to provide to the invoiceâ€™s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). Should not be specified with payment_method_configuration
         */
        export type PaymentMethodTypes =
            | (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "amazon_pay"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "cashapp"
                  | "customer_balance"
                  | "eps"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "jp_credit_transfer"
                  | "kakao_pay"
                  | "konbini"
                  | "kr_card"
                  | "link"
                  | "multibanco"
                  | "naver_pay"
                  | "p24"
                  | "payco"
                  | "paynow"
                  | "paypal"
                  | "promptpay"
                  | "revolut_pay"
                  | "sepa_credit_transfer"
                  | "sepa_debit"
                  | "sofort"
                  | "swish"
                  | "us_bank_account"
                  | "wechat_pay"
              )[]
            | "";
        /**
         * Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off` if unspecified.
         */
        export type SaveDefaultPaymentMethod = "off" | "on_subscription";
        export const SaveDefaultPaymentMethod = {
            Off: "off",
            OnSubscription: "on_subscription",
        } as const;
    }

    /**
     * Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
     */
    export type PendingInvoiceItemInterval =
        | {
              interval: "day" | "month" | "week" | "year";
              interval_count?: number | undefined;
          }
        | "";
    /**
     * Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
     */
    export type ProrationBehavior = "always_invoice" | "create_prorations" | "none";
    export const ProrationBehavior = {
        AlwaysInvoice: "always_invoice",
        CreateProrations: "create_prorations",
        None: "none",
    } as const;
    /**
     * If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value.
     */
    export type TransferData =
        | {
              amount_percent?: number | undefined;
              destination: string;
          }
        | "";
    /**
     * Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`.
     */
    export type TrialEnd = "now" | number;

    /**
     * Settings related to subscription trials.
     */
    export interface TrialSettings {
        /** Defines how the subscription should behave when the user's free trial ends. */
        end_behavior: TrialSettings.EndBehavior;
    }

    export namespace TrialSettings {
        /**
         * Defines how the subscription should behave when the user's free trial ends.
         */
        export interface EndBehavior {
            /** Indicates how the subscription should change when the trial ends if the user did not provide a payment method. */
            missing_payment_method: EndBehavior.MissingPaymentMethod;
        }

        export namespace EndBehavior {
            /**
             * Indicates how the subscription should change when the trial ends if the user did not provide a payment method.
             */
            export type MissingPaymentMethod = "cancel" | "create_invoice" | "pause";
            export const MissingPaymentMethod = {
                Cancel: "cancel",
                CreateInvoice: "create_invoice",
                Pause: "pause",
            } as const;
        }
    }
}
