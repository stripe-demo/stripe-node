/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         customer: "customer"
 *     }
 */
export interface SubscriptionCreateRequest {
    /** A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items. */
    add_invoice_items?: SubscriptionCreateRequest.AddInvoiceItems.Item[];
    /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
    application_fee_percent?: SubscriptionCreateRequest.ApplicationFeePercent;
    /** Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed. */
    automatic_tax?: SubscriptionCreateRequest.AutomaticTax;
    /** For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor. */
    backdate_start_date?: number;
    /** A future timestamp in UTC format to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). The anchor is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. */
    billing_cycle_anchor?: number;
    /** Mutually exclusive with billing_cycle_anchor and only valid with monthly and yearly price intervals. When provided, the billing_cycle_anchor is set to the next occurence of the day_of_month at the hour, minute, and second UTC. */
    billing_cycle_anchor_config?: SubscriptionCreateRequest.BillingCycleAnchorConfig;
    /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
    billing_thresholds?: SubscriptionCreateRequest.BillingThresholds;
    /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
    cancel_at?: number;
    /** Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`. */
    cancel_at_period_end?: boolean;
    /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`. */
    collection_method?: SubscriptionCreateRequest.CollectionMethod;
    /** The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
    coupon?: string;
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency?: string;
    /** The identifier of the customer to subscribe. */
    customer: string;
    /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
    days_until_due?: number;
    /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
    default_payment_method?: string;
    /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
    default_source?: string;
    /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
    default_tax_rates?: SubscriptionCreateRequest.DefaultTaxRates;
    /** The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs. */
    description?: string;
    /** The coupons to redeem into discounts for the subscription. If not specified or empty, inherits the discount from the subscription's customer. */
    discounts?: SubscriptionCreateRequest.Discounts;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** All invoices will be billed using the specified settings. */
    invoice_settings?: SubscriptionCreateRequest.InvoiceSettings;
    /** A list of up to 20 subscription items, each with an attached price. */
    items?: SubscriptionCreateRequest.Items.Item[];
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: SubscriptionCreateRequest.Metadata;
    /** Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session). */
    off_session?: boolean;
    /** The account on behalf of which to charge, for each of the subscription's invoices. */
    on_behalf_of?: SubscriptionCreateRequest.OnBehalfOf;
    /**
     * Only applies to subscriptions with `collection_method=charge_automatically`.
     *
     * Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
     *
     * Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscriptionâ€™s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.
     *
     * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
     *
     * `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.
     *
     * Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
     */
    payment_behavior?: SubscriptionCreateRequest.PaymentBehavior;
    /** Payment settings to pass to invoices created by the subscription. */
    payment_settings?: SubscriptionCreateRequest.PaymentSettings;
    /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
    pending_invoice_item_interval?: SubscriptionCreateRequest.PendingInvoiceItemInterval;
    /** The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. This field has been deprecated and will be removed in a future API version. Use `discounts` instead. */
    promotion_code?: string;
    /** Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`. */
    proration_behavior?: SubscriptionCreateRequest.ProrationBehavior;
    /** If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. */
    transfer_data?: SubscriptionCreateRequest.TransferData;
    /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
    trial_end?: SubscriptionCreateRequest.TrialEnd;
    /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
    trial_from_plan?: boolean;
    /** Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
    trial_period_days?: number;
    /** Settings related to subscription trials. */
    trial_settings?: SubscriptionCreateRequest.TrialSettings;
}

export namespace SubscriptionCreateRequest {
    export type AddInvoiceItems = AddInvoiceItems.Item[];

    export namespace AddInvoiceItems {
        export interface Item {
            /** The coupons to redeem into discounts for the item. */
            discounts?: Item.Discounts.Item[];
            /** The ID of the price object. One of `price` or `price_data` is required. */
            price?: string;
            /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required. */
            price_data?: Item.PriceData;
            /** Quantity for this item. Defaults to 1. */
            quantity?: number;
            /** The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
            tax_rates?: Item.TaxRates;
        }

        export namespace Item {
            export type Discounts = Discounts.Item[];

            export namespace Discounts {
                export interface Item {
                    /** ID of the coupon to create a new discount for. */
                    coupon?: string;
                    /** ID of an existing discount on the object (or one of its ancestors) to reuse. */
                    discount?: string;
                    /** ID of the promotion code to create a new discount for. */
                    promotion_code?: string;
                }
            }

            /**
             * Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
             */
            export interface PriceData {
                /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                currency: string;
                /** The ID of the product that this price will belong to. */
                product: string;
                /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
                tax_behavior?: PriceData.TaxBehavior;
                /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge or a negative integer representing the amount to credit to the customer. */
                unit_amount?: number;
                /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
                unit_amount_decimal?: string;
            }

            export namespace PriceData {
                /**
                 * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                 */
                export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
                export const TaxBehavior = {
                    Exclusive: "exclusive",
                    Inclusive: "inclusive",
                    Unspecified: "unspecified",
                } as const;
            }

            /**
             * The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
             */
            export type TaxRates = string[] | "";
        }
    }

    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
     */
    export type ApplicationFeePercent = number | "";

    /**
     * Automatic tax settings for this subscription. We recommend you only include this parameter when the existing value is being changed.
     */
    export interface AutomaticTax {
        /** Enabled automatic tax calculation which will automatically compute tax rates on all invoices generated by the subscription. */
        enabled: boolean;
        /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
        liability?: AutomaticTax.Liability;
    }

    export namespace AutomaticTax {
        /**
         * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
         */
        export interface Liability {
            /** The connected account being referenced when `type` is `account`. */
            account?: string;
            /** Type of the account referenced in the request. */
            type: Liability.Type;
        }

        export namespace Liability {
            /**
             * Type of the account referenced in the request.
             */
            export type Type = "account" | "self";
            export const Type = {
                Account: "account",
                Self: "self",
            } as const;
        }
    }

    /**
     * Mutually exclusive with billing_cycle_anchor and only valid with monthly and yearly price intervals. When provided, the billing_cycle_anchor is set to the next occurence of the day_of_month at the hour, minute, and second UTC.
     */
    export interface BillingCycleAnchorConfig {
        /** The day of the month the billing_cycle_anchor should be. Ranges from 1 to 31. */
        day_of_month: number;
        /** The hour of the day the billing_cycle_anchor should be. Ranges from 0 to 23. */
        hour?: number;
        /** The minute of the hour the billing_cycle_anchor should be. Ranges from 0 to 59. */
        minute?: number;
        /** The month to start full cycle billing periods. Ranges from 1 to 12. */
        month?: number;
        /** The second of the minute the billing_cycle_anchor should be. Ranges from 0 to 59. */
        second?: number;
    }

    /**
     * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
     */
    export type BillingThresholds =
        | {
              amount_gte?: number | undefined;
              reset_billing_cycle_anchor?: boolean | undefined;
          }
        | "";
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
     */
    export type CollectionMethod = "charge_automatically" | "send_invoice";
    export const CollectionMethod = {
        ChargeAutomatically: "charge_automatically",
        SendInvoice: "send_invoice",
    } as const;
    /**
     * The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
     */
    export type DefaultTaxRates = string[] | "";
    /**
     * The coupons to redeem into discounts for the subscription. If not specified or empty, inherits the discount from the subscription's customer.
     */
    export type Discounts =
        | {
              coupon?: string | undefined;
              discount?: string | undefined;
              promotion_code?: string | undefined;
          }[]
        | "";

    /**
     * All invoices will be billed using the specified settings.
     */
    export interface InvoiceSettings {
        /** The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription. */
        account_tax_ids?: InvoiceSettings.AccountTaxIds;
        /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
        issuer?: InvoiceSettings.Issuer;
    }

    export namespace InvoiceSettings {
        /**
         * The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription.
         */
        export type AccountTaxIds = string[] | "";

        /**
         * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
         */
        export interface Issuer {
            /** The connected account being referenced when `type` is `account`. */
            account?: string;
            /** Type of the account referenced in the request. */
            type: Issuer.Type;
        }

        export namespace Issuer {
            /**
             * Type of the account referenced in the request.
             */
            export type Type = "account" | "self";
            export const Type = {
                Account: "account",
                Self: "self",
            } as const;
        }
    }

    export type Items = Items.Item[];

    export namespace Items {
        export interface Item {
            /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
            billing_thresholds?: Item.BillingThresholds;
            /** The coupons to redeem into discounts for the subscription item. */
            discounts?: Item.Discounts;
            /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
            metadata?: Record<string, string>;
            /** Plan ID for this item, as a string. */
            plan?: string;
            /** The ID of the price object. */
            price?: string;
            /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. */
            price_data?: Item.PriceData;
            /** Quantity for this item. */
            quantity?: number;
            /** A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
            tax_rates?: Item.TaxRates;
        }

        export namespace Item {
            /**
             * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds.
             */
            export type BillingThresholds =
                | {
                      usage_gte: number;
                  }
                | "";
            /**
             * The coupons to redeem into discounts for the subscription item.
             */
            export type Discounts =
                | {
                      coupon?: string | undefined;
                      discount?: string | undefined;
                      promotion_code?: string | undefined;
                  }[]
                | "";

            /**
             * Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
             */
            export interface PriceData {
                /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
                currency: string;
                /** The ID of the product that this price will belong to. */
                product: string;
                /** The recurring components of a price such as `interval` and `interval_count`. */
                recurring: PriceData.Recurring;
                /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
                tax_behavior?: PriceData.TaxBehavior;
                /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. */
                unit_amount?: number;
                /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
                unit_amount_decimal?: string;
            }

            export namespace PriceData {
                /**
                 * The recurring components of a price such as `interval` and `interval_count`.
                 */
                export interface Recurring {
                    /** Specifies billing frequency. Either `day`, `week`, `month` or `year`. */
                    interval: Recurring.Interval;
                    /** The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks). */
                    interval_count?: number;
                }

                export namespace Recurring {
                    /**
                     * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
                     */
                    export type Interval = "day" | "month" | "week" | "year";
                    export const Interval = {
                        Day: "day",
                        Month: "month",
                        Week: "week",
                        Year: "year",
                    } as const;
                }

                /**
                 * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
                 */
                export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
                export const TaxBehavior = {
                    Exclusive: "exclusive",
                    Inclusive: "inclusive",
                    Unspecified: "unspecified",
                } as const;
            }

            /**
             * A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates.
             */
            export type TaxRates = string[] | "";
        }
    }

    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type Metadata = Record<string, string> | "";
    /**
     * The account on behalf of which to charge, for each of the subscription's invoices.
     */
    export type OnBehalfOf = string | "";
    /**
     * Only applies to subscriptions with `collection_method=charge_automatically`.
     *
     * Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
     *
     * Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscriptionâ€™s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.
     *
     * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
     *
     * `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.
     *
     * Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
     */
    export type PaymentBehavior =
        | "allow_incomplete"
        | "default_incomplete"
        | "error_if_incomplete"
        | "pending_if_incomplete";
    export const PaymentBehavior = {
        AllowIncomplete: "allow_incomplete",
        DefaultIncomplete: "default_incomplete",
        ErrorIfIncomplete: "error_if_incomplete",
        PendingIfIncomplete: "pending_if_incomplete",
    } as const;

    /**
     * Payment settings to pass to invoices created by the subscription.
     */
    export interface PaymentSettings {
        /** Payment-method-specific configuration to provide to invoices created by the subscription. */
        payment_method_options?: PaymentSettings.PaymentMethodOptions;
        /** The list of payment method types (e.g. card) to provide to the invoiceâ€™s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). Should not be specified with payment_method_configuration */
        payment_method_types?: PaymentSettings.PaymentMethodTypes;
        /** Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off` if unspecified. */
        save_default_payment_method?: PaymentSettings.SaveDefaultPaymentMethod;
    }

    export namespace PaymentSettings {
        /**
         * Payment-method-specific configuration to provide to invoices created by the subscription.
         */
        export interface PaymentMethodOptions {
            /** This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoiceâ€™s PaymentIntent. */
            acss_debit?: PaymentMethodOptions.AcssDebit;
            /** This sub-hash contains details about the Bancontact payment method options to pass to the invoiceâ€™s PaymentIntent. */
            bancontact?: PaymentMethodOptions.Bancontact;
            /** This sub-hash contains details about the Card payment method options to pass to the invoiceâ€™s PaymentIntent. */
            card?: PaymentMethodOptions.Card;
            /** This sub-hash contains details about the Bank transfer payment method options to pass to the invoiceâ€™s PaymentIntent. */
            customer_balance?: PaymentMethodOptions.CustomerBalance;
            /** This sub-hash contains details about the Konbini payment method options to pass to the invoiceâ€™s PaymentIntent. */
            konbini?: PaymentMethodOptions.Konbini;
            /** This sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoiceâ€™s PaymentIntent. */
            sepa_debit?: PaymentMethodOptions.SepaDebit;
            /** This sub-hash contains details about the ACH direct debit payment method options to pass to the invoiceâ€™s PaymentIntent. */
            us_bank_account?: PaymentMethodOptions.UsBankAccount;
        }

        export namespace PaymentMethodOptions {
            /**
             * This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type AcssDebit =
                | {
                      mandate_options?:
                          | {
                                transaction_type?: ("business" | "personal") | undefined;
                            }
                          | undefined;
                      verification_method?: ("automatic" | "instant" | "microdeposits") | undefined;
                  }
                | "";
            /**
             * This sub-hash contains details about the Bancontact payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type Bancontact =
                | {
                      preferred_language?: ("de" | "en" | "fr" | "nl") | undefined;
                  }
                | "";
            /**
             * This sub-hash contains details about the Card payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type Card =
                | {
                      mandate_options?:
                          | {
                                amount?: number | undefined;
                                amount_type?: ("fixed" | "maximum") | undefined;
                                description?: string | undefined;
                            }
                          | undefined;
                      network?:
                          | (
                                | "amex"
                                | "cartes_bancaires"
                                | "diners"
                                | "discover"
                                | "eftpos_au"
                                | "girocard"
                                | "interac"
                                | "jcb"
                                | "link"
                                | "mastercard"
                                | "unionpay"
                                | "unknown"
                                | "visa"
                            )
                          | undefined;
                      request_three_d_secure?: ("any" | "automatic" | "challenge") | undefined;
                  }
                | "";
            /**
             * This sub-hash contains details about the Bank transfer payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type CustomerBalance =
                | {
                      bank_transfer?:
                          | {
                                eu_bank_transfer?:
                                    | {
                                          country: string;
                                      }
                                    | undefined;
                                type?: string | undefined;
                            }
                          | undefined;
                      funding_type?: string | undefined;
                  }
                | "";
            /**
             * This sub-hash contains details about the Konbini payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type Konbini = {} | "";
            /**
             * This sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type SepaDebit = {} | "";
            /**
             * This sub-hash contains details about the ACH direct debit payment method options to pass to the invoiceâ€™s PaymentIntent.
             */
            export type UsBankAccount =
                | {
                      financial_connections?:
                          | {
                                filters?:
                                    | {
                                          account_subcategories?: ("checking" | "savings")[] | undefined;
                                      }
                                    | undefined;
                                permissions?:
                                    | ("balances" | "ownership" | "payment_method" | "transactions")[]
                                    | undefined;
                                prefetch?: ("balances" | "ownership" | "transactions")[] | undefined;
                            }
                          | undefined;
                      verification_method?: ("automatic" | "instant" | "microdeposits") | undefined;
                  }
                | "";
        }

        /**
         * The list of payment method types (e.g. card) to provide to the invoiceâ€™s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoiceâ€™s default payment method, the subscriptionâ€™s default payment method, the customerâ€™s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). Should not be specified with payment_method_configuration
         */
        export type PaymentMethodTypes =
            | (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "amazon_pay"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "cashapp"
                  | "customer_balance"
                  | "eps"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "jp_credit_transfer"
                  | "kakao_pay"
                  | "konbini"
                  | "kr_card"
                  | "link"
                  | "multibanco"
                  | "naver_pay"
                  | "p24"
                  | "payco"
                  | "paynow"
                  | "paypal"
                  | "promptpay"
                  | "revolut_pay"
                  | "sepa_credit_transfer"
                  | "sepa_debit"
                  | "sofort"
                  | "swish"
                  | "us_bank_account"
                  | "wechat_pay"
              )[]
            | "";
        /**
         * Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off` if unspecified.
         */
        export type SaveDefaultPaymentMethod = "off" | "on_subscription";
        export const SaveDefaultPaymentMethod = {
            Off: "off",
            OnSubscription: "on_subscription",
        } as const;
    }

    /**
     * Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
     */
    export type PendingInvoiceItemInterval =
        | {
              interval: "day" | "month" | "week" | "year";
              interval_count?: number | undefined;
          }
        | "";
    /**
     * Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`.
     */
    export type ProrationBehavior = "always_invoice" | "create_prorations" | "none";
    export const ProrationBehavior = {
        AlwaysInvoice: "always_invoice",
        CreateProrations: "create_prorations",
        None: "none",
    } as const;

    /**
     * If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges.
     */
    export interface TransferData {
        /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
        amount_percent?: number;
        /** ID of an existing, connected Stripe account. */
        destination: string;
    }

    /**
     * Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
     */
    export type TrialEnd = "now" | number;

    /**
     * Settings related to subscription trials.
     */
    export interface TrialSettings {
        /** Defines how the subscription should behave when the user's free trial ends. */
        end_behavior: TrialSettings.EndBehavior;
    }

    export namespace TrialSettings {
        /**
         * Defines how the subscription should behave when the user's free trial ends.
         */
        export interface EndBehavior {
            /** Indicates how the subscription should change when the trial ends if the user did not provide a payment method. */
            missing_payment_method: EndBehavior.MissingPaymentMethod;
        }

        export namespace EndBehavior {
            /**
             * Indicates how the subscription should change when the trial ends if the user did not provide a payment method.
             */
            export type MissingPaymentMethod = "cancel" | "create_invoice" | "pause";
            export const MissingPaymentMethod = {
                Cancel: "cancel",
                CreateInvoice: "create_invoice",
                Pause: "pause",
            } as const;
        }
    }
}
