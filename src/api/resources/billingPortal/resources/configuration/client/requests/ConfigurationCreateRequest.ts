/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         features: {}
 *     }
 */
export interface ConfigurationCreateRequest {
    /** The business information shown to customers in the portal. */
    business_profile?: ConfigurationCreateRequest.BusinessProfile;
    /** The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
    default_return_url?: ConfigurationCreateRequest.DefaultReturnUrl;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** Information about the features available in the portal. */
    features: ConfigurationCreateRequest.Features;
    /** The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share). */
    login_page?: ConfigurationCreateRequest.LoginPage;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: Record<string, string>;
}

export namespace ConfigurationCreateRequest {
    /**
     * The business information shown to customers in the portal.
     */
    export interface BusinessProfile {
        /** The messaging shown to customers in the portal. */
        headline?: BusinessProfile.Headline;
        /** A link to the business’s publicly available privacy policy. */
        privacy_policy_url?: string;
        /** A link to the business’s publicly available terms of service. */
        terms_of_service_url?: string;
    }

    export namespace BusinessProfile {
        /**
         * The messaging shown to customers in the portal.
         */
        export type Headline = string | "";
    }

    /**
     * The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
     */
    export type DefaultReturnUrl = string | "";

    /**
     * Information about the features available in the portal.
     */
    export interface Features {
        /** Information about updating the customer details in the portal. */
        customer_update?: Features.CustomerUpdate;
        /** Information about showing the billing history in the portal. */
        invoice_history?: Features.InvoiceHistory;
        /** Information about updating payment methods in the portal. */
        payment_method_update?: Features.PaymentMethodUpdate;
        /** Information about canceling subscriptions in the portal. */
        subscription_cancel?: Features.SubscriptionCancel;
        /** Information about updating subscriptions in the portal. */
        subscription_update?: Features.SubscriptionUpdate;
    }

    export namespace Features {
        /**
         * Information about updating the customer details in the portal.
         */
        export interface CustomerUpdate {
            /** The types of customer updates that are supported. When empty, customers are not updateable. */
            allowed_updates?: CustomerUpdate.AllowedUpdates;
            /** Whether the feature is enabled. */
            enabled: boolean;
        }

        export namespace CustomerUpdate {
            /**
             * The types of customer updates that are supported. When empty, customers are not updateable.
             */
            export type AllowedUpdates = ("address" | "email" | "name" | "phone" | "shipping" | "tax_id")[] | "";
        }

        /**
         * Information about showing the billing history in the portal.
         */
        export interface InvoiceHistory {
            /** Whether the feature is enabled. */
            enabled: boolean;
        }

        /**
         * Information about updating payment methods in the portal.
         */
        export interface PaymentMethodUpdate {
            /** Whether the feature is enabled. */
            enabled: boolean;
        }

        /**
         * Information about canceling subscriptions in the portal.
         */
        export interface SubscriptionCancel {
            /** Whether the cancellation reasons will be collected in the portal and which options are exposed to the customer */
            cancellation_reason?: SubscriptionCancel.CancellationReason;
            /** Whether the feature is enabled. */
            enabled: boolean;
            /** Whether to cancel subscriptions immediately or at the end of the billing period. */
            mode?: SubscriptionCancel.Mode;
            /** Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`, which is only compatible with `mode=immediately`. Passing `always_invoice` will result in an error. No prorations are generated when canceling a subscription at the end of its natural billing period. */
            proration_behavior?: SubscriptionCancel.ProrationBehavior;
        }

        export namespace SubscriptionCancel {
            /**
             * Whether the cancellation reasons will be collected in the portal and which options are exposed to the customer
             */
            export interface CancellationReason {
                /** Whether the feature is enabled. */
                enabled: boolean;
                /** Which cancellation reasons will be given as options to the customer. */
                options: CancellationReason.Options;
            }

            export namespace CancellationReason {
                /**
                 * Which cancellation reasons will be given as options to the customer.
                 */
                export type Options =
                    | (
                          | "customer_service"
                          | "low_quality"
                          | "missing_features"
                          | "other"
                          | "switched_service"
                          | "too_complex"
                          | "too_expensive"
                          | "unused"
                      )[]
                    | "";
            }

            /**
             * Whether to cancel subscriptions immediately or at the end of the billing period.
             */
            export type Mode = "at_period_end" | "immediately";
            export const Mode = {
                AtPeriodEnd: "at_period_end",
                Immediately: "immediately",
            } as const;
            /**
             * Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`, which is only compatible with `mode=immediately`. Passing `always_invoice` will result in an error. No prorations are generated when canceling a subscription at the end of its natural billing period.
             */
            export type ProrationBehavior = "always_invoice" | "create_prorations" | "none";
            export const ProrationBehavior = {
                AlwaysInvoice: "always_invoice",
                CreateProrations: "create_prorations",
                None: "none",
            } as const;
        }

        /**
         * Information about updating subscriptions in the portal.
         */
        export interface SubscriptionUpdate {
            /** The types of subscription updates that are supported. When empty, subscriptions are not updateable. */
            default_allowed_updates?: SubscriptionUpdate.DefaultAllowedUpdates;
            /** Whether the feature is enabled. */
            enabled: boolean;
            /** The list of up to 10 products that support subscription updates. */
            products?: SubscriptionUpdate.Products;
            /** Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. */
            proration_behavior?: SubscriptionUpdate.ProrationBehavior;
            /** Setting to control when an update should be scheduled at the end of the period instead of applying immediately. */
            schedule_at_period_end?: SubscriptionUpdate.ScheduleAtPeriodEnd;
        }

        export namespace SubscriptionUpdate {
            /**
             * The types of subscription updates that are supported. When empty, subscriptions are not updateable.
             */
            export type DefaultAllowedUpdates = ("price" | "promotion_code" | "quantity")[] | "";
            /**
             * The list of up to 10 products that support subscription updates.
             */
            export type Products =
                | {
                      prices: string[];
                      product: string;
                  }[]
                | "";
            /**
             * Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`.
             */
            export type ProrationBehavior = "always_invoice" | "create_prorations" | "none";
            export const ProrationBehavior = {
                AlwaysInvoice: "always_invoice",
                CreateProrations: "create_prorations",
                None: "none",
            } as const;

            /**
             * Setting to control when an update should be scheduled at the end of the period instead of applying immediately.
             */
            export interface ScheduleAtPeriodEnd {
                /** List of conditions. When any condition is true, the update will be scheduled at the end of the current period. */
                conditions?: ScheduleAtPeriodEnd.Conditions.Item[];
            }

            export namespace ScheduleAtPeriodEnd {
                export type Conditions = Conditions.Item[];

                export namespace Conditions {
                    export interface Item {
                        /** The type of condition. */
                        type: Item.Type;
                    }

                    export namespace Item {
                        /**
                         * The type of condition.
                         */
                        export type Type = "decreasing_item_amount" | "shortening_interval";
                        export const Type = {
                            DecreasingItemAmount: "decreasing_item_amount",
                            ShorteningInterval: "shortening_interval",
                        } as const;
                    }
                }
            }
        }
    }

    /**
     * The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).
     */
    export interface LoginPage {
        /** Set to `true` to generate a shareable URL [`login_page.url`](https://stripe.com/docs/api/customer_portal/configuration#portal_configuration_object-login_page-url) that will take your customers to a hosted login page for the customer portal. */
        enabled: boolean;
    }
}
