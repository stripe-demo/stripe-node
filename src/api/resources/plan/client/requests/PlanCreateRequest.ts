/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         currency: "currency",
 *         interval: "day"
 *     }
 */
export interface PlanCreateRequest {
    /** Whether the plan is currently available for new subscriptions. Defaults to `true`. */
    active?: boolean;
    /** Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
    aggregate_usage?: PlanCreateRequest.AggregateUsage;
    /** A positive integer in cents (or local equivalent) (or 0 for a free plan) representing how much to charge on a recurring basis. */
    amount?: number;
    /** Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set. */
    amount_decimal?: string;
    /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
    billing_scheme?: PlanCreateRequest.BillingScheme;
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: string;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes. */
    id?: string;
    /** Specifies billing frequency. Either `day`, `week`, `month` or `year`. */
    interval: PlanCreateRequest.Interval;
    /** The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks). */
    interval_count?: number;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: PlanCreateRequest.Metadata;
    /** The meter tracking the usage of a metered price */
    meter?: string;
    /** A brief description of the plan, hidden from customers. */
    nickname?: string;
    product?: PlanCreateRequest.Product;
    /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
    tiers?: PlanCreateRequest.Tiers.Item[];
    /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows. */
    tiers_mode?: PlanCreateRequest.TiersMode;
    /** Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`. */
    transform_usage?: PlanCreateRequest.TransformUsage;
    /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
    trial_period_days?: number;
    /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
    usage_type?: PlanCreateRequest.UsageType;
}

export namespace PlanCreateRequest {
    /**
     * Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
     */
    export type AggregateUsage = "last_during_period" | "last_ever" | "max" | "sum";
    export const AggregateUsage = {
        LastDuringPeriod: "last_during_period",
        LastEver: "last_ever",
        Max: "max",
        Sum: "sum",
    } as const;
    /**
     * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
     */
    export type BillingScheme = "per_unit" | "tiered";
    export const BillingScheme = {
        PerUnit: "per_unit",
        Tiered: "tiered",
    } as const;
    /**
     * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
     */
    export type Interval = "day" | "month" | "week" | "year";
    export const Interval = {
        Day: "day",
        Month: "month",
        Week: "week",
        Year: "year",
    } as const;
    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type Metadata = Record<string, string> | "";
    export type Product =
        /**
         * The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://stripe.com/docs/api#product_object-type). */
        | {
              active?: boolean | undefined;
              id?: string | undefined;
              metadata?: Record<string, string> | undefined;
              name: string;
              statement_descriptor?: string | undefined;
              tax_code?: string | undefined;
              unit_label?: string | undefined;
          }
        /**
         * The ID of the product whose pricing the created plan will represent. */
        | string;
    export type Tiers = Tiers.Item[];

    export namespace Tiers {
        export interface Item {
            /** The flat billing amount for an entire tier, regardless of the number of units in the tier. */
            flat_amount?: number;
            /** Same as `flat_amount`, but accepts a decimal value representing an integer in the minor units of the currency. Only one of `flat_amount` and `flat_amount_decimal` can be set. */
            flat_amount_decimal?: string;
            /** The per unit billing amount for each individual unit for which this tier applies. */
            unit_amount?: number;
            /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
            unit_amount_decimal?: string;
            /** Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use `inf` to define a fallback tier. */
            up_to: Item.UpTo;
        }

        export namespace Item {
            /**
             * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use `inf` to define a fallback tier.
             */
            export type UpTo = "inf" | number;
        }
    }

    /**
     * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
     */
    export type TiersMode = "graduated" | "volume";
    export const TiersMode = {
        Graduated: "graduated",
        Volume: "volume",
    } as const;

    /**
     * Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
     */
    export interface TransformUsage {
        /** Divide usage by this number. */
        divide_by: number;
        /** After division, either round the result `up` or `down`. */
        round: TransformUsage.Round;
    }

    export namespace TransformUsage {
        /**
         * After division, either round the result `up` or `down`.
         */
        export type Round = "down" | "up";
        export const Round = {
            Down: "down",
            Up: "up",
        } as const;
    }

    /**
     * Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
     */
    export type UsageType = "licensed" | "metered";
    export const UsageType = {
        Licensed: "licensed",
        Metered: "metered",
    } as const;
}
