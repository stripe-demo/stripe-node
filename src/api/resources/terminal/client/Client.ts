/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Configuration } from "../resources/configuration/client/Client";
import { ConnectionToken } from "../resources/connectionToken/client/Client";
import { Location } from "../resources/location/client/Client";
import { Reader } from "../resources/reader/client/Client";

export declare namespace Terminal {
    export interface Options {
        environment?: core.Supplier<environments.StripeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        username: core.Supplier<string>;
        password: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Terminal {
    protected _configuration: Configuration | undefined;
    protected _connectionToken: ConnectionToken | undefined;
    protected _location: Location | undefined;
    protected _reader: Reader | undefined;

    constructor(protected readonly _options: Terminal.Options) {}

    public get configuration(): Configuration {
        return (this._configuration ??= new Configuration(this._options));
    }

    public get connectionToken(): ConnectionToken {
        return (this._connectionToken ??= new ConnectionToken(this._options));
    }

    public get location(): Location {
        return (this._location ??= new Location(this._options));
    }

    public get reader(): Reader {
        return (this._reader ??= new Reader(this._options));
    }
}
