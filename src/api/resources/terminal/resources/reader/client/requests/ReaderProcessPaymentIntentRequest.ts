/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         payment_intent: "payment_intent"
 *     }
 */
export interface ReaderProcessPaymentIntentRequest {
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** PaymentIntent ID */
    payment_intent: string;
    /** Configuration overrides */
    process_config?: ReaderProcessPaymentIntentRequest.ProcessConfig;
}

export namespace ReaderProcessPaymentIntentRequest {
    /**
     * Configuration overrides
     */
    export interface ProcessConfig {
        /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. */
        allow_redisplay?: ProcessConfig.AllowRedisplay;
        /** Enables cancel button on transaction screens. */
        enable_customer_cancellation?: boolean;
        /** Override showing a tipping selection screen on this transaction. */
        skip_tipping?: boolean;
        /** Tipping configuration for this transaction. */
        tipping?: ProcessConfig.Tipping;
    }

    export namespace ProcessConfig {
        /**
         * This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow.
         */
        export type AllowRedisplay = "always" | "limited" | "unspecified";
        export const AllowRedisplay = {
            Always: "always",
            Limited: "limited",
            Unspecified: "unspecified",
        } as const;

        /**
         * Tipping configuration for this transaction.
         */
        export interface Tipping {
            /** Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent Â¥100, a zero-decimal currency). */
            amount_eligible?: number;
        }
    }
}
