/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface ConfirmationTokenCreateRequest {
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** ID of an existing PaymentMethod. */
    payment_method?: string;
    /** If provided, this hash will be used to create a PaymentMethod. */
    payment_method_data?: ConfirmationTokenCreateRequest.PaymentMethodData;
    /** Return URL used to confirm the Intent. */
    return_url?: string;
    /**
     * Indicates that you intend to make future payments with this ConfirmationToken's payment method.
     *
     * The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
     */
    setup_future_usage?: ConfirmationTokenCreateRequest.SetupFutureUsage;
    /** Shipping information for this ConfirmationToken. */
    shipping?: ConfirmationTokenCreateRequest.Shipping;
}

export namespace ConfirmationTokenCreateRequest {
    /**
     * If provided, this hash will be used to create a PaymentMethod.
     */
    export interface PaymentMethodData {
        /** If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method. */
        acss_debit?: PaymentMethodData.AcssDebit;
        /** If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method. */
        affirm?: PaymentMethodData.Affirm;
        /** If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method. */
        afterpay_clearpay?: PaymentMethodData.AfterpayClearpay;
        /** If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method. */
        alipay?: PaymentMethodData.Alipay;
        /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`. */
        allow_redisplay?: PaymentMethodData.AllowRedisplay;
        /** If this is a Alma PaymentMethod, this hash contains details about the Alma payment method. */
        alma?: PaymentMethodData.Alma;
        /** If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method. */
        amazon_pay?: PaymentMethodData.AmazonPay;
        /** If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account. */
        au_becs_debit?: PaymentMethodData.AuBecsDebit;
        /** If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account. */
        bacs_debit?: PaymentMethodData.BacsDebit;
        /** If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method. */
        bancontact?: PaymentMethodData.Bancontact;
        /** Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods. */
        billing_details?: PaymentMethodData.BillingDetails;
        /** If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method. */
        blik?: PaymentMethodData.Blik;
        /** If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method. */
        boleto?: PaymentMethodData.Boleto;
        /** If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method. */
        cashapp?: PaymentMethodData.Cashapp;
        /** If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method. */
        customer_balance?: PaymentMethodData.CustomerBalance;
        /** If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method. */
        eps?: PaymentMethodData.Eps;
        /** If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method. */
        fpx?: PaymentMethodData.Fpx;
        /** If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method. */
        giropay?: PaymentMethodData.Giropay;
        /** If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method. */
        grabpay?: PaymentMethodData.Grabpay;
        /** If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method. */
        ideal?: PaymentMethodData.Ideal;
        /** If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method. */
        interac_present?: PaymentMethodData.InteracPresent;
        /** If this is a `kakao_pay` PaymentMethod, this hash contains details about the Kakao Pay payment method. */
        kakao_pay?: PaymentMethodData.KakaoPay;
        /** If this is a `klarna` PaymentMethod, this hash contains details about the Klarna payment method. */
        klarna?: PaymentMethodData.Klarna;
        /** If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method. */
        konbini?: PaymentMethodData.Konbini;
        /** If this is a `kr_card` PaymentMethod, this hash contains details about the Korean Card payment method. */
        kr_card?: PaymentMethodData.KrCard;
        /** If this is an `Link` PaymentMethod, this hash contains details about the Link payment method. */
        link?: PaymentMethodData.Link;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        metadata?: Record<string, string>;
        /** If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method. */
        mobilepay?: PaymentMethodData.Mobilepay;
        /** If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method. */
        multibanco?: PaymentMethodData.Multibanco;
        /** If this is a `naver_pay` PaymentMethod, this hash contains details about the Naver Pay payment method. */
        naver_pay?: PaymentMethodData.NaverPay;
        /** If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method. */
        oxxo?: PaymentMethodData.Oxxo;
        /** If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method. */
        p24?: PaymentMethodData.P24;
        /** If this is a `pay_by_bank` PaymentMethod, this hash contains details about the PayByBank payment method. */
        pay_by_bank?: PaymentMethodData.PayByBank;
        /** If this is a `payco` PaymentMethod, this hash contains details about the PAYCO payment method. */
        payco?: PaymentMethodData.Payco;
        /** If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method. */
        paynow?: PaymentMethodData.Paynow;
        /** If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method. */
        paypal?: PaymentMethodData.Paypal;
        /** If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method. */
        pix?: PaymentMethodData.Pix;
        /** If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method. */
        promptpay?: PaymentMethodData.Promptpay;
        /** Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information. */
        radar_options?: PaymentMethodData.RadarOptions;
        /** If this is a `Revolut Pay` PaymentMethod, this hash contains details about the Revolut Pay payment method. */
        revolut_pay?: PaymentMethodData.RevolutPay;
        /** If this is a `samsung_pay` PaymentMethod, this hash contains details about the SamsungPay payment method. */
        samsung_pay?: PaymentMethodData.SamsungPay;
        /** If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account. */
        sepa_debit?: PaymentMethodData.SepaDebit;
        /** If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method. */
        sofort?: PaymentMethodData.Sofort;
        /** If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method. */
        swish?: PaymentMethodData.Swish;
        /** If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method. */
        twint?: PaymentMethodData.Twint;
        /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
        type: PaymentMethodData.Type;
        /** If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method. */
        us_bank_account?: PaymentMethodData.UsBankAccount;
        /** If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method. */
        wechat_pay?: PaymentMethodData.WechatPay;
        /** If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method. */
        zip?: PaymentMethodData.Zip;
    }

    export namespace PaymentMethodData {
        /**
         * If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method.
         */
        export interface AcssDebit {
            /** Customer's bank account number. */
            account_number: string;
            /** Institution number of the customer's bank. */
            institution_number: string;
            /** Transit number of the customer's bank. */
            transit_number: string;
        }

        /**
         * If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
         */
        export interface Affirm {}

        /**
         * If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
         */
        export interface AfterpayClearpay {}

        /**
         * If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
         */
        export interface Alipay {}

        /**
         * This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
         */
        export type AllowRedisplay = "always" | "limited" | "unspecified";
        export const AllowRedisplay = {
            Always: "always",
            Limited: "limited",
            Unspecified: "unspecified",
        } as const;

        /**
         * If this is a Alma PaymentMethod, this hash contains details about the Alma payment method.
         */
        export interface Alma {}

        /**
         * If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method.
         */
        export interface AmazonPay {}

        /**
         * If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account.
         */
        export interface AuBecsDebit {
            /** The account number for the bank account. */
            account_number: string;
            /** Bank-State-Branch number of the bank account. */
            bsb_number: string;
        }

        /**
         * If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account.
         */
        export interface BacsDebit {
            /** Account number of the bank account that the funds will be debited from. */
            account_number?: string;
            /** Sort code of the bank account. (e.g., `10-20-30`) */
            sort_code?: string;
        }

        /**
         * If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
         */
        export interface Bancontact {}

        /**
         * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
         */
        export interface BillingDetails {
            /** Billing address. */
            address?: BillingDetails.Address;
            /** Email address. */
            email?: BillingDetails.Email;
            /** Full name. */
            name?: BillingDetails.Name;
            /** Billing phone number (including extension). */
            phone?: BillingDetails.Phone;
        }

        export namespace BillingDetails {
            /**
             * Billing address.
             */
            export type Address =
                | {
                      city?: string | undefined;
                      country?: string | undefined;
                      line1?: string | undefined;
                      line2?: string | undefined;
                      postal_code?: string | undefined;
                      state?: string | undefined;
                  }
                | "";
            /**
             * Email address.
             */
            export type Email = string | "";
            /**
             * Full name.
             */
            export type Name = string | "";
            /**
             * Billing phone number (including extension).
             */
            export type Phone = string | "";
        }

        /**
         * If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method.
         */
        export interface Blik {}

        /**
         * If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method.
         */
        export interface Boleto {
            /** The tax ID of the customer (CPF for individual consumers or CNPJ for businesses consumers) */
            tax_id: string;
        }

        /**
         * If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method.
         */
        export interface Cashapp {}

        /**
         * If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
         */
        export interface CustomerBalance {}

        /**
         * If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method.
         */
        export interface Eps {
            /** The customer's bank. */
            bank?: Eps.Bank;
        }

        export namespace Eps {
            /**
             * The customer's bank.
             */
            export type Bank =
                | "arzte_und_apotheker_bank"
                | "austrian_anadi_bank_ag"
                | "bank_austria"
                | "bankhaus_carl_spangler"
                | "bankhaus_schelhammer_und_schattera_ag"
                | "bawag_psk_ag"
                | "bks_bank_ag"
                | "brull_kallmus_bank_ag"
                | "btv_vier_lander_bank"
                | "capital_bank_grawe_gruppe_ag"
                | "deutsche_bank_ag"
                | "dolomitenbank"
                | "easybank_ag"
                | "erste_bank_und_sparkassen"
                | "hypo_alpeadriabank_international_ag"
                | "hypo_bank_burgenland_aktiengesellschaft"
                | "hypo_noe_lb_fur_niederosterreich_u_wien"
                | "hypo_oberosterreich_salzburg_steiermark"
                | "hypo_tirol_bank_ag"
                | "hypo_vorarlberg_bank_ag"
                | "marchfelder_bank"
                | "oberbank_ag"
                | "raiffeisen_bankengruppe_osterreich"
                | "schoellerbank_ag"
                | "sparda_bank_wien"
                | "volksbank_gruppe"
                | "volkskreditbank_ag"
                | "vr_bank_braunau";
            export const Bank = {
                ArzteUndApothekerBank: "arzte_und_apotheker_bank",
                AustrianAnadiBankAg: "austrian_anadi_bank_ag",
                BankAustria: "bank_austria",
                BankhausCarlSpangler: "bankhaus_carl_spangler",
                BankhausSchelhammerUndSchatteraAg: "bankhaus_schelhammer_und_schattera_ag",
                BawagPskAg: "bawag_psk_ag",
                BksBankAg: "bks_bank_ag",
                BrullKallmusBankAg: "brull_kallmus_bank_ag",
                BtvVierLanderBank: "btv_vier_lander_bank",
                CapitalBankGraweGruppeAg: "capital_bank_grawe_gruppe_ag",
                DeutscheBankAg: "deutsche_bank_ag",
                Dolomitenbank: "dolomitenbank",
                EasybankAg: "easybank_ag",
                ErsteBankUndSparkassen: "erste_bank_und_sparkassen",
                HypoAlpeadriabankInternationalAg: "hypo_alpeadriabank_international_ag",
                HypoBankBurgenlandAktiengesellschaft: "hypo_bank_burgenland_aktiengesellschaft",
                HypoNoeLbFurNiederosterreichUWien: "hypo_noe_lb_fur_niederosterreich_u_wien",
                HypoOberosterreichSalzburgSteiermark: "hypo_oberosterreich_salzburg_steiermark",
                HypoTirolBankAg: "hypo_tirol_bank_ag",
                HypoVorarlbergBankAg: "hypo_vorarlberg_bank_ag",
                MarchfelderBank: "marchfelder_bank",
                OberbankAg: "oberbank_ag",
                RaiffeisenBankengruppeOsterreich: "raiffeisen_bankengruppe_osterreich",
                SchoellerbankAg: "schoellerbank_ag",
                SpardaBankWien: "sparda_bank_wien",
                VolksbankGruppe: "volksbank_gruppe",
                VolkskreditbankAg: "volkskreditbank_ag",
                VrBankBraunau: "vr_bank_braunau",
            } as const;
        }

        /**
         * If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method.
         */
        export interface Fpx {
            /** Account holder type for FPX transaction */
            account_holder_type?: Fpx.AccountHolderType;
            /** The customer's bank. */
            bank: Fpx.Bank;
        }

        export namespace Fpx {
            /**
             * Account holder type for FPX transaction
             */
            export type AccountHolderType = "company" | "individual";
            export const AccountHolderType = {
                Company: "company",
                Individual: "individual",
            } as const;
            /**
             * The customer's bank.
             */
            export type Bank =
                | "affin_bank"
                | "agrobank"
                | "alliance_bank"
                | "ambank"
                | "bank_islam"
                | "bank_muamalat"
                | "bank_of_china"
                | "bank_rakyat"
                | "bsn"
                | "cimb"
                | "deutsche_bank"
                | "hong_leong_bank"
                | "hsbc"
                | "kfh"
                | "maybank2e"
                | "maybank2u"
                | "ocbc"
                | "pb_enterprise"
                | "public_bank"
                | "rhb"
                | "standard_chartered"
                | "uob";
            export const Bank = {
                AffinBank: "affin_bank",
                Agrobank: "agrobank",
                AllianceBank: "alliance_bank",
                Ambank: "ambank",
                BankIslam: "bank_islam",
                BankMuamalat: "bank_muamalat",
                BankOfChina: "bank_of_china",
                BankRakyat: "bank_rakyat",
                Bsn: "bsn",
                Cimb: "cimb",
                DeutscheBank: "deutsche_bank",
                HongLeongBank: "hong_leong_bank",
                Hsbc: "hsbc",
                Kfh: "kfh",
                Maybank2E: "maybank2e",
                Maybank2U: "maybank2u",
                Ocbc: "ocbc",
                PbEnterprise: "pb_enterprise",
                PublicBank: "public_bank",
                Rhb: "rhb",
                StandardChartered: "standard_chartered",
                Uob: "uob",
            } as const;
        }

        /**
         * If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
         */
        export interface Giropay {}

        /**
         * If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
         */
        export interface Grabpay {}

        /**
         * If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method.
         */
        export interface Ideal {
            /** The customer's bank. Only use this parameter for existing customers. Don't use it for new customers. */
            bank?: Ideal.Bank;
        }

        export namespace Ideal {
            /**
             * The customer's bank. Only use this parameter for existing customers. Don't use it for new customers.
             */
            export type Bank =
                | "abn_amro"
                | "asn_bank"
                | "bunq"
                | "handelsbanken"
                | "ing"
                | "knab"
                | "moneyou"
                | "n26"
                | "nn"
                | "rabobank"
                | "regiobank"
                | "revolut"
                | "sns_bank"
                | "triodos_bank"
                | "van_lanschot"
                | "yoursafe";
            export const Bank = {
                AbnAmro: "abn_amro",
                AsnBank: "asn_bank",
                Bunq: "bunq",
                Handelsbanken: "handelsbanken",
                Ing: "ing",
                Knab: "knab",
                Moneyou: "moneyou",
                N26: "n26",
                Nn: "nn",
                Rabobank: "rabobank",
                Regiobank: "regiobank",
                Revolut: "revolut",
                SnsBank: "sns_bank",
                TriodosBank: "triodos_bank",
                VanLanschot: "van_lanschot",
                Yoursafe: "yoursafe",
            } as const;
        }

        /**
         * If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
         */
        export interface InteracPresent {}

        /**
         * If this is a `kakao_pay` PaymentMethod, this hash contains details about the Kakao Pay payment method.
         */
        export interface KakaoPay {}

        /**
         * If this is a `klarna` PaymentMethod, this hash contains details about the Klarna payment method.
         */
        export interface Klarna {
            /** Customer's date of birth */
            dob?: Klarna.Dob;
        }

        export namespace Klarna {
            /**
             * Customer's date of birth
             */
            export interface Dob {
                /** The day of birth, between 1 and 31. */
                day: number;
                /** The month of birth, between 1 and 12. */
                month: number;
                /** The four-digit year of birth. */
                year: number;
            }
        }

        /**
         * If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
         */
        export interface Konbini {}

        /**
         * If this is a `kr_card` PaymentMethod, this hash contains details about the Korean Card payment method.
         */
        export interface KrCard {}

        /**
         * If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
         */
        export interface Link {}

        /**
         * If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method.
         */
        export interface Mobilepay {}

        /**
         * If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method.
         */
        export interface Multibanco {}

        /**
         * If this is a `naver_pay` PaymentMethod, this hash contains details about the Naver Pay payment method.
         */
        export interface NaverPay {
            /** Whether to use Naver Pay points or a card to fund this transaction. If not provided, this defaults to `card`. */
            funding?: NaverPay.Funding;
        }

        export namespace NaverPay {
            /**
             * Whether to use Naver Pay points or a card to fund this transaction. If not provided, this defaults to `card`.
             */
            export type Funding = "card" | "points";
            export const Funding = {
                Card: "card",
                Points: "points",
            } as const;
        }

        /**
         * If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
         */
        export interface Oxxo {}

        /**
         * If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method.
         */
        export interface P24 {
            /** The customer's bank. */
            bank?: P24.Bank;
        }

        export namespace P24 {
            /**
             * The customer's bank.
             */
            export type Bank =
                | "alior_bank"
                | "bank_millennium"
                | "bank_nowy_bfg_sa"
                | "bank_pekao_sa"
                | "banki_spbdzielcze"
                | "blik"
                | "bnp_paribas"
                | "boz"
                | "citi_handlowy"
                | "credit_agricole"
                | "envelobank"
                | "etransfer_pocztowy24"
                | "getin_bank"
                | "ideabank"
                | "ing"
                | "inteligo"
                | "mbank_mtransfer"
                | "nest_przelew"
                | "noble_pay"
                | "pbac_z_ipko"
                | "plus_bank"
                | "santander_przelew24"
                | "tmobile_usbugi_bankowe"
                | "toyota_bank"
                | "velobank"
                | "volkswagen_bank";
            export const Bank = {
                AliorBank: "alior_bank",
                BankMillennium: "bank_millennium",
                BankNowyBfgSa: "bank_nowy_bfg_sa",
                BankPekaoSa: "bank_pekao_sa",
                BankiSpbdzielcze: "banki_spbdzielcze",
                Blik: "blik",
                BnpParibas: "bnp_paribas",
                Boz: "boz",
                CitiHandlowy: "citi_handlowy",
                CreditAgricole: "credit_agricole",
                Envelobank: "envelobank",
                EtransferPocztowy24: "etransfer_pocztowy24",
                GetinBank: "getin_bank",
                Ideabank: "ideabank",
                Ing: "ing",
                Inteligo: "inteligo",
                MbankMtransfer: "mbank_mtransfer",
                NestPrzelew: "nest_przelew",
                NoblePay: "noble_pay",
                PbacZIpko: "pbac_z_ipko",
                PlusBank: "plus_bank",
                SantanderPrzelew24: "santander_przelew24",
                TmobileUsbugiBankowe: "tmobile_usbugi_bankowe",
                ToyotaBank: "toyota_bank",
                Velobank: "velobank",
                VolkswagenBank: "volkswagen_bank",
            } as const;
        }

        /**
         * If this is a `pay_by_bank` PaymentMethod, this hash contains details about the PayByBank payment method.
         */
        export interface PayByBank {}

        /**
         * If this is a `payco` PaymentMethod, this hash contains details about the PAYCO payment method.
         */
        export interface Payco {}

        /**
         * If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
         */
        export interface Paynow {}

        /**
         * If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method.
         */
        export interface Paypal {}

        /**
         * If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method.
         */
        export interface Pix {}

        /**
         * If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method.
         */
        export interface Promptpay {}

        /**
         * Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
         */
        export interface RadarOptions {
            /** A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments. */
            session?: string;
        }

        /**
         * If this is a `Revolut Pay` PaymentMethod, this hash contains details about the Revolut Pay payment method.
         */
        export interface RevolutPay {}

        /**
         * If this is a `samsung_pay` PaymentMethod, this hash contains details about the SamsungPay payment method.
         */
        export interface SamsungPay {}

        /**
         * If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.
         */
        export interface SepaDebit {
            /** IBAN of the bank account. */
            iban: string;
        }

        /**
         * If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method.
         */
        export interface Sofort {
            /** Two-letter ISO code representing the country the bank account is located in. */
            country: Sofort.Country;
        }

        export namespace Sofort {
            /**
             * Two-letter ISO code representing the country the bank account is located in.
             */
            export type Country = "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
            export const Country = {
                At: "AT",
                Be: "BE",
                De: "DE",
                Es: "ES",
                It: "IT",
                Nl: "NL",
            } as const;
        }

        /**
         * If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method.
         */
        export interface Swish {}

        /**
         * If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method.
         */
        export interface Twint {}

        /**
         * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
         */
        export type Type =
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "blik"
            | "boleto"
            | "cashapp"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip";
        export const Type = {
            AcssDebit: "acss_debit",
            Affirm: "affirm",
            AfterpayClearpay: "afterpay_clearpay",
            Alipay: "alipay",
            Alma: "alma",
            AmazonPay: "amazon_pay",
            AuBecsDebit: "au_becs_debit",
            BacsDebit: "bacs_debit",
            Bancontact: "bancontact",
            Blik: "blik",
            Boleto: "boleto",
            Cashapp: "cashapp",
            CustomerBalance: "customer_balance",
            Eps: "eps",
            Fpx: "fpx",
            Giropay: "giropay",
            Grabpay: "grabpay",
            Ideal: "ideal",
            KakaoPay: "kakao_pay",
            Klarna: "klarna",
            Konbini: "konbini",
            KrCard: "kr_card",
            Link: "link",
            Mobilepay: "mobilepay",
            Multibanco: "multibanco",
            NaverPay: "naver_pay",
            Oxxo: "oxxo",
            P24: "p24",
            PayByBank: "pay_by_bank",
            Payco: "payco",
            Paynow: "paynow",
            Paypal: "paypal",
            Pix: "pix",
            Promptpay: "promptpay",
            RevolutPay: "revolut_pay",
            SamsungPay: "samsung_pay",
            SepaDebit: "sepa_debit",
            Sofort: "sofort",
            Swish: "swish",
            Twint: "twint",
            UsBankAccount: "us_bank_account",
            WechatPay: "wechat_pay",
            Zip: "zip",
        } as const;

        /**
         * If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method.
         */
        export interface UsBankAccount {
            /** Account holder type: individual or company. */
            account_holder_type?: UsBankAccount.AccountHolderType;
            /** Account number of the bank account. */
            account_number?: string;
            /** Account type: checkings or savings. Defaults to checking if omitted. */
            account_type?: UsBankAccount.AccountType;
            /** The ID of a Financial Connections Account to use as a payment method. */
            financial_connections_account?: string;
            /** Routing number of the bank account. */
            routing_number?: string;
        }

        export namespace UsBankAccount {
            /**
             * Account holder type: individual or company.
             */
            export type AccountHolderType = "company" | "individual";
            export const AccountHolderType = {
                Company: "company",
                Individual: "individual",
            } as const;
            /**
             * Account type: checkings or savings. Defaults to checking if omitted.
             */
            export type AccountType = "checking" | "savings";
            export const AccountType = {
                Checking: "checking",
                Savings: "savings",
            } as const;
        }

        /**
         * If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
         */
        export interface WechatPay {}

        /**
         * If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method.
         */
        export interface Zip {}
    }

    /**
     * Indicates that you intend to make future payments with this ConfirmationToken's payment method.
     *
     * The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
     */
    export type SetupFutureUsage = "off_session" | "on_session";
    export const SetupFutureUsage = {
        OffSession: "off_session",
        OnSession: "on_session",
    } as const;

    /**
     * Shipping information for this ConfirmationToken.
     */
    export interface Shipping {
        /** Shipping address */
        address: Shipping.Address;
        /** Recipient name. */
        name: string;
        /** Recipient phone (including extension) */
        phone?: Shipping.Phone;
    }

    export namespace Shipping {
        /**
         * Shipping address
         */
        export interface Address {
            /** City, district, suburb, town, or village. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string;
            /** Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string;
            /** ZIP or postal code. */
            postal_code?: string;
            /** State, county, province, or region. */
            state?: string;
        }

        /**
         * Recipient phone (including extension)
         */
        export type Phone = string | "";
    }
}
