/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface PaymentLinkUpdateRequest {
    /** Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated. */
    active?: boolean;
    /** Behavior after the purchase is complete. */
    after_completion?: PaymentLinkUpdateRequest.AfterCompletion;
    /** Enables user redeemable promotion codes. */
    allow_promotion_codes?: boolean;
    /** Configuration for automatic tax collection. */
    automatic_tax?: PaymentLinkUpdateRequest.AutomaticTax;
    /** Configuration for collecting the customer's billing address. Defaults to `auto`. */
    billing_address_collection?: PaymentLinkUpdateRequest.BillingAddressCollection;
    /** Collect additional information from your customer using custom fields. Up to 3 fields are supported. */
    custom_fields?: PaymentLinkUpdateRequest.CustomFields;
    /** Display additional text for your customers using custom text. */
    custom_text?: PaymentLinkUpdateRequest.CustomText;
    /** Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers). */
    customer_creation?: PaymentLinkUpdateRequest.CustomerCreation;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** The custom message to be displayed to a customer when a payment link is no longer active. */
    inactive_message?: PaymentLinkUpdateRequest.InactiveMessage;
    /** Generate a post-purchase Invoice for one-time payments. */
    invoice_creation?: PaymentLinkUpdateRequest.InvoiceCreation;
    /** The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported. */
    line_items?: PaymentLinkUpdateRequest.LineItems.Item[];
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link. */
    metadata?: Record<string, string>;
    /** A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode. */
    payment_intent_data?: PaymentLinkUpdateRequest.PaymentIntentData;
    /**
     * Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.
     *
     * Can only be set in `subscription` mode. Defaults to `always`.
     *
     * If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
     */
    payment_method_collection?: PaymentLinkUpdateRequest.PaymentMethodCollection;
    /** The list of payment method types that customers can use. Pass an empty string to enable dynamic payment methods that use your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
    payment_method_types?: PaymentLinkUpdateRequest.PaymentMethodTypes;
    /**
     * Controls phone number collection settings during checkout.
     *
     * We recommend that you review your privacy policy and check with your legal contacts.
     */
    phone_number_collection?: PaymentLinkUpdateRequest.PhoneNumberCollection;
    /** Settings that restrict the usage of a payment link. */
    restrictions?: PaymentLinkUpdateRequest.Restrictions;
    /** Configuration for collecting the customer's shipping address. */
    shipping_address_collection?: PaymentLinkUpdateRequest.ShippingAddressCollection;
    /** Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`). */
    submit_type?: PaymentLinkUpdateRequest.SubmitType;
    /** When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`. */
    subscription_data?: PaymentLinkUpdateRequest.SubscriptionData;
    /** Controls tax ID collection during checkout. */
    tax_id_collection?: PaymentLinkUpdateRequest.TaxIdCollection;
}

export namespace PaymentLinkUpdateRequest {
    /**
     * Behavior after the purchase is complete.
     */
    export interface AfterCompletion {
        /** Configuration when `type=hosted_confirmation`. */
        hosted_confirmation?: AfterCompletion.HostedConfirmation;
        /** Configuration when `type=redirect`. */
        redirect?: AfterCompletion.Redirect;
        /** The specified behavior after the purchase is complete. Either `redirect` or `hosted_confirmation`. */
        type: AfterCompletion.Type;
    }

    export namespace AfterCompletion {
        /**
         * Configuration when `type=hosted_confirmation`.
         */
        export interface HostedConfirmation {
            /** A custom message to display to the customer after the purchase is complete. */
            custom_message?: string;
        }

        /**
         * Configuration when `type=redirect`.
         */
        export interface Redirect {
            /** The URL the customer will be redirected to after the purchase is complete. You can embed `{CHECKOUT_SESSION_ID}` into the URL to have the `id` of the completed [checkout session](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-id) included. */
            url: string;
        }

        /**
         * The specified behavior after the purchase is complete. Either `redirect` or `hosted_confirmation`.
         */
        export type Type = "hosted_confirmation" | "redirect";
        export const Type = {
            HostedConfirmation: "hosted_confirmation",
            Redirect: "redirect",
        } as const;
    }

    /**
     * Configuration for automatic tax collection.
     */
    export interface AutomaticTax {
        /**
         * Set to `true` to [calculate tax automatically](https://docs.stripe.com/tax) using the customer's location.
         *
         * Enabling this parameter causes the payment link to collect any billing address information necessary for tax calculation.
         */
        enabled: boolean;
        /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
        liability?: AutomaticTax.Liability;
    }

    export namespace AutomaticTax {
        /**
         * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
         */
        export interface Liability {
            /** The connected account being referenced when `type` is `account`. */
            account?: string;
            /** Type of the account referenced in the request. */
            type: Liability.Type;
        }

        export namespace Liability {
            /**
             * Type of the account referenced in the request.
             */
            export type Type = "account" | "self";
            export const Type = {
                Account: "account",
                Self: "self",
            } as const;
        }
    }

    /**
     * Configuration for collecting the customer's billing address. Defaults to `auto`.
     */
    export type BillingAddressCollection = "auto" | "required";
    export const BillingAddressCollection = {
        Auto: "auto",
        Required: "required",
    } as const;
    /**
     * Collect additional information from your customer using custom fields. Up to 3 fields are supported.
     */
    export type CustomFields =
        | {
              dropdown?:
                  | {
                        options: {
                            label: string;
                            value: string;
                        }[];
                    }
                  | undefined;
              key: string;
              label: {
                  custom: string;
                  type: "custom";
              };
              numeric?:
                  | {
                        maximum_length?: number | undefined;
                        minimum_length?: number | undefined;
                    }
                  | undefined;
              optional?: boolean | undefined;
              text?:
                  | {
                        maximum_length?: number | undefined;
                        minimum_length?: number | undefined;
                    }
                  | undefined;
              type: "dropdown" | "numeric" | "text";
          }[]
        | "";

    /**
     * Display additional text for your customers using custom text.
     */
    export interface CustomText {
        /** Custom text that should be displayed after the payment confirmation button. */
        after_submit?: CustomText.AfterSubmit;
        /** Custom text that should be displayed alongside shipping address collection. */
        shipping_address?: CustomText.ShippingAddress;
        /** Custom text that should be displayed alongside the payment confirmation button. */
        submit?: CustomText.Submit;
        /** Custom text that should be displayed in place of the default terms of service agreement text. */
        terms_of_service_acceptance?: CustomText.TermsOfServiceAcceptance;
    }

    export namespace CustomText {
        /**
         * Custom text that should be displayed after the payment confirmation button.
         */
        export type AfterSubmit =
            | {
                  message: string;
              }
            | "";
        /**
         * Custom text that should be displayed alongside shipping address collection.
         */
        export type ShippingAddress =
            | {
                  message: string;
              }
            | "";
        /**
         * Custom text that should be displayed alongside the payment confirmation button.
         */
        export type Submit =
            | {
                  message: string;
              }
            | "";
        /**
         * Custom text that should be displayed in place of the default terms of service agreement text.
         */
        export type TermsOfServiceAcceptance =
            | {
                  message: string;
              }
            | "";
    }

    /**
     * Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
     */
    export type CustomerCreation = "always" | "if_required";
    export const CustomerCreation = {
        Always: "always",
        IfRequired: "if_required",
    } as const;
    /**
     * The custom message to be displayed to a customer when a payment link is no longer active.
     */
    export type InactiveMessage = string | "";

    /**
     * Generate a post-purchase Invoice for one-time payments.
     */
    export interface InvoiceCreation {
        /** Whether the feature is enabled */
        enabled: boolean;
        /** Invoice PDF configuration. */
        invoice_data?: InvoiceCreation.InvoiceData;
    }

    export namespace InvoiceCreation {
        /**
         * Invoice PDF configuration.
         */
        export interface InvoiceData {
            /** The account tax IDs associated with the invoice. */
            account_tax_ids?: InvoiceData.AccountTaxIds;
            /** Default custom fields to be displayed on invoices for this customer. */
            custom_fields?: InvoiceData.CustomFields;
            /** An arbitrary string attached to the object. Often useful for displaying to users. */
            description?: string;
            /** Default footer to be displayed on invoices for this customer. */
            footer?: string;
            /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
            issuer?: InvoiceData.Issuer;
            /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
            metadata?: InvoiceData.Metadata;
            /** Default options for invoice PDF rendering for this customer. */
            rendering_options?: InvoiceData.RenderingOptions;
        }

        export namespace InvoiceData {
            /**
             * The account tax IDs associated with the invoice.
             */
            export type AccountTaxIds = string[] | "";
            /**
             * Default custom fields to be displayed on invoices for this customer.
             */
            export type CustomFields =
                | {
                      name: string;
                      value: string;
                  }[]
                | "";

            /**
             * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
             */
            export interface Issuer {
                /** The connected account being referenced when `type` is `account`. */
                account?: string;
                /** Type of the account referenced in the request. */
                type: Issuer.Type;
            }

            export namespace Issuer {
                /**
                 * Type of the account referenced in the request.
                 */
                export type Type = "account" | "self";
                export const Type = {
                    Account: "account",
                    Self: "self",
                } as const;
            }

            /**
             * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
             */
            export type Metadata = Record<string, string> | "";
            /**
             * Default options for invoice PDF rendering for this customer.
             */
            export type RenderingOptions =
                | {
                      amount_tax_display?: ("" | "exclude_tax" | "include_inclusive_tax") | undefined;
                  }
                | "";
        }
    }

    export type LineItems = LineItems.Item[];

    export namespace LineItems {
        export interface Item {
            /** When set, provides configuration for this item’s quantity to be adjusted by the customer during checkout. */
            adjustable_quantity?: Item.AdjustableQuantity;
            /** The ID of an existing line item on the payment link. */
            id: string;
            /** The quantity of the line item being purchased. */
            quantity?: number;
        }

        export namespace Item {
            /**
             * When set, provides configuration for this item’s quantity to be adjusted by the customer during checkout.
             */
            export interface AdjustableQuantity {
                /** Set to true if the quantity can be adjusted to any non-negative Integer. */
                enabled: boolean;
                /** The maximum quantity the customer can purchase. By default this value is 99. You can specify a value up to 999. */
                maximum?: number;
                /** The minimum quantity the customer can purchase. By default this value is 0. If there is only one item in the cart then that item's quantity cannot go down to 0. */
                minimum?: number;
            }
        }
    }

    /**
     * A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode.
     */
    export interface PaymentIntentData {
        /** An arbitrary string attached to the object. Often useful for displaying to users. */
        description?: PaymentIntentData.Description;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will declaratively set metadata on [Payment Intents](https://stripe.com/docs/api/payment_intents) generated from this payment link. Unlike object-level metadata, this field is declarative. Updates will clear prior values. */
        metadata?: PaymentIntentData.Metadata;
        /**
         * Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
         *
         * Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
         */
        statement_descriptor?: PaymentIntentData.StatementDescriptor;
        /** Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. */
        statement_descriptor_suffix?: PaymentIntentData.StatementDescriptorSuffix;
        /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details. */
        transfer_group?: PaymentIntentData.TransferGroup;
    }

    export namespace PaymentIntentData {
        /**
         * An arbitrary string attached to the object. Often useful for displaying to users.
         */
        export type Description = string | "";
        /**
         * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will declaratively set metadata on [Payment Intents](https://stripe.com/docs/api/payment_intents) generated from this payment link. Unlike object-level metadata, this field is declarative. Updates will clear prior values.
         */
        export type Metadata = Record<string, string> | "";
        /**
         * Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
         *
         * Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
         */
        export type StatementDescriptor = string | "";
        /**
         * Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
         */
        export type StatementDescriptorSuffix = string | "";
        /**
         * A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
         */
        export type TransferGroup = string | "";
    }

    /**
     * Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.
     *
     * Can only be set in `subscription` mode. Defaults to `always`.
     *
     * If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
     */
    export type PaymentMethodCollection = "always" | "if_required";
    export const PaymentMethodCollection = {
        Always: "always",
        IfRequired: "if_required",
    } as const;
    /**
     * The list of payment method types that customers can use. Pass an empty string to enable dynamic payment methods that use your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
     */
    export type PaymentMethodTypes =
        | (
              | "affirm"
              | "afterpay_clearpay"
              | "alipay"
              | "alma"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "blik"
              | "boleto"
              | "card"
              | "cashapp"
              | "eps"
              | "fpx"
              | "giropay"
              | "grabpay"
              | "ideal"
              | "klarna"
              | "konbini"
              | "link"
              | "mobilepay"
              | "multibanco"
              | "oxxo"
              | "p24"
              | "pay_by_bank"
              | "paynow"
              | "paypal"
              | "pix"
              | "promptpay"
              | "sepa_debit"
              | "sofort"
              | "swish"
              | "twint"
              | "us_bank_account"
              | "wechat_pay"
              | "zip"
          )[]
        | "";

    /**
     * Controls phone number collection settings during checkout.
     *
     * We recommend that you review your privacy policy and check with your legal contacts.
     */
    export interface PhoneNumberCollection {
        /** Set to `true` to enable phone number collection. */
        enabled: boolean;
    }

    /**
     * Settings that restrict the usage of a payment link.
     */
    export type Restrictions =
        | {
              completed_sessions: {
                  limit: number;
              };
          }
        | "";
    /**
     * Configuration for collecting the customer's shipping address.
     */
    export type ShippingAddressCollection =
        | {
              allowed_countries: (
                  | "AC"
                  | "AD"
                  | "AE"
                  | "AF"
                  | "AG"
                  | "AI"
                  | "AL"
                  | "AM"
                  | "AO"
                  | "AQ"
                  | "AR"
                  | "AT"
                  | "AU"
                  | "AW"
                  | "AX"
                  | "AZ"
                  | "BA"
                  | "BB"
                  | "BD"
                  | "BE"
                  | "BF"
                  | "BG"
                  | "BH"
                  | "BI"
                  | "BJ"
                  | "BL"
                  | "BM"
                  | "BN"
                  | "BO"
                  | "BQ"
                  | "BR"
                  | "BS"
                  | "BT"
                  | "BV"
                  | "BW"
                  | "BY"
                  | "BZ"
                  | "CA"
                  | "CD"
                  | "CF"
                  | "CG"
                  | "CH"
                  | "CI"
                  | "CK"
                  | "CL"
                  | "CM"
                  | "CN"
                  | "CO"
                  | "CR"
                  | "CV"
                  | "CW"
                  | "CY"
                  | "CZ"
                  | "DE"
                  | "DJ"
                  | "DK"
                  | "DM"
                  | "DO"
                  | "DZ"
                  | "EC"
                  | "EE"
                  | "EG"
                  | "EH"
                  | "ER"
                  | "ES"
                  | "ET"
                  | "FI"
                  | "FJ"
                  | "FK"
                  | "FO"
                  | "FR"
                  | "GA"
                  | "GB"
                  | "GD"
                  | "GE"
                  | "GF"
                  | "GG"
                  | "GH"
                  | "GI"
                  | "GL"
                  | "GM"
                  | "GN"
                  | "GP"
                  | "GQ"
                  | "GR"
                  | "GS"
                  | "GT"
                  | "GU"
                  | "GW"
                  | "GY"
                  | "HK"
                  | "HN"
                  | "HR"
                  | "HT"
                  | "HU"
                  | "ID"
                  | "IE"
                  | "IL"
                  | "IM"
                  | "IN"
                  | "IO"
                  | "IQ"
                  | "IS"
                  | "IT"
                  | "JE"
                  | "JM"
                  | "JO"
                  | "JP"
                  | "KE"
                  | "KG"
                  | "KH"
                  | "KI"
                  | "KM"
                  | "KN"
                  | "KR"
                  | "KW"
                  | "KY"
                  | "KZ"
                  | "LA"
                  | "LB"
                  | "LC"
                  | "LI"
                  | "LK"
                  | "LR"
                  | "LS"
                  | "LT"
                  | "LU"
                  | "LV"
                  | "LY"
                  | "MA"
                  | "MC"
                  | "MD"
                  | "ME"
                  | "MF"
                  | "MG"
                  | "MK"
                  | "ML"
                  | "MM"
                  | "MN"
                  | "MO"
                  | "MQ"
                  | "MR"
                  | "MS"
                  | "MT"
                  | "MU"
                  | "MV"
                  | "MW"
                  | "MX"
                  | "MY"
                  | "MZ"
                  | "NA"
                  | "NC"
                  | "NE"
                  | "NG"
                  | "NI"
                  | "NL"
                  | "NO"
                  | "NP"
                  | "NR"
                  | "NU"
                  | "NZ"
                  | "OM"
                  | "PA"
                  | "PE"
                  | "PF"
                  | "PG"
                  | "PH"
                  | "PK"
                  | "PL"
                  | "PM"
                  | "PN"
                  | "PR"
                  | "PS"
                  | "PT"
                  | "PY"
                  | "QA"
                  | "RE"
                  | "RO"
                  | "RS"
                  | "RU"
                  | "RW"
                  | "SA"
                  | "SB"
                  | "SC"
                  | "SD"
                  | "SE"
                  | "SG"
                  | "SH"
                  | "SI"
                  | "SJ"
                  | "SK"
                  | "SL"
                  | "SM"
                  | "SN"
                  | "SO"
                  | "SR"
                  | "SS"
                  | "ST"
                  | "SV"
                  | "SX"
                  | "SZ"
                  | "TA"
                  | "TC"
                  | "TD"
                  | "TF"
                  | "TG"
                  | "TH"
                  | "TJ"
                  | "TK"
                  | "TL"
                  | "TM"
                  | "TN"
                  | "TO"
                  | "TR"
                  | "TT"
                  | "TV"
                  | "TW"
                  | "TZ"
                  | "UA"
                  | "UG"
                  | "US"
                  | "UY"
                  | "UZ"
                  | "VA"
                  | "VC"
                  | "VE"
                  | "VG"
                  | "VN"
                  | "VU"
                  | "WF"
                  | "WS"
                  | "XK"
                  | "YE"
                  | "YT"
                  | "ZA"
                  | "ZM"
                  | "ZW"
                  | "ZZ"
              )[];
          }
        | "";
    /**
     * Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
     */
    export type SubmitType = "auto" | "book" | "donate" | "pay" | "subscribe";
    export const SubmitType = {
        Auto: "auto",
        Book: "book",
        Donate: "donate",
        Pay: "pay",
        Subscribe: "subscribe",
    } as const;

    /**
     * When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.
     */
    export interface SubscriptionData {
        /** All invoices will be billed using the specified settings. */
        invoice_settings?: SubscriptionData.InvoiceSettings;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will declaratively set metadata on [Subscriptions](https://stripe.com/docs/api/subscriptions) generated from this payment link. Unlike object-level metadata, this field is declarative. Updates will clear prior values. */
        metadata?: SubscriptionData.Metadata;
        /** Integer representing the number of trial period days before the customer is charged for the first time. Has to be at least 1. */
        trial_period_days?: SubscriptionData.TrialPeriodDays;
        /** Settings related to subscription trials. */
        trial_settings?: SubscriptionData.TrialSettings;
    }

    export namespace SubscriptionData {
        /**
         * All invoices will be billed using the specified settings.
         */
        export interface InvoiceSettings {
            /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
            issuer?: InvoiceSettings.Issuer;
        }

        export namespace InvoiceSettings {
            /**
             * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
             */
            export interface Issuer {
                /** The connected account being referenced when `type` is `account`. */
                account?: string;
                /** Type of the account referenced in the request. */
                type: Issuer.Type;
            }

            export namespace Issuer {
                /**
                 * Type of the account referenced in the request.
                 */
                export type Type = "account" | "self";
                export const Type = {
                    Account: "account",
                    Self: "self",
                } as const;
            }
        }

        /**
         * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will declaratively set metadata on [Subscriptions](https://stripe.com/docs/api/subscriptions) generated from this payment link. Unlike object-level metadata, this field is declarative. Updates will clear prior values.
         */
        export type Metadata = Record<string, string> | "";
        /**
         * Integer representing the number of trial period days before the customer is charged for the first time. Has to be at least 1.
         */
        export type TrialPeriodDays = number | "";
        /**
         * Settings related to subscription trials.
         */
        export type TrialSettings =
            | {
                  end_behavior: {
                      missing_payment_method: "cancel" | "create_invoice" | "pause";
                  };
              }
            | "";
    }

    /**
     * Controls tax ID collection during checkout.
     */
    export interface TaxIdCollection {
        /** Enable tax ID collection during checkout. Defaults to `false`. */
        enabled: boolean;
        /** Describes whether a tax ID is required during checkout. Defaults to `never`. */
        required?: TaxIdCollection.Required;
    }

    export namespace TaxIdCollection {
        /**
         * Describes whether a tax ID is required during checkout. Defaults to `never`.
         */
        export type Required = "if_supported" | "never";
        export const Required = {
            IfSupported: "if_supported",
            Never: "never",
        } as const;
    }
}
