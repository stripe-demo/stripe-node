/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface PaymentMethodUpdateRequest {
    /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`. */
    allow_redisplay?: PaymentMethodUpdateRequest.AllowRedisplay;
    /** Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods. */
    billing_details?: PaymentMethodUpdateRequest.BillingDetails;
    /** If this is a `card` PaymentMethod, this hash contains the user's card details. */
    card?: PaymentMethodUpdateRequest.Card;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** If this is an `Link` PaymentMethod, this hash contains details about the Link payment method. */
    link?: PaymentMethodUpdateRequest.Link;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: PaymentMethodUpdateRequest.Metadata;
    /** If this is a `naver_pay` PaymentMethod, this hash contains details about the Naver Pay payment method. */
    naver_pay?: PaymentMethodUpdateRequest.NaverPay;
    /** If this is a `pay_by_bank` PaymentMethod, this hash contains details about the PayByBank payment method. */
    pay_by_bank?: PaymentMethodUpdateRequest.PayByBank;
    /** If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method. */
    us_bank_account?: PaymentMethodUpdateRequest.UsBankAccount;
}

export namespace PaymentMethodUpdateRequest {
    /**
     * This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
     */
    export type AllowRedisplay = "always" | "limited" | "unspecified";
    export const AllowRedisplay = {
        Always: "always",
        Limited: "limited",
        Unspecified: "unspecified",
    } as const;

    /**
     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
     */
    export interface BillingDetails {
        /** Billing address. */
        address?: BillingDetails.Address;
        /** Email address. */
        email?: BillingDetails.Email;
        /** Full name. */
        name?: BillingDetails.Name;
        /** Billing phone number (including extension). */
        phone?: BillingDetails.Phone;
    }

    export namespace BillingDetails {
        /**
         * Billing address.
         */
        export type Address =
            | {
                  city?: string | undefined;
                  country?: string | undefined;
                  line1?: string | undefined;
                  line2?: string | undefined;
                  postal_code?: string | undefined;
                  state?: string | undefined;
              }
            | "";
        /**
         * Email address.
         */
        export type Email = string | "";
        /**
         * Full name.
         */
        export type Name = string | "";
        /**
         * Billing phone number (including extension).
         */
        export type Phone = string | "";
    }

    /**
     * If this is a `card` PaymentMethod, this hash contains the user's card details.
     */
    export interface Card {
        /** Two-digit number representing the card's expiration month. */
        exp_month?: number;
        /** Four-digit number representing the card's expiration year. */
        exp_year?: number;
        /** Contains information about card networks used to process the payment. */
        networks?: Card.Networks;
    }

    export namespace Card {
        /**
         * Contains information about card networks used to process the payment.
         */
        export interface Networks {
            /** The customer's preferred card network for co-branded cards. Supports `cartes_bancaires`, `mastercard`, or `visa`. Selection of a network that does not apply to the card will be stored as `invalid_preference` on the card. */
            preferred?: Networks.Preferred;
        }

        export namespace Networks {
            /**
             * The customer's preferred card network for co-branded cards. Supports `cartes_bancaires`, `mastercard`, or `visa`. Selection of a network that does not apply to the card will be stored as `invalid_preference` on the card.
             */
            export type Preferred = "" | "cartes_bancaires" | "mastercard" | "visa";
            export const Preferred = {
                Empty: "",
                CartesBancaires: "cartes_bancaires",
                Mastercard: "mastercard",
                Visa: "visa",
            } as const;
        }
    }

    /**
     * If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
     */
    export interface Link {}

    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type Metadata = Record<string, string> | "";

    /**
     * If this is a `naver_pay` PaymentMethod, this hash contains details about the Naver Pay payment method.
     */
    export interface NaverPay {
        /** Whether to use Naver Pay points or a card to fund this transaction. If not provided, this defaults to `card`. */
        funding?: NaverPay.Funding;
    }

    export namespace NaverPay {
        /**
         * Whether to use Naver Pay points or a card to fund this transaction. If not provided, this defaults to `card`.
         */
        export type Funding = "card" | "points";
        export const Funding = {
            Card: "card",
            Points: "points",
        } as const;
    }

    /**
     * If this is a `pay_by_bank` PaymentMethod, this hash contains details about the PayByBank payment method.
     */
    export interface PayByBank {}

    /**
     * If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method.
     */
    export interface UsBankAccount {
        /** Bank account holder type. */
        account_holder_type?: UsBankAccount.AccountHolderType;
        /** Bank account type. */
        account_type?: UsBankAccount.AccountType;
    }

    export namespace UsBankAccount {
        /**
         * Bank account holder type.
         */
        export type AccountHolderType = "company" | "individual";
        export const AccountHolderType = {
            Company: "company",
            Individual: "individual",
        } as const;
        /**
         * Bank account type.
         */
        export type AccountType = "checking" | "savings";
        export const AccountType = {
            Checking: "checking",
            Savings: "savings",
        } as const;
    }
}
