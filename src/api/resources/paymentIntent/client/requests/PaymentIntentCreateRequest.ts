/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         amount: 1,
 *         currency: "currency"
 *     }
 */
export interface PaymentIntentCreateRequest {
    /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
    amount: number;
    /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
    application_fee_amount?: number;
    /** When you enable this parameter, this PaymentIntent accepts payment methods that you enable in the Dashboard and that are compatible with this PaymentIntent's other parameters. */
    automatic_payment_methods?: PaymentIntentCreateRequest.AutomaticPaymentMethods;
    /** Controls when the funds will be captured from the customer's account. */
    capture_method?: PaymentIntentCreateRequest.CaptureMethod;
    /** Set to `true` to attempt to [confirm this PaymentIntent](https://stripe.com/docs/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://stripe.com/docs/api/payment_intents/confirm). */
    confirm?: boolean;
    /** Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment. */
    confirmation_method?: PaymentIntentCreateRequest.ConfirmationMethod;
    /**
     * ID of the ConfirmationToken used to confirm this PaymentIntent.
     *
     * If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
     */
    confirmation_token?: string;
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: string;
    /**
     * ID of the Customer this PaymentIntent belongs to, if one exists.
     *
     * Payment methods attached to other Customers cannot be used with this PaymentIntent.
     *
     * If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
     */
    customer?: string;
    /** An arbitrary string attached to the object. Often useful for displaying to users. */
    description?: string;
    /** Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. Use this parameter for simpler integrations that don't handle customer actions, such as [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
    error_on_requires_action?: boolean;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** ID of the mandate that's used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
    mandate?: string;
    /** This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
    mandate_data?: PaymentIntentCreateRequest.MandateData;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: Record<string, string>;
    /** Set to `true` to indicate that the customer isn't in your checkout flow during this payment attempt and can't authenticate. Use this parameter in scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
    off_session?: PaymentIntentCreateRequest.OffSession;
    /** The Stripe account ID that these funds are intended for. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
    on_behalf_of?: string;
    /**
     * ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.
     *
     * If you don't provide the `payment_method` parameter or the `source` parameter with `confirm=true`, `source` automatically populates with `customer.default_source` to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward.
     */
    payment_method?: string;
    /** The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this PaymentIntent. */
    payment_method_configuration?: string;
    /**
     * If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
     * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
     * property on the PaymentIntent.
     */
    payment_method_data?: PaymentIntentCreateRequest.PaymentMethodData;
    /** Payment method-specific configuration for this PaymentIntent. */
    payment_method_options?: PaymentIntentCreateRequest.PaymentMethodOptions;
    /** The list of payment method types (for example, a card) that this PaymentIntent can use. If you don't provide this, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
    payment_method_types?: string[];
    /** Options to configure Radar. Learn more about [Radar Sessions](https://stripe.com/docs/radar/radar-session). */
    radar_options?: PaymentIntentCreateRequest.RadarOptions;
    /** Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
    receipt_email?: string;
    /** The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
    return_url?: string;
    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    setup_future_usage?: PaymentIntentCreateRequest.SetupFutureUsage;
    /** Shipping information for this PaymentIntent. */
    shipping?: PaymentIntentCreateRequest.Shipping;
    /**
     * Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
     *
     * Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
     */
    statement_descriptor?: string;
    /** Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. */
    statement_descriptor_suffix?: string;
    /**
     * The parameters that you can use to automatically create a Transfer.
     * Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
     */
    transfer_data?: PaymentIntentCreateRequest.TransferData;
    /** A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers). */
    transfer_group?: string;
    /** Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions. */
    use_stripe_sdk?: boolean;
}

export namespace PaymentIntentCreateRequest {
    /**
     * When you enable this parameter, this PaymentIntent accepts payment methods that you enable in the Dashboard and that are compatible with this PaymentIntent's other parameters.
     */
    export interface AutomaticPaymentMethods {
        /**
         * Controls whether this PaymentIntent will accept redirect-based payment methods.
         *
         * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
         */
        allow_redirects?: AutomaticPaymentMethods.AllowRedirects;
        /** Whether this feature is enabled. */
        enabled: boolean;
    }

    export namespace AutomaticPaymentMethods {
        /**
         * Controls whether this PaymentIntent will accept redirect-based payment methods.
         *
         * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
         */
        export type AllowRedirects = "always" | "never";
        export const AllowRedirects = {
            Always: "always",
            Never: "never",
        } as const;
    }

    /**
     * Controls when the funds will be captured from the customer's account.
     */
    export type CaptureMethod = "automatic" | "automatic_async" | "manual";
    export const CaptureMethod = {
        Automatic: "automatic",
        AutomaticAsync: "automatic_async",
        Manual: "manual",
    } as const;
    /**
     * Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
     */
    export type ConfirmationMethod = "automatic" | "manual";
    export const ConfirmationMethod = {
        Automatic: "automatic",
        Manual: "manual",
    } as const;
    /**
     * This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
     */
    export type MandateData =
        | {
              customer_acceptance: {
                  accepted_at?: number | undefined;
                  offline?: {} | undefined;
                  online?:
                      | {
                            ip_address: string;
                            user_agent: string;
                        }
                      | undefined;
                  type: "offline" | "online";
              };
          }
        | "";
    /**
     * Set to `true` to indicate that the customer isn't in your checkout flow during this payment attempt and can't authenticate. Use this parameter in scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
     */
    export type OffSession = boolean | "one_off" | "recurring";

    /**
     * If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
     * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
     * property on the PaymentIntent.
     */
    export interface PaymentMethodData {
        /** If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method. */
        acss_debit?: PaymentMethodData.AcssDebit;
        /** If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method. */
        affirm?: PaymentMethodData.Affirm;
        /** If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method. */
        afterpay_clearpay?: PaymentMethodData.AfterpayClearpay;
        /** If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method. */
        alipay?: PaymentMethodData.Alipay;
        /** This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`. */
        allow_redisplay?: PaymentMethodData.AllowRedisplay;
        /** If this is a Alma PaymentMethod, this hash contains details about the Alma payment method. */
        alma?: PaymentMethodData.Alma;
        /** If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method. */
        amazon_pay?: PaymentMethodData.AmazonPay;
        /** If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account. */
        au_becs_debit?: PaymentMethodData.AuBecsDebit;
        /** If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account. */
        bacs_debit?: PaymentMethodData.BacsDebit;
        /** If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method. */
        bancontact?: PaymentMethodData.Bancontact;
        /** Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods. */
        billing_details?: PaymentMethodData.BillingDetails;
        /** If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method. */
        blik?: PaymentMethodData.Blik;
        /** If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method. */
        boleto?: PaymentMethodData.Boleto;
        /** If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method. */
        cashapp?: PaymentMethodData.Cashapp;
        /** If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method. */
        customer_balance?: PaymentMethodData.CustomerBalance;
        /** If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method. */
        eps?: PaymentMethodData.Eps;
        /** If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method. */
        fpx?: PaymentMethodData.Fpx;
        /** If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method. */
        giropay?: PaymentMethodData.Giropay;
        /** If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method. */
        grabpay?: PaymentMethodData.Grabpay;
        /** If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method. */
        ideal?: PaymentMethodData.Ideal;
        /** If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method. */
        interac_present?: PaymentMethodData.InteracPresent;
        /** If this is a `kakao_pay` PaymentMethod, this hash contains details about the Kakao Pay payment method. */
        kakao_pay?: PaymentMethodData.KakaoPay;
        /** If this is a `klarna` PaymentMethod, this hash contains details about the Klarna payment method. */
        klarna?: PaymentMethodData.Klarna;
        /** If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method. */
        konbini?: PaymentMethodData.Konbini;
        /** If this is a `kr_card` PaymentMethod, this hash contains details about the Korean Card payment method. */
        kr_card?: PaymentMethodData.KrCard;
        /** If this is an `Link` PaymentMethod, this hash contains details about the Link payment method. */
        link?: PaymentMethodData.Link;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        metadata?: Record<string, string>;
        /** If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method. */
        mobilepay?: PaymentMethodData.Mobilepay;
        /** If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method. */
        multibanco?: PaymentMethodData.Multibanco;
        /** If this is a `naver_pay` PaymentMethod, this hash contains details about the Naver Pay payment method. */
        naver_pay?: PaymentMethodData.NaverPay;
        /** If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method. */
        oxxo?: PaymentMethodData.Oxxo;
        /** If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method. */
        p24?: PaymentMethodData.P24;
        /** If this is a `pay_by_bank` PaymentMethod, this hash contains details about the PayByBank payment method. */
        pay_by_bank?: PaymentMethodData.PayByBank;
        /** If this is a `payco` PaymentMethod, this hash contains details about the PAYCO payment method. */
        payco?: PaymentMethodData.Payco;
        /** If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method. */
        paynow?: PaymentMethodData.Paynow;
        /** If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method. */
        paypal?: PaymentMethodData.Paypal;
        /** If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method. */
        pix?: PaymentMethodData.Pix;
        /** If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method. */
        promptpay?: PaymentMethodData.Promptpay;
        /** Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information. */
        radar_options?: PaymentMethodData.RadarOptions;
        /** If this is a `Revolut Pay` PaymentMethod, this hash contains details about the Revolut Pay payment method. */
        revolut_pay?: PaymentMethodData.RevolutPay;
        /** If this is a `samsung_pay` PaymentMethod, this hash contains details about the SamsungPay payment method. */
        samsung_pay?: PaymentMethodData.SamsungPay;
        /** If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account. */
        sepa_debit?: PaymentMethodData.SepaDebit;
        /** If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method. */
        sofort?: PaymentMethodData.Sofort;
        /** If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method. */
        swish?: PaymentMethodData.Swish;
        /** If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method. */
        twint?: PaymentMethodData.Twint;
        /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
        type: PaymentMethodData.Type;
        /** If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method. */
        us_bank_account?: PaymentMethodData.UsBankAccount;
        /** If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method. */
        wechat_pay?: PaymentMethodData.WechatPay;
        /** If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method. */
        zip?: PaymentMethodData.Zip;
    }

    export namespace PaymentMethodData {
        /**
         * If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method.
         */
        export interface AcssDebit {
            /** Customer's bank account number. */
            account_number: string;
            /** Institution number of the customer's bank. */
            institution_number: string;
            /** Transit number of the customer's bank. */
            transit_number: string;
        }

        /**
         * If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
         */
        export interface Affirm {}

        /**
         * If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
         */
        export interface AfterpayClearpay {}

        /**
         * If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
         */
        export interface Alipay {}

        /**
         * This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
         */
        export type AllowRedisplay = "always" | "limited" | "unspecified";
        export const AllowRedisplay = {
            Always: "always",
            Limited: "limited",
            Unspecified: "unspecified",
        } as const;

        /**
         * If this is a Alma PaymentMethod, this hash contains details about the Alma payment method.
         */
        export interface Alma {}

        /**
         * If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method.
         */
        export interface AmazonPay {}

        /**
         * If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account.
         */
        export interface AuBecsDebit {
            /** The account number for the bank account. */
            account_number: string;
            /** Bank-State-Branch number of the bank account. */
            bsb_number: string;
        }

        /**
         * If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account.
         */
        export interface BacsDebit {
            /** Account number of the bank account that the funds will be debited from. */
            account_number?: string;
            /** Sort code of the bank account. (e.g., `10-20-30`) */
            sort_code?: string;
        }

        /**
         * If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
         */
        export interface Bancontact {}

        /**
         * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
         */
        export interface BillingDetails {
            /** Billing address. */
            address?: BillingDetails.Address;
            /** Email address. */
            email?: BillingDetails.Email;
            /** Full name. */
            name?: BillingDetails.Name;
            /** Billing phone number (including extension). */
            phone?: BillingDetails.Phone;
        }

        export namespace BillingDetails {
            /**
             * Billing address.
             */
            export type Address =
                | {
                      city?: string | undefined;
                      country?: string | undefined;
                      line1?: string | undefined;
                      line2?: string | undefined;
                      postal_code?: string | undefined;
                      state?: string | undefined;
                  }
                | "";
            /**
             * Email address.
             */
            export type Email = string | "";
            /**
             * Full name.
             */
            export type Name = string | "";
            /**
             * Billing phone number (including extension).
             */
            export type Phone = string | "";
        }

        /**
         * If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method.
         */
        export interface Blik {}

        /**
         * If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method.
         */
        export interface Boleto {
            /** The tax ID of the customer (CPF for individual consumers or CNPJ for businesses consumers) */
            tax_id: string;
        }

        /**
         * If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method.
         */
        export interface Cashapp {}

        /**
         * If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
         */
        export interface CustomerBalance {}

        /**
         * If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method.
         */
        export interface Eps {
            /** The customer's bank. */
            bank?: Eps.Bank;
        }

        export namespace Eps {
            /**
             * The customer's bank.
             */
            export type Bank =
                | "arzte_und_apotheker_bank"
                | "austrian_anadi_bank_ag"
                | "bank_austria"
                | "bankhaus_carl_spangler"
                | "bankhaus_schelhammer_und_schattera_ag"
                | "bawag_psk_ag"
                | "bks_bank_ag"
                | "brull_kallmus_bank_ag"
                | "btv_vier_lander_bank"
                | "capital_bank_grawe_gruppe_ag"
                | "deutsche_bank_ag"
                | "dolomitenbank"
                | "easybank_ag"
                | "erste_bank_und_sparkassen"
                | "hypo_alpeadriabank_international_ag"
                | "hypo_bank_burgenland_aktiengesellschaft"
                | "hypo_noe_lb_fur_niederosterreich_u_wien"
                | "hypo_oberosterreich_salzburg_steiermark"
                | "hypo_tirol_bank_ag"
                | "hypo_vorarlberg_bank_ag"
                | "marchfelder_bank"
                | "oberbank_ag"
                | "raiffeisen_bankengruppe_osterreich"
                | "schoellerbank_ag"
                | "sparda_bank_wien"
                | "volksbank_gruppe"
                | "volkskreditbank_ag"
                | "vr_bank_braunau";
            export const Bank = {
                ArzteUndApothekerBank: "arzte_und_apotheker_bank",
                AustrianAnadiBankAg: "austrian_anadi_bank_ag",
                BankAustria: "bank_austria",
                BankhausCarlSpangler: "bankhaus_carl_spangler",
                BankhausSchelhammerUndSchatteraAg: "bankhaus_schelhammer_und_schattera_ag",
                BawagPskAg: "bawag_psk_ag",
                BksBankAg: "bks_bank_ag",
                BrullKallmusBankAg: "brull_kallmus_bank_ag",
                BtvVierLanderBank: "btv_vier_lander_bank",
                CapitalBankGraweGruppeAg: "capital_bank_grawe_gruppe_ag",
                DeutscheBankAg: "deutsche_bank_ag",
                Dolomitenbank: "dolomitenbank",
                EasybankAg: "easybank_ag",
                ErsteBankUndSparkassen: "erste_bank_und_sparkassen",
                HypoAlpeadriabankInternationalAg: "hypo_alpeadriabank_international_ag",
                HypoBankBurgenlandAktiengesellschaft: "hypo_bank_burgenland_aktiengesellschaft",
                HypoNoeLbFurNiederosterreichUWien: "hypo_noe_lb_fur_niederosterreich_u_wien",
                HypoOberosterreichSalzburgSteiermark: "hypo_oberosterreich_salzburg_steiermark",
                HypoTirolBankAg: "hypo_tirol_bank_ag",
                HypoVorarlbergBankAg: "hypo_vorarlberg_bank_ag",
                MarchfelderBank: "marchfelder_bank",
                OberbankAg: "oberbank_ag",
                RaiffeisenBankengruppeOsterreich: "raiffeisen_bankengruppe_osterreich",
                SchoellerbankAg: "schoellerbank_ag",
                SpardaBankWien: "sparda_bank_wien",
                VolksbankGruppe: "volksbank_gruppe",
                VolkskreditbankAg: "volkskreditbank_ag",
                VrBankBraunau: "vr_bank_braunau",
            } as const;
        }

        /**
         * If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method.
         */
        export interface Fpx {
            /** Account holder type for FPX transaction */
            account_holder_type?: Fpx.AccountHolderType;
            /** The customer's bank. */
            bank: Fpx.Bank;
        }

        export namespace Fpx {
            /**
             * Account holder type for FPX transaction
             */
            export type AccountHolderType = "company" | "individual";
            export const AccountHolderType = {
                Company: "company",
                Individual: "individual",
            } as const;
            /**
             * The customer's bank.
             */
            export type Bank =
                | "affin_bank"
                | "agrobank"
                | "alliance_bank"
                | "ambank"
                | "bank_islam"
                | "bank_muamalat"
                | "bank_of_china"
                | "bank_rakyat"
                | "bsn"
                | "cimb"
                | "deutsche_bank"
                | "hong_leong_bank"
                | "hsbc"
                | "kfh"
                | "maybank2e"
                | "maybank2u"
                | "ocbc"
                | "pb_enterprise"
                | "public_bank"
                | "rhb"
                | "standard_chartered"
                | "uob";
            export const Bank = {
                AffinBank: "affin_bank",
                Agrobank: "agrobank",
                AllianceBank: "alliance_bank",
                Ambank: "ambank",
                BankIslam: "bank_islam",
                BankMuamalat: "bank_muamalat",
                BankOfChina: "bank_of_china",
                BankRakyat: "bank_rakyat",
                Bsn: "bsn",
                Cimb: "cimb",
                DeutscheBank: "deutsche_bank",
                HongLeongBank: "hong_leong_bank",
                Hsbc: "hsbc",
                Kfh: "kfh",
                Maybank2E: "maybank2e",
                Maybank2U: "maybank2u",
                Ocbc: "ocbc",
                PbEnterprise: "pb_enterprise",
                PublicBank: "public_bank",
                Rhb: "rhb",
                StandardChartered: "standard_chartered",
                Uob: "uob",
            } as const;
        }

        /**
         * If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
         */
        export interface Giropay {}

        /**
         * If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
         */
        export interface Grabpay {}

        /**
         * If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method.
         */
        export interface Ideal {
            /** The customer's bank. Only use this parameter for existing customers. Don't use it for new customers. */
            bank?: Ideal.Bank;
        }

        export namespace Ideal {
            /**
             * The customer's bank. Only use this parameter for existing customers. Don't use it for new customers.
             */
            export type Bank =
                | "abn_amro"
                | "asn_bank"
                | "bunq"
                | "handelsbanken"
                | "ing"
                | "knab"
                | "moneyou"
                | "n26"
                | "nn"
                | "rabobank"
                | "regiobank"
                | "revolut"
                | "sns_bank"
                | "triodos_bank"
                | "van_lanschot"
                | "yoursafe";
            export const Bank = {
                AbnAmro: "abn_amro",
                AsnBank: "asn_bank",
                Bunq: "bunq",
                Handelsbanken: "handelsbanken",
                Ing: "ing",
                Knab: "knab",
                Moneyou: "moneyou",
                N26: "n26",
                Nn: "nn",
                Rabobank: "rabobank",
                Regiobank: "regiobank",
                Revolut: "revolut",
                SnsBank: "sns_bank",
                TriodosBank: "triodos_bank",
                VanLanschot: "van_lanschot",
                Yoursafe: "yoursafe",
            } as const;
        }

        /**
         * If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
         */
        export interface InteracPresent {}

        /**
         * If this is a `kakao_pay` PaymentMethod, this hash contains details about the Kakao Pay payment method.
         */
        export interface KakaoPay {}

        /**
         * If this is a `klarna` PaymentMethod, this hash contains details about the Klarna payment method.
         */
        export interface Klarna {
            /** Customer's date of birth */
            dob?: Klarna.Dob;
        }

        export namespace Klarna {
            /**
             * Customer's date of birth
             */
            export interface Dob {
                /** The day of birth, between 1 and 31. */
                day: number;
                /** The month of birth, between 1 and 12. */
                month: number;
                /** The four-digit year of birth. */
                year: number;
            }
        }

        /**
         * If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
         */
        export interface Konbini {}

        /**
         * If this is a `kr_card` PaymentMethod, this hash contains details about the Korean Card payment method.
         */
        export interface KrCard {}

        /**
         * If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
         */
        export interface Link {}

        /**
         * If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method.
         */
        export interface Mobilepay {}

        /**
         * If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method.
         */
        export interface Multibanco {}

        /**
         * If this is a `naver_pay` PaymentMethod, this hash contains details about the Naver Pay payment method.
         */
        export interface NaverPay {
            /** Whether to use Naver Pay points or a card to fund this transaction. If not provided, this defaults to `card`. */
            funding?: NaverPay.Funding;
        }

        export namespace NaverPay {
            /**
             * Whether to use Naver Pay points or a card to fund this transaction. If not provided, this defaults to `card`.
             */
            export type Funding = "card" | "points";
            export const Funding = {
                Card: "card",
                Points: "points",
            } as const;
        }

        /**
         * If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
         */
        export interface Oxxo {}

        /**
         * If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method.
         */
        export interface P24 {
            /** The customer's bank. */
            bank?: P24.Bank;
        }

        export namespace P24 {
            /**
             * The customer's bank.
             */
            export type Bank =
                | "alior_bank"
                | "bank_millennium"
                | "bank_nowy_bfg_sa"
                | "bank_pekao_sa"
                | "banki_spbdzielcze"
                | "blik"
                | "bnp_paribas"
                | "boz"
                | "citi_handlowy"
                | "credit_agricole"
                | "envelobank"
                | "etransfer_pocztowy24"
                | "getin_bank"
                | "ideabank"
                | "ing"
                | "inteligo"
                | "mbank_mtransfer"
                | "nest_przelew"
                | "noble_pay"
                | "pbac_z_ipko"
                | "plus_bank"
                | "santander_przelew24"
                | "tmobile_usbugi_bankowe"
                | "toyota_bank"
                | "velobank"
                | "volkswagen_bank";
            export const Bank = {
                AliorBank: "alior_bank",
                BankMillennium: "bank_millennium",
                BankNowyBfgSa: "bank_nowy_bfg_sa",
                BankPekaoSa: "bank_pekao_sa",
                BankiSpbdzielcze: "banki_spbdzielcze",
                Blik: "blik",
                BnpParibas: "bnp_paribas",
                Boz: "boz",
                CitiHandlowy: "citi_handlowy",
                CreditAgricole: "credit_agricole",
                Envelobank: "envelobank",
                EtransferPocztowy24: "etransfer_pocztowy24",
                GetinBank: "getin_bank",
                Ideabank: "ideabank",
                Ing: "ing",
                Inteligo: "inteligo",
                MbankMtransfer: "mbank_mtransfer",
                NestPrzelew: "nest_przelew",
                NoblePay: "noble_pay",
                PbacZIpko: "pbac_z_ipko",
                PlusBank: "plus_bank",
                SantanderPrzelew24: "santander_przelew24",
                TmobileUsbugiBankowe: "tmobile_usbugi_bankowe",
                ToyotaBank: "toyota_bank",
                Velobank: "velobank",
                VolkswagenBank: "volkswagen_bank",
            } as const;
        }

        /**
         * If this is a `pay_by_bank` PaymentMethod, this hash contains details about the PayByBank payment method.
         */
        export interface PayByBank {}

        /**
         * If this is a `payco` PaymentMethod, this hash contains details about the PAYCO payment method.
         */
        export interface Payco {}

        /**
         * If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
         */
        export interface Paynow {}

        /**
         * If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method.
         */
        export interface Paypal {}

        /**
         * If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method.
         */
        export interface Pix {}

        /**
         * If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method.
         */
        export interface Promptpay {}

        /**
         * Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
         */
        export interface RadarOptions {
            /** A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments. */
            session?: string;
        }

        /**
         * If this is a `Revolut Pay` PaymentMethod, this hash contains details about the Revolut Pay payment method.
         */
        export interface RevolutPay {}

        /**
         * If this is a `samsung_pay` PaymentMethod, this hash contains details about the SamsungPay payment method.
         */
        export interface SamsungPay {}

        /**
         * If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.
         */
        export interface SepaDebit {
            /** IBAN of the bank account. */
            iban: string;
        }

        /**
         * If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method.
         */
        export interface Sofort {
            /** Two-letter ISO code representing the country the bank account is located in. */
            country: Sofort.Country;
        }

        export namespace Sofort {
            /**
             * Two-letter ISO code representing the country the bank account is located in.
             */
            export type Country = "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
            export const Country = {
                At: "AT",
                Be: "BE",
                De: "DE",
                Es: "ES",
                It: "IT",
                Nl: "NL",
            } as const;
        }

        /**
         * If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method.
         */
        export interface Swish {}

        /**
         * If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method.
         */
        export interface Twint {}

        /**
         * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
         */
        export type Type =
            | "acss_debit"
            | "affirm"
            | "afterpay_clearpay"
            | "alipay"
            | "alma"
            | "amazon_pay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "blik"
            | "boleto"
            | "cashapp"
            | "customer_balance"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "kakao_pay"
            | "klarna"
            | "konbini"
            | "kr_card"
            | "link"
            | "mobilepay"
            | "multibanco"
            | "naver_pay"
            | "oxxo"
            | "p24"
            | "pay_by_bank"
            | "payco"
            | "paynow"
            | "paypal"
            | "pix"
            | "promptpay"
            | "revolut_pay"
            | "samsung_pay"
            | "sepa_debit"
            | "sofort"
            | "swish"
            | "twint"
            | "us_bank_account"
            | "wechat_pay"
            | "zip";
        export const Type = {
            AcssDebit: "acss_debit",
            Affirm: "affirm",
            AfterpayClearpay: "afterpay_clearpay",
            Alipay: "alipay",
            Alma: "alma",
            AmazonPay: "amazon_pay",
            AuBecsDebit: "au_becs_debit",
            BacsDebit: "bacs_debit",
            Bancontact: "bancontact",
            Blik: "blik",
            Boleto: "boleto",
            Cashapp: "cashapp",
            CustomerBalance: "customer_balance",
            Eps: "eps",
            Fpx: "fpx",
            Giropay: "giropay",
            Grabpay: "grabpay",
            Ideal: "ideal",
            KakaoPay: "kakao_pay",
            Klarna: "klarna",
            Konbini: "konbini",
            KrCard: "kr_card",
            Link: "link",
            Mobilepay: "mobilepay",
            Multibanco: "multibanco",
            NaverPay: "naver_pay",
            Oxxo: "oxxo",
            P24: "p24",
            PayByBank: "pay_by_bank",
            Payco: "payco",
            Paynow: "paynow",
            Paypal: "paypal",
            Pix: "pix",
            Promptpay: "promptpay",
            RevolutPay: "revolut_pay",
            SamsungPay: "samsung_pay",
            SepaDebit: "sepa_debit",
            Sofort: "sofort",
            Swish: "swish",
            Twint: "twint",
            UsBankAccount: "us_bank_account",
            WechatPay: "wechat_pay",
            Zip: "zip",
        } as const;

        /**
         * If this is an `us_bank_account` PaymentMethod, this hash contains details about the US bank account payment method.
         */
        export interface UsBankAccount {
            /** Account holder type: individual or company. */
            account_holder_type?: UsBankAccount.AccountHolderType;
            /** Account number of the bank account. */
            account_number?: string;
            /** Account type: checkings or savings. Defaults to checking if omitted. */
            account_type?: UsBankAccount.AccountType;
            /** The ID of a Financial Connections Account to use as a payment method. */
            financial_connections_account?: string;
            /** Routing number of the bank account. */
            routing_number?: string;
        }

        export namespace UsBankAccount {
            /**
             * Account holder type: individual or company.
             */
            export type AccountHolderType = "company" | "individual";
            export const AccountHolderType = {
                Company: "company",
                Individual: "individual",
            } as const;
            /**
             * Account type: checkings or savings. Defaults to checking if omitted.
             */
            export type AccountType = "checking" | "savings";
            export const AccountType = {
                Checking: "checking",
                Savings: "savings",
            } as const;
        }

        /**
         * If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
         */
        export interface WechatPay {}

        /**
         * If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method.
         */
        export interface Zip {}
    }

    /**
     * Payment method-specific configuration for this PaymentIntent.
     */
    export interface PaymentMethodOptions {
        /** If this is a `acss_debit` PaymentMethod, this sub-hash contains details about the ACSS Debit payment method options. */
        acss_debit?: PaymentMethodOptions.AcssDebit;
        /** If this is an `affirm` PaymentMethod, this sub-hash contains details about the Affirm payment method options. */
        affirm?: PaymentMethodOptions.Affirm;
        /** If this is a `afterpay_clearpay` PaymentMethod, this sub-hash contains details about the Afterpay Clearpay payment method options. */
        afterpay_clearpay?: PaymentMethodOptions.AfterpayClearpay;
        /** If this is a `alipay` PaymentMethod, this sub-hash contains details about the Alipay payment method options. */
        alipay?: PaymentMethodOptions.Alipay;
        /** If this is a `alma` PaymentMethod, this sub-hash contains details about the Alma payment method options. */
        alma?: PaymentMethodOptions.Alma;
        /** If this is a `amazon_pay` PaymentMethod, this sub-hash contains details about the Amazon Pay payment method options. */
        amazon_pay?: PaymentMethodOptions.AmazonPay;
        /** If this is a `au_becs_debit` PaymentMethod, this sub-hash contains details about the AU BECS Direct Debit payment method options. */
        au_becs_debit?: PaymentMethodOptions.AuBecsDebit;
        /** If this is a `bacs_debit` PaymentMethod, this sub-hash contains details about the BACS Debit payment method options. */
        bacs_debit?: PaymentMethodOptions.BacsDebit;
        /** If this is a `bancontact` PaymentMethod, this sub-hash contains details about the Bancontact payment method options. */
        bancontact?: PaymentMethodOptions.Bancontact;
        /** If this is a `blik` PaymentMethod, this sub-hash contains details about the BLIK payment method options. */
        blik?: PaymentMethodOptions.Blik;
        /** If this is a `boleto` PaymentMethod, this sub-hash contains details about the Boleto payment method options. */
        boleto?: PaymentMethodOptions.Boleto;
        /** Configuration for any card payments attempted on this PaymentIntent. */
        card?: PaymentMethodOptions.Card;
        /** If this is a `card_present` PaymentMethod, this sub-hash contains details about the Card Present payment method options. */
        card_present?: PaymentMethodOptions.CardPresent;
        /** If this is a `cashapp` PaymentMethod, this sub-hash contains details about the Cash App Pay payment method options. */
        cashapp?: PaymentMethodOptions.Cashapp;
        /** If this is a `customer balance` PaymentMethod, this sub-hash contains details about the customer balance payment method options. */
        customer_balance?: PaymentMethodOptions.CustomerBalance;
        /** If this is a `eps` PaymentMethod, this sub-hash contains details about the EPS payment method options. */
        eps?: PaymentMethodOptions.Eps;
        /** If this is a `fpx` PaymentMethod, this sub-hash contains details about the FPX payment method options. */
        fpx?: PaymentMethodOptions.Fpx;
        /** If this is a `giropay` PaymentMethod, this sub-hash contains details about the Giropay payment method options. */
        giropay?: PaymentMethodOptions.Giropay;
        /** If this is a `grabpay` PaymentMethod, this sub-hash contains details about the Grabpay payment method options. */
        grabpay?: PaymentMethodOptions.Grabpay;
        /** If this is a `ideal` PaymentMethod, this sub-hash contains details about the Ideal payment method options. */
        ideal?: PaymentMethodOptions.Ideal;
        /** If this is a `interac_present` PaymentMethod, this sub-hash contains details about the Card Present payment method options. */
        interac_present?: PaymentMethodOptions.InteracPresent;
        /** If this is a `kakao_pay` PaymentMethod, this sub-hash contains details about the Kakao Pay payment method options. */
        kakao_pay?: PaymentMethodOptions.KakaoPay;
        /** If this is a `klarna` PaymentMethod, this sub-hash contains details about the Klarna payment method options. */
        klarna?: PaymentMethodOptions.Klarna;
        /** If this is a `konbini` PaymentMethod, this sub-hash contains details about the Konbini payment method options. */
        konbini?: PaymentMethodOptions.Konbini;
        /** If this is a `kr_card` PaymentMethod, this sub-hash contains details about the KR Card payment method options. */
        kr_card?: PaymentMethodOptions.KrCard;
        /** If this is a `link` PaymentMethod, this sub-hash contains details about the Link payment method options. */
        link?: PaymentMethodOptions.Link;
        /** If this is a `MobilePay` PaymentMethod, this sub-hash contains details about the MobilePay payment method options. */
        mobilepay?: PaymentMethodOptions.Mobilepay;
        /** If this is a `multibanco` PaymentMethod, this sub-hash contains details about the Multibanco payment method options. */
        multibanco?: PaymentMethodOptions.Multibanco;
        /** If this is a `naver_pay` PaymentMethod, this sub-hash contains details about the Naver Pay payment method options. */
        naver_pay?: PaymentMethodOptions.NaverPay;
        /** If this is a `oxxo` PaymentMethod, this sub-hash contains details about the OXXO payment method options. */
        oxxo?: PaymentMethodOptions.Oxxo;
        /** If this is a `p24` PaymentMethod, this sub-hash contains details about the Przelewy24 payment method options. */
        p24?: PaymentMethodOptions.P24;
        /** If this is a `pay_by_bank` PaymentMethod, this sub-hash contains details about the PayByBank payment method options. */
        pay_by_bank?: PaymentMethodOptions.PayByBank;
        /** If this is a `payco` PaymentMethod, this sub-hash contains details about the PAYCO payment method options. */
        payco?: PaymentMethodOptions.Payco;
        /** If this is a `paynow` PaymentMethod, this sub-hash contains details about the PayNow payment method options. */
        paynow?: PaymentMethodOptions.Paynow;
        /** If this is a `paypal` PaymentMethod, this sub-hash contains details about the PayPal payment method options. */
        paypal?: PaymentMethodOptions.Paypal;
        /** If this is a `pix` PaymentMethod, this sub-hash contains details about the Pix payment method options. */
        pix?: PaymentMethodOptions.Pix;
        /** If this is a `promptpay` PaymentMethod, this sub-hash contains details about the PromptPay payment method options. */
        promptpay?: PaymentMethodOptions.Promptpay;
        /** If this is a `revolut_pay` PaymentMethod, this sub-hash contains details about the Revolut Pay payment method options. */
        revolut_pay?: PaymentMethodOptions.RevolutPay;
        /** If this is a `samsung_pay` PaymentMethod, this sub-hash contains details about the Samsung Pay payment method options. */
        samsung_pay?: PaymentMethodOptions.SamsungPay;
        /** If this is a `sepa_debit` PaymentIntent, this sub-hash contains details about the SEPA Debit payment method options. */
        sepa_debit?: PaymentMethodOptions.SepaDebit;
        /** If this is a `sofort` PaymentMethod, this sub-hash contains details about the SOFORT payment method options. */
        sofort?: PaymentMethodOptions.Sofort;
        /** If this is a `Swish` PaymentMethod, this sub-hash contains details about the Swish payment method options. */
        swish?: PaymentMethodOptions.Swish;
        /** If this is a `twint` PaymentMethod, this sub-hash contains details about the TWINT payment method options. */
        twint?: PaymentMethodOptions.Twint;
        /** If this is a `us_bank_account` PaymentMethod, this sub-hash contains details about the US bank account payment method options. */
        us_bank_account?: PaymentMethodOptions.UsBankAccount;
        /** If this is a `wechat_pay` PaymentMethod, this sub-hash contains details about the WeChat Pay payment method options. */
        wechat_pay?: PaymentMethodOptions.WechatPay;
        /** If this is a `zip` PaymentMethod, this sub-hash contains details about the Zip payment method options. */
        zip?: PaymentMethodOptions.Zip;
    }

    export namespace PaymentMethodOptions {
        /**
         * If this is a `acss_debit` PaymentMethod, this sub-hash contains details about the ACSS Debit payment method options.
         */
        export type AcssDebit =
            | {
                  mandate_options?:
                      | {
                            custom_mandate_url?: (string | "") | undefined;
                            interval_description?: string | undefined;
                            payment_schedule?: ("combined" | "interval" | "sporadic") | undefined;
                            transaction_type?: ("business" | "personal") | undefined;
                        }
                      | undefined;
                  setup_future_usage?: ("" | "none" | "off_session" | "on_session") | undefined;
                  verification_method?: ("automatic" | "instant" | "microdeposits") | undefined;
              }
            | "";
        /**
         * If this is an `affirm` PaymentMethod, this sub-hash contains details about the Affirm payment method options.
         */
        export type Affirm =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  preferred_locale?: string | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `afterpay_clearpay` PaymentMethod, this sub-hash contains details about the Afterpay Clearpay payment method options.
         */
        export type AfterpayClearpay =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  reference?: string | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `alipay` PaymentMethod, this sub-hash contains details about the Alipay payment method options.
         */
        export type Alipay =
            | {
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `alma` PaymentMethod, this sub-hash contains details about the Alma payment method options.
         */
        export type Alma =
            | {
                  capture_method?: ("" | "manual") | undefined;
              }
            | "";
        /**
         * If this is a `amazon_pay` PaymentMethod, this sub-hash contains details about the Amazon Pay payment method options.
         */
        export type AmazonPay =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `au_becs_debit` PaymentMethod, this sub-hash contains details about the AU BECS Direct Debit payment method options.
         */
        export type AuBecsDebit =
            | {
                  setup_future_usage?: ("" | "none" | "off_session" | "on_session") | undefined;
              }
            | "";
        /**
         * If this is a `bacs_debit` PaymentMethod, this sub-hash contains details about the BACS Debit payment method options.
         */
        export type BacsDebit =
            | {
                  mandate_options?:
                      | {
                            reference_prefix?: (string | "") | undefined;
                        }
                      | undefined;
                  setup_future_usage?: ("" | "none" | "off_session" | "on_session") | undefined;
              }
            | "";
        /**
         * If this is a `bancontact` PaymentMethod, this sub-hash contains details about the Bancontact payment method options.
         */
        export type Bancontact =
            | {
                  preferred_language?: ("de" | "en" | "fr" | "nl") | undefined;
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `blik` PaymentMethod, this sub-hash contains details about the BLIK payment method options.
         */
        export type Blik =
            | {
                  code?: string | undefined;
                  setup_future_usage?: ("" | "none") | undefined;
              }
            | "";
        /**
         * If this is a `boleto` PaymentMethod, this sub-hash contains details about the Boleto payment method options.
         */
        export type Boleto =
            | {
                  expires_after_days?: number | undefined;
                  setup_future_usage?: ("" | "none" | "off_session" | "on_session") | undefined;
              }
            | "";
        /**
         * Configuration for any card payments attempted on this PaymentIntent.
         */
        export type Card =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  cvc_token?: string | undefined;
                  installments?:
                      | {
                            enabled?: boolean | undefined;
                            plan?:
                                | (
                                      | {
                                            count?: number | undefined;
                                            interval?: "month" | undefined;
                                            type: "fixed_count";
                                        }
                                      | ""
                                  )
                                | undefined;
                        }
                      | undefined;
                  mandate_options?:
                      | {
                            amount: number;
                            amount_type: "fixed" | "maximum";
                            description?: string | undefined;
                            end_date?: number | undefined;
                            interval: "day" | "month" | "sporadic" | "week" | "year";
                            interval_count?: number | undefined;
                            reference: string;
                            start_date: number;
                            supported_types?: "india"[] | undefined;
                        }
                      | undefined;
                  moto?: boolean | undefined;
                  network?:
                      | (
                            | "amex"
                            | "cartes_bancaires"
                            | "diners"
                            | "discover"
                            | "eftpos_au"
                            | "girocard"
                            | "interac"
                            | "jcb"
                            | "link"
                            | "mastercard"
                            | "unionpay"
                            | "unknown"
                            | "visa"
                        )
                      | undefined;
                  request_extended_authorization?: ("if_available" | "never") | undefined;
                  request_incremental_authorization?: ("if_available" | "never") | undefined;
                  request_multicapture?: ("if_available" | "never") | undefined;
                  request_overcapture?: ("if_available" | "never") | undefined;
                  request_three_d_secure?: ("any" | "automatic" | "challenge") | undefined;
                  require_cvc_recollection?: boolean | undefined;
                  setup_future_usage?: ("" | "none" | "off_session" | "on_session") | undefined;
                  statement_descriptor_suffix_kana?: (string | "") | undefined;
                  statement_descriptor_suffix_kanji?: (string | "") | undefined;
                  three_d_secure?:
                      | {
                            ares_trans_status?: ("A" | "C" | "I" | "N" | "R" | "U" | "Y") | undefined;
                            cryptogram: string;
                            electronic_commerce_indicator?: ("01" | "02" | "05" | "06" | "07") | undefined;
                            exemption_indicator?: ("low_risk" | "none") | undefined;
                            network_options?:
                                | {
                                      cartes_bancaires?:
                                          | {
                                                cb_avalgo: "0" | "1" | "2" | "3" | "4" | "A";
                                                cb_exemption?: string | undefined;
                                                cb_score?: number | undefined;
                                            }
                                          | undefined;
                                  }
                                | undefined;
                            requestor_challenge_indicator?: string | undefined;
                            transaction_id: string;
                            version: "1.0.2" | "2.1.0" | "2.2.0";
                        }
                      | undefined;
              }
            | "";
        /**
         * If this is a `card_present` PaymentMethod, this sub-hash contains details about the Card Present payment method options.
         */
        export type CardPresent =
            | {
                  request_extended_authorization?: boolean | undefined;
                  request_incremental_authorization_support?: boolean | undefined;
                  routing?:
                      | {
                            requested_priority?: ("domestic" | "international") | undefined;
                        }
                      | undefined;
              }
            | "";
        /**
         * If this is a `cashapp` PaymentMethod, this sub-hash contains details about the Cash App Pay payment method options.
         */
        export type Cashapp =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  setup_future_usage?: ("" | "none" | "off_session" | "on_session") | undefined;
              }
            | "";
        /**
         * If this is a `customer balance` PaymentMethod, this sub-hash contains details about the customer balance payment method options.
         */
        export type CustomerBalance =
            | {
                  bank_transfer?:
                      | {
                            eu_bank_transfer?:
                                | {
                                      country: string;
                                  }
                                | undefined;
                            requested_address_types?:
                                | ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[]
                                | undefined;
                            type:
                                | "eu_bank_transfer"
                                | "gb_bank_transfer"
                                | "jp_bank_transfer"
                                | "mx_bank_transfer"
                                | "us_bank_transfer";
                        }
                      | undefined;
                  funding_type?: "bank_transfer" | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `eps` PaymentMethod, this sub-hash contains details about the EPS payment method options.
         */
        export type Eps =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `fpx` PaymentMethod, this sub-hash contains details about the FPX payment method options.
         */
        export type Fpx =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `giropay` PaymentMethod, this sub-hash contains details about the Giropay payment method options.
         */
        export type Giropay =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `grabpay` PaymentMethod, this sub-hash contains details about the Grabpay payment method options.
         */
        export type Grabpay =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `ideal` PaymentMethod, this sub-hash contains details about the Ideal payment method options.
         */
        export type Ideal =
            | {
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `interac_present` PaymentMethod, this sub-hash contains details about the Card Present payment method options.
         */
        export type InteracPresent = {} | "";
        /**
         * If this is a `kakao_pay` PaymentMethod, this sub-hash contains details about the Kakao Pay payment method options.
         */
        export type KakaoPay =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `klarna` PaymentMethod, this sub-hash contains details about the Klarna payment method options.
         */
        export type Klarna =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  preferred_locale?:
                      | (
                            | "cs-CZ"
                            | "da-DK"
                            | "de-AT"
                            | "de-CH"
                            | "de-DE"
                            | "el-GR"
                            | "en-AT"
                            | "en-AU"
                            | "en-BE"
                            | "en-CA"
                            | "en-CH"
                            | "en-CZ"
                            | "en-DE"
                            | "en-DK"
                            | "en-ES"
                            | "en-FI"
                            | "en-FR"
                            | "en-GB"
                            | "en-GR"
                            | "en-IE"
                            | "en-IT"
                            | "en-NL"
                            | "en-NO"
                            | "en-NZ"
                            | "en-PL"
                            | "en-PT"
                            | "en-RO"
                            | "en-SE"
                            | "en-US"
                            | "es-ES"
                            | "es-US"
                            | "fi-FI"
                            | "fr-BE"
                            | "fr-CA"
                            | "fr-CH"
                            | "fr-FR"
                            | "it-CH"
                            | "it-IT"
                            | "nb-NO"
                            | "nl-BE"
                            | "nl-NL"
                            | "pl-PL"
                            | "pt-PT"
                            | "ro-RO"
                            | "sv-FI"
                            | "sv-SE"
                        )
                      | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `konbini` PaymentMethod, this sub-hash contains details about the Konbini payment method options.
         */
        export type Konbini =
            | {
                  confirmation_number?: (string | "") | undefined;
                  expires_after_days?: (number | "") | undefined;
                  expires_at?: (number | "") | undefined;
                  product_description?: (string | "") | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `kr_card` PaymentMethod, this sub-hash contains details about the KR Card payment method options.
         */
        export type KrCard =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `link` PaymentMethod, this sub-hash contains details about the Link payment method options.
         */
        export type Link =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  persistent_token?: string | undefined;
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `MobilePay` PaymentMethod, this sub-hash contains details about the MobilePay payment method options.
         */
        export type Mobilepay =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `multibanco` PaymentMethod, this sub-hash contains details about the Multibanco payment method options.
         */
        export type Multibanco =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `naver_pay` PaymentMethod, this sub-hash contains details about the Naver Pay payment method options.
         */
        export type NaverPay =
            | {
                  capture_method?: ("" | "manual") | undefined;
              }
            | "";
        /**
         * If this is a `oxxo` PaymentMethod, this sub-hash contains details about the OXXO payment method options.
         */
        export type Oxxo =
            | {
                  expires_after_days?: number | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `p24` PaymentMethod, this sub-hash contains details about the Przelewy24 payment method options.
         */
        export type P24 =
            | {
                  setup_future_usage?: "none" | undefined;
                  tos_shown_and_accepted?: boolean | undefined;
              }
            | "";
        /**
         * If this is a `pay_by_bank` PaymentMethod, this sub-hash contains details about the PayByBank payment method options.
         */
        export type PayByBank = {} | "";
        /**
         * If this is a `payco` PaymentMethod, this sub-hash contains details about the PAYCO payment method options.
         */
        export type Payco =
            | {
                  capture_method?: ("" | "manual") | undefined;
              }
            | "";
        /**
         * If this is a `paynow` PaymentMethod, this sub-hash contains details about the PayNow payment method options.
         */
        export type Paynow =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `paypal` PaymentMethod, this sub-hash contains details about the PayPal payment method options.
         */
        export type Paypal =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  preferred_locale?:
                      | (
                            | "cs-CZ"
                            | "da-DK"
                            | "de-AT"
                            | "de-DE"
                            | "de-LU"
                            | "el-GR"
                            | "en-GB"
                            | "en-US"
                            | "es-ES"
                            | "fi-FI"
                            | "fr-BE"
                            | "fr-FR"
                            | "fr-LU"
                            | "hu-HU"
                            | "it-IT"
                            | "nl-BE"
                            | "nl-NL"
                            | "pl-PL"
                            | "pt-PT"
                            | "sk-SK"
                            | "sv-SE"
                        )
                      | undefined;
                  reference?: string | undefined;
                  risk_correlation_id?: string | undefined;
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `pix` PaymentMethod, this sub-hash contains details about the Pix payment method options.
         */
        export type Pix =
            | {
                  expires_after_seconds?: number | undefined;
                  expires_at?: number | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `promptpay` PaymentMethod, this sub-hash contains details about the PromptPay payment method options.
         */
        export type Promptpay =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `revolut_pay` PaymentMethod, this sub-hash contains details about the Revolut Pay payment method options.
         */
        export type RevolutPay =
            | {
                  capture_method?: ("" | "manual") | undefined;
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `samsung_pay` PaymentMethod, this sub-hash contains details about the Samsung Pay payment method options.
         */
        export type SamsungPay =
            | {
                  capture_method?: ("" | "manual") | undefined;
              }
            | "";
        /**
         * If this is a `sepa_debit` PaymentIntent, this sub-hash contains details about the SEPA Debit payment method options.
         */
        export type SepaDebit =
            | {
                  mandate_options?:
                      | {
                            reference_prefix?: (string | "") | undefined;
                        }
                      | undefined;
                  setup_future_usage?: ("" | "none" | "off_session" | "on_session") | undefined;
              }
            | "";
        /**
         * If this is a `sofort` PaymentMethod, this sub-hash contains details about the SOFORT payment method options.
         */
        export type Sofort =
            | {
                  preferred_language?: ("" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl") | undefined;
                  setup_future_usage?: ("" | "none" | "off_session") | undefined;
              }
            | "";
        /**
         * If this is a `Swish` PaymentMethod, this sub-hash contains details about the Swish payment method options.
         */
        export type Swish =
            | {
                  reference?: (string | "") | undefined;
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `twint` PaymentMethod, this sub-hash contains details about the TWINT payment method options.
         */
        export type Twint =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `us_bank_account` PaymentMethod, this sub-hash contains details about the US bank account payment method options.
         */
        export type UsBankAccount =
            | {
                  financial_connections?:
                      | {
                            filters?:
                                | {
                                      account_subcategories?: ("checking" | "savings")[] | undefined;
                                  }
                                | undefined;
                            permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[] | undefined;
                            prefetch?: ("balances" | "ownership" | "transactions")[] | undefined;
                            return_url?: string | undefined;
                        }
                      | undefined;
                  mandate_options?:
                      | {
                            collection_method?: ("" | "paper") | undefined;
                        }
                      | undefined;
                  networks?:
                      | {
                            requested?: ("ach" | "us_domestic_wire")[] | undefined;
                        }
                      | undefined;
                  preferred_settlement_speed?: ("" | "fastest" | "standard") | undefined;
                  setup_future_usage?: ("" | "none" | "off_session" | "on_session") | undefined;
                  verification_method?: ("automatic" | "instant" | "microdeposits") | undefined;
              }
            | "";
        /**
         * If this is a `wechat_pay` PaymentMethod, this sub-hash contains details about the WeChat Pay payment method options.
         */
        export type WechatPay =
            | {
                  app_id?: string | undefined;
                  client: "android" | "ios" | "web";
                  setup_future_usage?: "none" | undefined;
              }
            | "";
        /**
         * If this is a `zip` PaymentMethod, this sub-hash contains details about the Zip payment method options.
         */
        export type Zip =
            | {
                  setup_future_usage?: "none" | undefined;
              }
            | "";
    }

    /**
     * Options to configure Radar. Learn more about [Radar Sessions](https://stripe.com/docs/radar/radar-session).
     */
    export interface RadarOptions {
        /** A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments. */
        session?: string;
    }

    /**
     * Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
     *
     * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
     *
     * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
     */
    export type SetupFutureUsage = "off_session" | "on_session";
    export const SetupFutureUsage = {
        OffSession: "off_session",
        OnSession: "on_session",
    } as const;

    /**
     * Shipping information for this PaymentIntent.
     */
    export interface Shipping {
        /** Shipping address. */
        address: Shipping.Address;
        /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
        carrier?: string;
        /** Recipient name. */
        name: string;
        /** Recipient phone (including extension). */
        phone?: string;
        /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
        tracking_number?: string;
    }

    export namespace Shipping {
        /**
         * Shipping address.
         */
        export interface Address {
            /** City, district, suburb, town, or village. */
            city?: string;
            /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
            country?: string;
            /** Address line 1 (e.g., street, PO Box, or company name). */
            line1?: string;
            /** Address line 2 (e.g., apartment, suite, unit, or building). */
            line2?: string;
            /** ZIP or postal code. */
            postal_code?: string;
            /** State, county, province, or region. */
            state?: string;
        }
    }

    /**
     * The parameters that you can use to automatically create a Transfer.
     * Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
     */
    export interface TransferData {
        /**
         * The amount that will be transferred automatically when a charge succeeds.
         * The amount is capped at the total transaction amount and if no amount is set,
         * the full amount is transferred.
         *
         * If you intend to collect a fee and you need a more robust reporting experience, using
         * [application_fee_amount](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-application_fee_amount)
         * might be a better fit for your integration.
         */
        amount?: number;
        /**
         * If specified, successful charges will be attributed to the destination
         * account for tax reporting, and the funds from charges will be transferred
         * to the destination account. The ID of the resulting transfer will be
         * returned on the successful charge's `transfer` field.
         */
        destination: string;
    }
}
