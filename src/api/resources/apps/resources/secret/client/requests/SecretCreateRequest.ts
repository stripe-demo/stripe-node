/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         name: "name",
 *         payload: "payload",
 *         scope: {
 *             type: "account"
 *         }
 *     }
 */
export interface SecretCreateRequest {
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** The Unix timestamp for the expiry time of the secret, after which the secret deletes. */
    expires_at?: number;
    /** A name for the secret that's unique within the scope. */
    name: string;
    /** The plaintext secret value to be stored. */
    payload: string;
    /** Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */
    scope: SecretCreateRequest.Scope;
}

export namespace SecretCreateRequest {
    /**
     * Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
     */
    export interface Scope {
        /** The secret scope type. */
        type: Scope.Type;
        /** The user ID. This field is required if `type` is set to `user`, and should not be provided if `type` is set to `account`. */
        user?: string;
    }

    export namespace Scope {
        /**
         * The secret scope type.
         */
        export type Type = "account" | "user";
        export const Type = {
            Account: "account",
            User: "user",
        } as const;
    }
}
