/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface InvoiceUpdateRequest {
    /** The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
    account_tax_ids?: InvoiceUpdateRequest.AccountTaxIds;
    /** A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees). */
    application_fee_amount?: number;
    /** Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. */
    auto_advance?: boolean;
    /** Settings for automatic tax lookup for this invoice. */
    automatic_tax?: InvoiceUpdateRequest.AutomaticTax;
    /** The time when this invoice should be scheduled to finalize. The invoice will be finalized at this time if it is still in draft state. To turn off automatic finalization, set `auto_advance` to false. */
    automatically_finalizes_at?: number;
    /** Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices. */
    collection_method?: InvoiceUpdateRequest.CollectionMethod;
    /** A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields. */
    custom_fields?: InvoiceUpdateRequest.CustomFields;
    /** The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
    days_until_due?: number;
    /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
    default_payment_method?: string;
    /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
    default_source?: InvoiceUpdateRequest.DefaultSource;
    /** The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates. */
    default_tax_rates?: InvoiceUpdateRequest.DefaultTaxRates;
    /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
    description?: string;
    /** The discounts that will apply to the invoice. Pass an empty string to remove previously-defined discounts. */
    discounts?: InvoiceUpdateRequest.Discounts;
    /** The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
    due_date?: number;
    /** The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt. */
    effective_at?: InvoiceUpdateRequest.EffectiveAt;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** Footer to be displayed on the invoice. */
    footer?: string;
    /** The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account. */
    issuer?: InvoiceUpdateRequest.Issuer;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: InvoiceUpdateRequest.Metadata;
    /** Set the number for this invoice. If no number is present then a number will be assigned automatically when the invoice is finalized. In many markets, regulations require invoices to be unique, sequential and / or gapless. You are responsible for ensuring this is true across all your different invoicing systems in the event that you edit the invoice number using our API. If you use only Stripe for your invoices and do not change invoice numbers, Stripe handles this aspect of compliance for you automatically. */
    number?: InvoiceUpdateRequest.Number;
    /** The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
    on_behalf_of?: InvoiceUpdateRequest.OnBehalfOf;
    /** Configuration settings for the PaymentIntent that is generated when the invoice is finalized. */
    payment_settings?: InvoiceUpdateRequest.PaymentSettings;
    /** The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page. */
    rendering?: InvoiceUpdateRequest.Rendering;
    /** Settings for the cost of shipping for this invoice. */
    shipping_cost?: InvoiceUpdateRequest.ShippingCost;
    /** Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer. */
    shipping_details?: InvoiceUpdateRequest.ShippingDetails;
    /** Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
    statement_descriptor?: string;
    /** If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge. This will be unset if you POST an empty value. */
    transfer_data?: InvoiceUpdateRequest.TransferData;
}

export namespace InvoiceUpdateRequest {
    /**
     * The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
     */
    export type AccountTaxIds = string[] | "";

    /**
     * Settings for automatic tax lookup for this invoice.
     */
    export interface AutomaticTax {
        /** Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices. */
        enabled: boolean;
        /** The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account. */
        liability?: AutomaticTax.Liability;
    }

    export namespace AutomaticTax {
        /**
         * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
         */
        export interface Liability {
            /** The connected account being referenced when `type` is `account`. */
            account?: string;
            /** Type of the account referenced in the request. */
            type: Liability.Type;
        }

        export namespace Liability {
            /**
             * Type of the account referenced in the request.
             */
            export type Type = "account" | "self";
            export const Type = {
                Account: "account",
                Self: "self",
            } as const;
        }
    }

    /**
     * Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
     */
    export type CollectionMethod = "charge_automatically" | "send_invoice";
    export const CollectionMethod = {
        ChargeAutomatically: "charge_automatically",
        SendInvoice: "send_invoice",
    } as const;
    /**
     * A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields.
     */
    export type CustomFields =
        | {
              name: string;
              value: string;
          }[]
        | "";
    /**
     * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
     */
    export type DefaultSource = string | "";
    /**
     * The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates.
     */
    export type DefaultTaxRates = string[] | "";
    /**
     * The discounts that will apply to the invoice. Pass an empty string to remove previously-defined discounts.
     */
    export type Discounts =
        | {
              coupon?: string | undefined;
              discount?: string | undefined;
              promotion_code?: string | undefined;
          }[]
        | "";
    /**
     * The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
     */
    export type EffectiveAt = number | "";

    /**
     * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
     */
    export interface Issuer {
        /** The connected account being referenced when `type` is `account`. */
        account?: string;
        /** Type of the account referenced in the request. */
        type: Issuer.Type;
    }

    export namespace Issuer {
        /**
         * Type of the account referenced in the request.
         */
        export type Type = "account" | "self";
        export const Type = {
            Account: "account",
            Self: "self",
        } as const;
    }

    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type Metadata = Record<string, string> | "";
    /**
     * Set the number for this invoice. If no number is present then a number will be assigned automatically when the invoice is finalized. In many markets, regulations require invoices to be unique, sequential and / or gapless. You are responsible for ensuring this is true across all your different invoicing systems in the event that you edit the invoice number using our API. If you use only Stripe for your invoices and do not change invoice numbers, Stripe handles this aspect of compliance for you automatically.
     */
    export type Number = string | "";
    /**
     * The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
     */
    export type OnBehalfOf = string | "";

    /**
     * Configuration settings for the PaymentIntent that is generated when the invoice is finalized.
     */
    export interface PaymentSettings {
        /** ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set. */
        default_mandate?: PaymentSettings.DefaultMandate;
        /** Payment-method-specific configuration to provide to the invoice’s PaymentIntent. */
        payment_method_options?: PaymentSettings.PaymentMethodOptions;
        /** The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). Should not be specified with payment_method_configuration */
        payment_method_types?: PaymentSettings.PaymentMethodTypes;
    }

    export namespace PaymentSettings {
        /**
         * ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set.
         */
        export type DefaultMandate = string | "";

        /**
         * Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
         */
        export interface PaymentMethodOptions {
            /** If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent. */
            acss_debit?: PaymentMethodOptions.AcssDebit;
            /** If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent. */
            bancontact?: PaymentMethodOptions.Bancontact;
            /** If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent. */
            card?: PaymentMethodOptions.Card;
            /** If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent. */
            customer_balance?: PaymentMethodOptions.CustomerBalance;
            /** If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent. */
            konbini?: PaymentMethodOptions.Konbini;
            /** If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice’s PaymentIntent. */
            sepa_debit?: PaymentMethodOptions.SepaDebit;
            /** If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent. */
            us_bank_account?: PaymentMethodOptions.UsBankAccount;
        }

        export namespace PaymentMethodOptions {
            /**
             * If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent.
             */
            export type AcssDebit =
                | {
                      mandate_options?:
                          | {
                                transaction_type?: ("business" | "personal") | undefined;
                            }
                          | undefined;
                      verification_method?: ("automatic" | "instant" | "microdeposits") | undefined;
                  }
                | "";
            /**
             * If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.
             */
            export type Bancontact =
                | {
                      preferred_language?: ("de" | "en" | "fr" | "nl") | undefined;
                  }
                | "";
            /**
             * If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.
             */
            export type Card =
                | {
                      installments?:
                          | {
                                enabled?: boolean | undefined;
                                plan?:
                                    | (
                                          | {
                                                count?: number | undefined;
                                                interval?: "month" | undefined;
                                                type: "fixed_count";
                                            }
                                          | ""
                                      )
                                    | undefined;
                            }
                          | undefined;
                      request_three_d_secure?: ("any" | "automatic" | "challenge") | undefined;
                  }
                | "";
            /**
             * If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent.
             */
            export type CustomerBalance =
                | {
                      bank_transfer?:
                          | {
                                eu_bank_transfer?:
                                    | {
                                          country: string;
                                      }
                                    | undefined;
                                type?: string | undefined;
                            }
                          | undefined;
                      funding_type?: string | undefined;
                  }
                | "";
            /**
             * If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent.
             */
            export type Konbini = {} | "";
            /**
             * If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice’s PaymentIntent.
             */
            export type SepaDebit = {} | "";
            /**
             * If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent.
             */
            export type UsBankAccount =
                | {
                      financial_connections?:
                          | {
                                filters?:
                                    | {
                                          account_subcategories?: ("checking" | "savings")[] | undefined;
                                      }
                                    | undefined;
                                permissions?:
                                    | ("balances" | "ownership" | "payment_method" | "transactions")[]
                                    | undefined;
                                prefetch?: ("balances" | "ownership" | "transactions")[] | undefined;
                            }
                          | undefined;
                      verification_method?: ("automatic" | "instant" | "microdeposits") | undefined;
                  }
                | "";
        }

        /**
         * The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). Should not be specified with payment_method_configuration
         */
        export type PaymentMethodTypes =
            | (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "amazon_pay"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "cashapp"
                  | "customer_balance"
                  | "eps"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "jp_credit_transfer"
                  | "kakao_pay"
                  | "konbini"
                  | "kr_card"
                  | "link"
                  | "multibanco"
                  | "naver_pay"
                  | "p24"
                  | "payco"
                  | "paynow"
                  | "paypal"
                  | "promptpay"
                  | "revolut_pay"
                  | "sepa_credit_transfer"
                  | "sepa_debit"
                  | "sofort"
                  | "swish"
                  | "us_bank_account"
                  | "wechat_pay"
              )[]
            | "";
    }

    /**
     * The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page.
     */
    export interface Rendering {
        /** How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. One of `exclude_tax` or `include_inclusive_tax`. `include_inclusive_tax` will include inclusive tax (and exclude exclusive tax) in invoice PDF amounts. `exclude_tax` will exclude all tax (inclusive and exclusive alike) from invoice PDF amounts. */
        amount_tax_display?: Rendering.AmountTaxDisplay;
        /** Invoice pdf rendering options */
        pdf?: Rendering.Pdf;
        /** ID of the invoice rendering template to use for this invoice. */
        template?: string;
        /** The specific version of invoice rendering template to use for this invoice. */
        template_version?: Rendering.TemplateVersion;
    }

    export namespace Rendering {
        /**
         * How line-item prices and amounts will be displayed with respect to tax on invoice PDFs. One of `exclude_tax` or `include_inclusive_tax`. `include_inclusive_tax` will include inclusive tax (and exclude exclusive tax) in invoice PDF amounts. `exclude_tax` will exclude all tax (inclusive and exclusive alike) from invoice PDF amounts.
         */
        export type AmountTaxDisplay = "" | "exclude_tax" | "include_inclusive_tax";
        export const AmountTaxDisplay = {
            Empty: "",
            ExcludeTax: "exclude_tax",
            IncludeInclusiveTax: "include_inclusive_tax",
        } as const;

        /**
         * Invoice pdf rendering options
         */
        export interface Pdf {
            /**
             * Page size for invoice PDF. Can be set to `a4`, `letter`, or `auto`.
             *  If set to `auto`, invoice PDF page size defaults to `a4` for customers with
             *  Japanese locale and `letter` for customers with other locales.
             */
            page_size?: Pdf.PageSize;
        }

        export namespace Pdf {
            /**
             * Page size for invoice PDF. Can be set to `a4`, `letter`, or `auto`.
             *  If set to `auto`, invoice PDF page size defaults to `a4` for customers with
             *  Japanese locale and `letter` for customers with other locales.
             */
            export type PageSize = "a4" | "auto" | "letter";
            export const PageSize = {
                A4: "a4",
                Auto: "auto",
                Letter: "letter",
            } as const;
        }

        /**
         * The specific version of invoice rendering template to use for this invoice.
         */
        export type TemplateVersion = number | "";
    }

    /**
     * Settings for the cost of shipping for this invoice.
     */
    export type ShippingCost =
        | {
              shipping_rate?: string | undefined;
              shipping_rate_data?:
                  | {
                        delivery_estimate?:
                            | {
                                  maximum?:
                                      | {
                                            unit: "business_day" | "day" | "hour" | "month" | "week";
                                            value: number;
                                        }
                                      | undefined;
                                  minimum?:
                                      | {
                                            unit: "business_day" | "day" | "hour" | "month" | "week";
                                            value: number;
                                        }
                                      | undefined;
                              }
                            | undefined;
                        display_name: string;
                        fixed_amount?:
                            | {
                                  amount: number;
                                  currency: string;
                                  currency_options?:
                                      | Record<
                                            string,
                                            {
                                                amount: number;
                                                tax_behavior?: ("exclusive" | "inclusive" | "unspecified") | undefined;
                                            }
                                        >
                                      | undefined;
                              }
                            | undefined;
                        metadata?: Record<string, string> | undefined;
                        tax_behavior?: ("exclusive" | "inclusive" | "unspecified") | undefined;
                        tax_code?: string | undefined;
                        type?: "fixed_amount" | undefined;
                    }
                  | undefined;
          }
        | "";
    /**
     * Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer.
     */
    export type ShippingDetails =
        | {
              address: {
                  city?: string | undefined;
                  country?: string | undefined;
                  line1?: string | undefined;
                  line2?: string | undefined;
                  postal_code?: string | undefined;
                  state?: string | undefined;
              };
              name: string;
              phone?: (string | "") | undefined;
          }
        | "";
    /**
     * If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge. This will be unset if you POST an empty value.
     */
    export type TransferData =
        | {
              amount?: number | undefined;
              destination: string;
          }
        | "";
}
