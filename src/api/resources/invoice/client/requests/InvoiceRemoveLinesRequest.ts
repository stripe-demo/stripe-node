/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         lines: [{
 *                 behavior: "delete",
 *                 id: "id"
 *             }]
 *     }
 */
export interface InvoiceRemoveLinesRequest {
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    invoice_metadata?: InvoiceRemoveLinesRequest.InvoiceMetadata;
    /** The line items to remove. */
    lines: InvoiceRemoveLinesRequest.Lines.Item[];
}

export namespace InvoiceRemoveLinesRequest {
    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type InvoiceMetadata = Record<string, string> | "";
    export type Lines = Lines.Item[];

    export namespace Lines {
        export interface Item {
            /** Either `delete` or `unassign`. Deleted line items are permanently deleted. Unassigned line items can be reassigned to an invoice. */
            behavior: Item.Behavior;
            /** ID of an existing line item to remove from this invoice. */
            id: string;
        }

        export namespace Item {
            /**
             * Either `delete` or `unassign`. Deleted line items are permanently deleted. Unassigned line items can be reassigned to an invoice.
             */
            export type Behavior = "delete" | "unassign";
            export const Behavior = {
                Delete: "delete",
                Unassign: "unassign",
            } as const;
        }
    }
}
