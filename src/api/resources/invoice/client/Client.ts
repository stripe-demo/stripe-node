/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Stripe from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Invoice {
    export interface Options {
        environment?: core.Supplier<environments.StripeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Invoice {
    constructor(protected readonly _options: Invoice.Options) {}

    /**
     * <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
     *
     * @param {Stripe.InvoiceListRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.list()
     */
    public async list(
        request: Stripe.InvoiceListRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.InvoiceListResponse> {
        const {
            collection_method: collectionMethod,
            customer,
            ending_before: endingBefore,
            expand,
            limit,
            starting_after: startingAfter,
            status,
            subscription,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (collectionMethod != null) {
            _queryParams["collection_method"] = collectionMethod;
        }

        if (customer != null) {
            _queryParams["customer"] = customer;
        }

        if (endingBefore != null) {
            _queryParams["ending_before"] = endingBefore;
        }

        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (startingAfter != null) {
            _queryParams["starting_after"] = startingAfter;
        }

        if (status != null) {
            _queryParams["status"] = status;
        }

        if (subscription != null) {
            _queryParams["subscription"] = subscription;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/invoices",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.InvoiceListResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/invoices.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
     *
     * @param {Stripe.InvoiceCreateRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.create()
     */
    public async create(
        request: Stripe.InvoiceCreateRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/invoices",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/invoices.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
     *
     * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
     *
     * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>
     *
     * <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
     *
     * @param {Stripe.InvoiceCreatePreviewRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.createPreview()
     */
    public async createPreview(
        request: Stripe.InvoiceCreatePreviewRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/invoices/create_preview",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/invoices/create_preview.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
     * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
     * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
     * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
     *
     * @param {Stripe.InvoiceSearchRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.search({
     *         query: "query"
     *     })
     */
    public async search(
        request: Stripe.InvoiceSearchRequest,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.InvoiceSearchResponse> {
        const { expand, limit, page, query } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (page != null) {
            _queryParams["page"] = page;
        }

        _queryParams["query"] = query;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/invoices/search",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.InvoiceSearchResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/invoices/search.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
     *
     * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
     *
     * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>
     *
     * <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
     *
     * @param {Stripe.InvoiceUpcomingRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.upcoming()
     */
    public async upcoming(
        request: Stripe.InvoiceUpcomingRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const {
            coupon,
            currency,
            customer,
            discounts,
            expand,
            invoice_items: invoiceItems,
            on_behalf_of: onBehalfOf,
            preview_mode: previewMode,
            schedule,
            subscription,
            subscription_billing_cycle_anchor: subscriptionBillingCycleAnchor,
            subscription_cancel_at: subscriptionCancelAt,
            subscription_cancel_at_period_end: subscriptionCancelAtPeriodEnd,
            subscription_cancel_now: subscriptionCancelNow,
            subscription_default_tax_rates: subscriptionDefaultTaxRates,
            subscription_items: subscriptionItems,
            subscription_proration_behavior: subscriptionProrationBehavior,
            subscription_proration_date: subscriptionProrationDate,
            subscription_resume_at: subscriptionResumeAt,
            subscription_start_date: subscriptionStartDate,
            subscription_trial_end: subscriptionTrialEnd,
            subscription_trial_from_plan: subscriptionTrialFromPlan,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (coupon != null) {
            _queryParams["coupon"] = coupon;
        }

        if (currency != null) {
            _queryParams["currency"] = currency;
        }

        if (customer != null) {
            _queryParams["customer"] = customer;
        }

        if (discounts != null) {
            _queryParams["discounts"] = discounts;
        }

        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        if (invoiceItems != null) {
            if (Array.isArray(invoiceItems)) {
                _queryParams["invoice_items"] = invoiceItems.map((item) => item);
            } else {
                _queryParams["invoice_items"] = invoiceItems;
            }
        }

        if (onBehalfOf != null) {
            _queryParams["on_behalf_of"] = onBehalfOf;
        }

        if (previewMode != null) {
            _queryParams["preview_mode"] = previewMode;
        }

        if (schedule != null) {
            _queryParams["schedule"] = schedule;
        }

        if (subscription != null) {
            _queryParams["subscription"] = subscription;
        }

        if (subscriptionBillingCycleAnchor != null) {
            _queryParams["subscription_billing_cycle_anchor"] = subscriptionBillingCycleAnchor;
        }

        if (subscriptionCancelAt != null) {
            _queryParams["subscription_cancel_at"] = subscriptionCancelAt;
        }

        if (subscriptionCancelAtPeriodEnd != null) {
            _queryParams["subscription_cancel_at_period_end"] = subscriptionCancelAtPeriodEnd.toString();
        }

        if (subscriptionCancelNow != null) {
            _queryParams["subscription_cancel_now"] = subscriptionCancelNow.toString();
        }

        if (subscriptionDefaultTaxRates != null) {
            _queryParams["subscription_default_tax_rates"] = subscriptionDefaultTaxRates;
        }

        if (subscriptionItems != null) {
            if (Array.isArray(subscriptionItems)) {
                _queryParams["subscription_items"] = subscriptionItems.map((item) => item);
            } else {
                _queryParams["subscription_items"] = subscriptionItems;
            }
        }

        if (subscriptionProrationBehavior != null) {
            _queryParams["subscription_proration_behavior"] = subscriptionProrationBehavior;
        }

        if (subscriptionProrationDate != null) {
            _queryParams["subscription_proration_date"] = subscriptionProrationDate.toString();
        }

        if (subscriptionResumeAt != null) {
            _queryParams["subscription_resume_at"] = subscriptionResumeAt;
        }

        if (subscriptionStartDate != null) {
            _queryParams["subscription_start_date"] = subscriptionStartDate.toString();
        }

        if (subscriptionTrialEnd != null) {
            _queryParams["subscription_trial_end"] = subscriptionTrialEnd;
        }

        if (subscriptionTrialFromPlan != null) {
            _queryParams["subscription_trial_from_plan"] = subscriptionTrialFromPlan.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/invoices/upcoming",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/invoices/upcoming.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
     *
     * @param {Stripe.InvoiceUpcomingLinesRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.upcomingLines()
     */
    public async upcomingLines(
        request: Stripe.InvoiceUpcomingLinesRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.InvoiceUpcomingLinesResponse> {
        const {
            coupon,
            currency,
            customer,
            discounts,
            ending_before: endingBefore,
            expand,
            invoice_items: invoiceItems,
            limit,
            on_behalf_of: onBehalfOf,
            preview_mode: previewMode,
            schedule,
            starting_after: startingAfter,
            subscription,
            subscription_billing_cycle_anchor: subscriptionBillingCycleAnchor,
            subscription_cancel_at: subscriptionCancelAt,
            subscription_cancel_at_period_end: subscriptionCancelAtPeriodEnd,
            subscription_cancel_now: subscriptionCancelNow,
            subscription_default_tax_rates: subscriptionDefaultTaxRates,
            subscription_items: subscriptionItems,
            subscription_proration_behavior: subscriptionProrationBehavior,
            subscription_proration_date: subscriptionProrationDate,
            subscription_resume_at: subscriptionResumeAt,
            subscription_start_date: subscriptionStartDate,
            subscription_trial_end: subscriptionTrialEnd,
            subscription_trial_from_plan: subscriptionTrialFromPlan,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (coupon != null) {
            _queryParams["coupon"] = coupon;
        }

        if (currency != null) {
            _queryParams["currency"] = currency;
        }

        if (customer != null) {
            _queryParams["customer"] = customer;
        }

        if (discounts != null) {
            _queryParams["discounts"] = discounts;
        }

        if (endingBefore != null) {
            _queryParams["ending_before"] = endingBefore;
        }

        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        if (invoiceItems != null) {
            if (Array.isArray(invoiceItems)) {
                _queryParams["invoice_items"] = invoiceItems.map((item) => item);
            } else {
                _queryParams["invoice_items"] = invoiceItems;
            }
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (onBehalfOf != null) {
            _queryParams["on_behalf_of"] = onBehalfOf;
        }

        if (previewMode != null) {
            _queryParams["preview_mode"] = previewMode;
        }

        if (schedule != null) {
            _queryParams["schedule"] = schedule;
        }

        if (startingAfter != null) {
            _queryParams["starting_after"] = startingAfter;
        }

        if (subscription != null) {
            _queryParams["subscription"] = subscription;
        }

        if (subscriptionBillingCycleAnchor != null) {
            _queryParams["subscription_billing_cycle_anchor"] = subscriptionBillingCycleAnchor;
        }

        if (subscriptionCancelAt != null) {
            _queryParams["subscription_cancel_at"] = subscriptionCancelAt;
        }

        if (subscriptionCancelAtPeriodEnd != null) {
            _queryParams["subscription_cancel_at_period_end"] = subscriptionCancelAtPeriodEnd.toString();
        }

        if (subscriptionCancelNow != null) {
            _queryParams["subscription_cancel_now"] = subscriptionCancelNow.toString();
        }

        if (subscriptionDefaultTaxRates != null) {
            _queryParams["subscription_default_tax_rates"] = subscriptionDefaultTaxRates;
        }

        if (subscriptionItems != null) {
            if (Array.isArray(subscriptionItems)) {
                _queryParams["subscription_items"] = subscriptionItems.map((item) => item);
            } else {
                _queryParams["subscription_items"] = subscriptionItems;
            }
        }

        if (subscriptionProrationBehavior != null) {
            _queryParams["subscription_proration_behavior"] = subscriptionProrationBehavior;
        }

        if (subscriptionProrationDate != null) {
            _queryParams["subscription_proration_date"] = subscriptionProrationDate.toString();
        }

        if (subscriptionResumeAt != null) {
            _queryParams["subscription_resume_at"] = subscriptionResumeAt;
        }

        if (subscriptionStartDate != null) {
            _queryParams["subscription_start_date"] = subscriptionStartDate.toString();
        }

        if (subscriptionTrialEnd != null) {
            _queryParams["subscription_trial_end"] = subscriptionTrialEnd;
        }

        if (subscriptionTrialFromPlan != null) {
            _queryParams["subscription_trial_from_plan"] = subscriptionTrialFromPlan.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                "v1/invoices/upcoming/lines",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.InvoiceUpcomingLinesResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/invoices/upcoming/lines.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Retrieves the invoice with the given ID.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceRetrieveRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.retrieve("invoice")
     */
    public async retrieve(
        invoice: string,
        request: Stripe.InvoiceRetrieveRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const { expand } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (expand != null) {
            if (Array.isArray(expand)) {
                _queryParams["expand"] = expand.map((item) => item);
            } else {
                _queryParams["expand"] = expand;
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling GET /v1/invoices/{invoice}.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
     * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
     *
     * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
     * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
     * <code>auto_advance=false</code>.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceUpdateRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.update("invoice")
     */
    public async update(
        invoice: string,
        request: Stripe.InvoiceUpdateRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/invoices/{invoice}.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceDeleteRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.delete("invoice")
     */
    public async delete(
        invoice: string,
        request: Stripe.InvoiceDeleteRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.DeletedInvoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.DeletedInvoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling DELETE /v1/invoices/{invoice}.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceAddLinesRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.addLines("invoice", {
     *         lines: [{}]
     *     })
     */
    public async addLines(
        invoice: string,
        request: Stripe.InvoiceAddLinesRequest,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}/add_lines`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError(
                    "Timeout exceeded when calling POST /v1/invoices/{invoice}/add_lines.",
                );
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceFinalizeInvoiceRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.finalizeInvoice("invoice")
     */
    public async finalizeInvoice(
        invoice: string,
        request: Stripe.InvoiceFinalizeInvoiceRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}/finalize`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError(
                    "Timeout exceeded when calling POST /v1/invoices/{invoice}/finalize.",
                );
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceMarkUncollectibleRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.markUncollectible("invoice")
     */
    public async markUncollectible(
        invoice: string,
        request: Stripe.InvoiceMarkUncollectibleRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}/mark_uncollectible`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError(
                    "Timeout exceeded when calling POST /v1/invoices/{invoice}/mark_uncollectible.",
                );
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoicePayRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.pay("invoice")
     */
    public async pay(
        invoice: string,
        request: Stripe.InvoicePayRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}/pay`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/invoices/{invoice}/pay.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceRemoveLinesRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.removeLines("invoice", {
     *         lines: [{
     *                 behavior: "delete",
     *                 id: "id"
     *             }]
     *     })
     */
    public async removeLines(
        invoice: string,
        request: Stripe.InvoiceRemoveLinesRequest,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}/remove_lines`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError(
                    "Timeout exceeded when calling POST /v1/invoices/{invoice}/remove_lines.",
                );
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
     *
     * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceSendInvoiceRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.sendInvoice("invoice")
     */
    public async sendInvoice(
        invoice: string,
        request: Stripe.InvoiceSendInvoiceRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}/send`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/invoices/{invoice}/send.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceUpdateLinesRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.updateLines("invoice", {
     *         lines: [{
     *                 id: "id"
     *             }]
     *     })
     */
    public async updateLines(
        invoice: string,
        request: Stripe.InvoiceUpdateLinesRequest,
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}/update_lines`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError(
                    "Timeout exceeded when calling POST /v1/invoices/{invoice}/update_lines.",
                );
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
     *
     * <p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
     *
     * @param {string} invoice
     * @param {Stripe.InvoiceVoidInvoiceRequest} request
     * @param {Invoice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.invoice.voidInvoice("invoice")
     */
    public async voidInvoice(
        invoice: string,
        request: Stripe.InvoiceVoidInvoiceRequest = {},
        requestOptions?: Invoice.RequestOptions,
    ): Promise<Stripe.Invoice> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.StripeEnvironment.Default,
                `v1/invoices/${encodeURIComponent(invoice)}/void`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/stripe",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "@fern-api/stripe/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/x-www-form-urlencoded",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Stripe.Invoice;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StripeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StripeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StripeTimeoutError("Timeout exceeded when calling POST /v1/invoices/{invoice}/void.");
            case "unknown":
                throw new errors.StripeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
