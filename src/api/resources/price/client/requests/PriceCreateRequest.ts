/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         currency: "currency"
 *     }
 */
export interface PriceCreateRequest {
    /** Whether the price can be used for new purchases. Defaults to `true`. */
    active?: boolean;
    /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
    billing_scheme?: PriceCreateRequest.BillingScheme;
    /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    currency: string;
    /** Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
    currency_options?: Record<string, PriceCreateRequest.CurrencyOptions.Value>;
    /** When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
    custom_unit_amount?: PriceCreateRequest.CustomUnitAmount;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
    lookup_key?: string;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: Record<string, string>;
    /** A brief description of the price, hidden from customers. */
    nickname?: string;
    /** The ID of the product that this price will belong to. */
    product?: string;
    /** These fields can be used to create a new product that this price will belong to. */
    product_data?: PriceCreateRequest.ProductData;
    /** The recurring components of a price such as `interval` and `usage_type`. */
    recurring?: PriceCreateRequest.Recurring;
    /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
    tax_behavior?: PriceCreateRequest.TaxBehavior;
    /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
    tiers?: PriceCreateRequest.Tiers.Item[];
    /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows. */
    tiers_mode?: PriceCreateRequest.TiersMode;
    /** If set to true, will atomically remove the lookup key from the existing price, and assign it to this price. */
    transfer_lookup_key?: boolean;
    /** Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`. */
    transform_quantity?: PriceCreateRequest.TransformQuantity;
    /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required, unless `billing_scheme=tiered`. */
    unit_amount?: number;
    /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
    unit_amount_decimal?: string;
}

export namespace PriceCreateRequest {
    /**
     * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
     */
    export type BillingScheme = "per_unit" | "tiered";
    export const BillingScheme = {
        PerUnit: "per_unit",
        Tiered: "tiered",
    } as const;

    export namespace CurrencyOptions {
        export interface Value {
            /** When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links. */
            custom_unit_amount?: Value.CustomUnitAmount;
            /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
            tax_behavior?: Value.TaxBehavior;
            /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
            tiers?: Value.Tiers.Item[];
            /** A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. */
            unit_amount?: number;
            /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
            unit_amount_decimal?: string;
        }

        export namespace Value {
            /**
             * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
             */
            export interface CustomUnitAmount {
                /** Pass in `true` to enable `custom_unit_amount`, otherwise omit `custom_unit_amount`. */
                enabled: boolean;
                /** The maximum unit amount the customer can specify for this item. */
                maximum?: number;
                /** The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount. */
                minimum?: number;
                /** The starting unit amount which can be updated by the customer. */
                preset?: number;
            }

            /**
             * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
             */
            export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
            export const TaxBehavior = {
                Exclusive: "exclusive",
                Inclusive: "inclusive",
                Unspecified: "unspecified",
            } as const;
            export type Tiers = Tiers.Item[];

            export namespace Tiers {
                export interface Item {
                    /** The flat billing amount for an entire tier, regardless of the number of units in the tier. */
                    flat_amount?: number;
                    /** Same as `flat_amount`, but accepts a decimal value representing an integer in the minor units of the currency. Only one of `flat_amount` and `flat_amount_decimal` can be set. */
                    flat_amount_decimal?: string;
                    /** The per unit billing amount for each individual unit for which this tier applies. */
                    unit_amount?: number;
                    /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
                    unit_amount_decimal?: string;
                    /** Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use `inf` to define a fallback tier. */
                    up_to: Item.UpTo;
                }

                export namespace Item {
                    /**
                     * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use `inf` to define a fallback tier.
                     */
                    export type UpTo = "inf" | number;
                }
            }
        }
    }

    /**
     * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
     */
    export interface CustomUnitAmount {
        /** Pass in `true` to enable `custom_unit_amount`, otherwise omit `custom_unit_amount`. */
        enabled: boolean;
        /** The maximum unit amount the customer can specify for this item. */
        maximum?: number;
        /** The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount. */
        minimum?: number;
        /** The starting unit amount which can be updated by the customer. */
        preset?: number;
    }

    /**
     * These fields can be used to create a new product that this price will belong to.
     */
    export interface ProductData {
        /** Whether the product is currently available for purchase. Defaults to `true`. */
        active?: boolean;
        /** The identifier for the product. Must be unique. If not provided, an identifier will be randomly generated. */
        id?: string;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        metadata?: Record<string, string>;
        /** The product's name, meant to be displayable to the customer. */
        name: string;
        /**
         * An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
         *
         * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
         */
        statement_descriptor?: string;
        /** A [tax code](https://stripe.com/docs/tax/tax-categories) ID. */
        tax_code?: string;
        /** A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal. */
        unit_label?: string;
    }

    /**
     * The recurring components of a price such as `interval` and `usage_type`.
     */
    export interface Recurring {
        /** Specifies a usage aggregation strategy for prices of `usage_type=metered`. Defaults to `sum`. */
        aggregate_usage?: Recurring.AggregateUsage;
        /** Specifies billing frequency. Either `day`, `week`, `month` or `year`. */
        interval: Recurring.Interval;
        /** The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks). */
        interval_count?: number;
        /** The meter tracking the usage of a metered price */
        meter?: string;
        /** Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
        trial_period_days?: number;
        /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
        usage_type?: Recurring.UsageType;
    }

    export namespace Recurring {
        /**
         * Specifies a usage aggregation strategy for prices of `usage_type=metered`. Defaults to `sum`.
         */
        export type AggregateUsage = "last_during_period" | "last_ever" | "max" | "sum";
        export const AggregateUsage = {
            LastDuringPeriod: "last_during_period",
            LastEver: "last_ever",
            Max: "max",
            Sum: "sum",
        } as const;
        /**
         * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
         */
        export type Interval = "day" | "month" | "week" | "year";
        export const Interval = {
            Day: "day",
            Month: "month",
            Week: "week",
            Year: "year",
        } as const;
        /**
         * Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
         */
        export type UsageType = "licensed" | "metered";
        export const UsageType = {
            Licensed: "licensed",
            Metered: "metered",
        } as const;
    }

    /**
     * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
     */
    export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
    export const TaxBehavior = {
        Exclusive: "exclusive",
        Inclusive: "inclusive",
        Unspecified: "unspecified",
    } as const;
    export type Tiers = Tiers.Item[];

    export namespace Tiers {
        export interface Item {
            /** The flat billing amount for an entire tier, regardless of the number of units in the tier. */
            flat_amount?: number;
            /** Same as `flat_amount`, but accepts a decimal value representing an integer in the minor units of the currency. Only one of `flat_amount` and `flat_amount_decimal` can be set. */
            flat_amount_decimal?: string;
            /** The per unit billing amount for each individual unit for which this tier applies. */
            unit_amount?: number;
            /** Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
            unit_amount_decimal?: string;
            /** Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use `inf` to define a fallback tier. */
            up_to: Item.UpTo;
        }

        export namespace Item {
            /**
             * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use `inf` to define a fallback tier.
             */
            export type UpTo = "inf" | number;
        }
    }

    /**
     * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
     */
    export type TiersMode = "graduated" | "volume";
    export const TiersMode = {
        Graduated: "graduated",
        Volume: "volume",
    } as const;

    /**
     * Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
     */
    export interface TransformQuantity {
        /** Divide usage by this number. */
        divide_by: number;
        /** After division, either round the result `up` or `down`. */
        round: TransformQuantity.Round;
    }

    export namespace TransformQuantity {
        /**
         * After division, either round the result `up` or `down`.
         */
        export type Round = "down" | "up";
        export const Round = {
            Down: "down",
            Up: "up",
        } as const;
    }
}
