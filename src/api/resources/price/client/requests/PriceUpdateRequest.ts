/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
export interface PriceUpdateRequest {
    /** Whether the price can be used for new purchases. Defaults to `true`. */
    active?: boolean;
    /** Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies). */
    currency_options?: PriceUpdateRequest.CurrencyOptions;
    /** Specifies which fields in the response should be expanded. */
    expand?: string[];
    /** A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
    lookup_key?: string;
    /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
    metadata?: PriceUpdateRequest.Metadata;
    /** A brief description of the price, hidden from customers. */
    nickname?: string;
    /** Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
    tax_behavior?: PriceUpdateRequest.TaxBehavior;
    /** If set to true, will atomically remove the lookup key from the existing price, and assign it to this price. */
    transfer_lookup_key?: boolean;
}

export namespace PriceUpdateRequest {
    /**
     * Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
     */
    export type CurrencyOptions =
        | Record<
              string,
              {
                  custom_unit_amount?:
                      | {
                            enabled: boolean;
                            maximum?: number | undefined;
                            minimum?: number | undefined;
                            preset?: number | undefined;
                        }
                      | undefined;
                  tax_behavior?: ("exclusive" | "inclusive" | "unspecified") | undefined;
                  tiers?:
                      | {
                            flat_amount?: number | undefined;
                            flat_amount_decimal?: string | undefined;
                            unit_amount?: number | undefined;
                            unit_amount_decimal?: string | undefined;
                            up_to: "inf" | number;
                        }[]
                      | undefined;
                  unit_amount?: number | undefined;
                  unit_amount_decimal?: string | undefined;
              }
          >
        | "";
    /**
     * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
     */
    export type Metadata = Record<string, string> | "";
    /**
     * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
     */
    export type TaxBehavior = "exclusive" | "inclusive" | "unspecified";
    export const TaxBehavior = {
        Exclusive: "exclusive",
        Inclusive: "inclusive",
        Unspecified: "unspecified",
    } as const;
}
